Search.setIndex({"docnames": ["contributing", "examples/README", "examples/pool/README", "examples/stream/README", "generated/api/skactiveml.base.AnnotatorModelMixin", "generated/api/skactiveml.base.BudgetManager", "generated/api/skactiveml.base.ClassFrequencyEstimator", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.ProbabilisticRegressor", "generated/api/skactiveml.base.QueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy", "generated/api/skactiveml.base.SkactivemlClassifier", "generated/api/skactiveml.base.SkactivemlRegressor", "generated/api/skactiveml.classifier.MixtureModelClassifier", "generated/api/skactiveml.classifier.ParzenWindowClassifier", "generated/api/skactiveml.classifier.SklearnClassifier", "generated/api/skactiveml.classifier.SlidingWindowClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "generated/api/skactiveml.exceptions.MappingError", "generated/api/skactiveml.pool.Badge", "generated/api/skactiveml.pool.BatchBALD", "generated/api/skactiveml.pool.Clue", "generated/api/skactiveml.pool.ContrastiveAL", "generated/api/skactiveml.pool.CoreSet", "generated/api/skactiveml.pool.CostEmbeddingAL", "generated/api/skactiveml.pool.DiscriminativeAL", "generated/api/skactiveml.pool.DropQuery", "generated/api/skactiveml.pool.EpistemicUncertaintySampling", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization", "generated/api/skactiveml.pool.ExpectedModelOutputChange", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction", "generated/api/skactiveml.pool.Falcun", "generated/api/skactiveml.pool.FourDs", "generated/api/skactiveml.pool.GreedyBALD", "generated/api/skactiveml.pool.GreedySamplingTarget", "generated/api/skactiveml.pool.GreedySamplingX", "generated/api/skactiveml.pool.KLDivergenceMaximization", "generated/api/skactiveml.pool.MonteCarloEER", "generated/api/skactiveml.pool.ParallelUtilityEstimationWrapper", "generated/api/skactiveml.pool.ProbCover", "generated/api/skactiveml.pool.ProbabilisticAL", "generated/api/skactiveml.pool.QueryByCommittee", "generated/api/skactiveml.pool.Quire", "generated/api/skactiveml.pool.RandomSampling", "generated/api/skactiveml.pool.RegressionTreeBasedAL", "generated/api/skactiveml.pool.SubSamplingWrapper", "generated/api/skactiveml.pool.TypiClust", "generated/api/skactiveml.pool.UncertaintySampling", "generated/api/skactiveml.pool.ValueOfInformationEER", "generated/api/skactiveml.pool.average_kl_divergence", "generated/api/skactiveml.pool.batch_bald", "generated/api/skactiveml.pool.cost_reduction", "generated/api/skactiveml.pool.expected_average_precision", "generated/api/skactiveml.pool.k_greedy_center", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "generated/api/skactiveml.pool.uncertainty_scores", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper", "generated/api/skactiveml.pool.variation_ratios", "generated/api/skactiveml.pool.vote_entropy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn", "generated/api/skactiveml.stream.FixedUncertainty", "generated/api/skactiveml.stream.PeriodicSampling", "generated/api/skactiveml.stream.RandomVariableUncertainty", "generated/api/skactiveml.stream.Split", "generated/api/skactiveml.stream.StreamDensityBasedAL", "generated/api/skactiveml.stream.StreamProbabilisticAL", "generated/api/skactiveml.stream.StreamRandomSampling", "generated/api/skactiveml.stream.VariableUncertainty", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "generated/api/skactiveml.utils.ExtLabelEncoder", "generated/api/skactiveml.utils._check_callable", "generated/api/skactiveml.utils.call_func", "generated/api/skactiveml.utils.check_X_y", "generated/api/skactiveml.utils.check_bound", "generated/api/skactiveml.utils.check_budget_manager", "generated/api/skactiveml.utils.check_class_prior", "generated/api/skactiveml.utils.check_classes", "generated/api/skactiveml.utils.check_classifier_params", "generated/api/skactiveml.utils.check_cost_matrix", "generated/api/skactiveml.utils.check_equal_missing_label", "generated/api/skactiveml.utils.check_indices", "generated/api/skactiveml.utils.check_missing_label", "generated/api/skactiveml.utils.check_n_features", "generated/api/skactiveml.utils.check_random_state", "generated/api/skactiveml.utils.check_scalar", "generated/api/skactiveml.utils.check_type", "generated/api/skactiveml.utils.compute_vote_vectors", "generated/api/skactiveml.utils.ext_confusion_matrix", "generated/api/skactiveml.utils.is_labeled", "generated/api/skactiveml.utils.is_unlabeled", "generated/api/skactiveml.utils.labeled_indices", "generated/api/skactiveml.utils.majority_vote", "generated/api/skactiveml.utils.match_signature", "generated/api/skactiveml.utils.rand_argmax", "generated/api/skactiveml.utils.rand_argmin", "generated/api/skactiveml.utils.simple_batch", "generated/api/skactiveml.utils.unlabeled_indices", "generated/api/skactiveml.visualization.mesh", "generated/api/skactiveml.visualization.plot_annotator_utilities", "generated/api/skactiveml.visualization.plot_contour_for_samples", "generated/api/skactiveml.visualization.plot_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_training_data", "generated/api/skactiveml.visualization.plot_utilities", "generated/api_reference", "generated/examples/README", "generated/examples/pool/README", "generated/examples/stream/README", "generated/sphinx_gallery_examples/index", "generated/sphinx_gallery_examples/pool/index", "generated/sphinx_gallery_examples/pool/plot-Badge-Batch_Active_Learning_by_Diverse_Gradient_Embedding_(BADGE)", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Batch_Bayesian_Active_Learning_by_Disagreement_(BatchBALD)", "generated/sphinx_gallery_examples/pool/plot-Clue-Clustering_Uncertainty-weighted_Embeddings_(CLUE)", "generated/sphinx_gallery_examples/pool/plot-ContrastiveAL-Contrastive_Active_Learning_(CAL)", "generated/sphinx_gallery_examples/pool/plot-CoreSet-Core_Set", "generated/sphinx_gallery_examples/pool/plot-CostEmbeddingAL-Active_Learning_with_Cost_Embedding_(ALCE)", "generated/sphinx_gallery_examples/pool/plot-DiscriminativeAL-Discriminative_Active_Learning_(DAL)", "generated/sphinx_gallery_examples/pool/plot-DropQuery-Dropout_Query_(DropQuery)", "generated/sphinx_gallery_examples/pool/plot-EpistemicUncertaintySampling-Epistemic_Uncertainty_Sampling_(EpisUS)", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelChangeMaximization-Expected_Model_Change", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelOutputChange-Expected_Model_Output_Change", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelVarianceReduction-Expected_Model_Variance_Reduction", "generated/sphinx_gallery_examples/pool/plot-Falcun-Fast_Active_Learning_by_Contrastive_UNcertainty_(FALCUN)", "generated/sphinx_gallery_examples/pool/plot-FourDs-Batch_Density-Diversity-Distribution-Distance_Sampling_(Batch4DS)", "generated/sphinx_gallery_examples/pool/plot-FourDs-Density-Diversity-Distribution-Distance_Sampling_(4DS)", "generated/sphinx_gallery_examples/pool/plot-GreedyBALD-Bayesian_Active_Learning_by_Disagreement_(BALD)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Greedy_Sampling_on_the_Target_Space_(GSy)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Improved_Greedy_Sampling_(GSi)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingX-Greedy_Sampling_on_the_Feature_Space_(GSx)", "generated/sphinx_gallery_examples/pool/plot-KLDivergenceMaximization-Regression_based_Kullback_Leibler_Divergence_Maximization", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Log-Loss", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Misclassification-Loss", "generated/sphinx_gallery_examples/pool/plot-ParallelUtilityEstimationWrapper-Parallel_Utility_Estimation_Wrapper", "generated/sphinx_gallery_examples/pool/plot-ProbCover-Probability_Coverage_(ProbCover)", "generated/sphinx_gallery_examples/pool/plot-ProbabilisticAL-Multi-class_Probabilistic_Active_Learning_(McPAL)", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Empirical_Variance", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Kullback-Leibler_Divergence", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Variation_Ratios", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Vote_Entropy", "generated/sphinx_gallery_examples/pool/plot-Quire-Querying_Informative_and_Representative_Examples_(QUIRE)", "generated/sphinx_gallery_examples/pool/plot-RandomSampling-Random_Sampling", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Diversity_Selection", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Random_Selection", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Representativity_Selection", "generated/sphinx_gallery_examples/pool/plot-SubSamplingWrapper-Sub-sampling_Wrapper", "generated/sphinx_gallery_examples/pool/plot-TypiClust-Typical_Clustering_(TypiClust)", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Density-weighted_Uncertainty_Sampling", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Dual_Strategy_for_Active_Learning", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Expected_Average_Precision", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Entropy", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Least-Confidence", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Margin", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_(VOI)", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Labeled_Samples", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Unlabeled_Samples", "generated/sphinx_gallery_examples/pool/sg_execution_times", "generated/sphinx_gallery_examples/sg_execution_times", "generated/sphinx_gallery_examples/stream/index", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyFixUn-Cognitive_Dual-Query_Strategy_with_Fixed-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRan-Cognitive_Dual-Query_Strategy_with_Random_Sampling", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRanVarUn-Cognitive_Dual-Query_Strategy_with_Randomized-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyVarUn-Cognitive_Dual-Query_Strategy_with_Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-FixedUncertainty-Fixed-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-PeriodicSampling-Periodic_Sampling", "generated/sphinx_gallery_examples/stream/plot-RandomVariableUncertainty-Randomized-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-Split-Split", "generated/sphinx_gallery_examples/stream/plot-StreamDensityBasedAL-Density_Based_Active_Learning_for_Data_Streams", "generated/sphinx_gallery_examples/stream/plot-StreamProbabilisticAL-Probabilistic_Active_Learning_in_Datastreams", "generated/sphinx_gallery_examples/stream/plot-StreamRandomSampling-Stream_Random_Sampling", "generated/sphinx_gallery_examples/stream/plot-VariableUncertainty-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/sg_execution_times", "generated/strategy_overview", "generated/tutorials/00_pool_getting_started", "generated/tutorials/01_deep_pool_al_with_skorch", "generated/tutorials/02_pool_regression_getting_started", "generated/tutorials/03_pool_oracle_annotations", "generated/tutorials/04_pool_simple_evaluation_study", "generated/tutorials/05_pool_al_with_self_supervised_learning", "generated/tutorials/06_pool_al_text_annotation_tool", "generated/tutorials/10_multiple_annotators_getting_started", "generated/tutorials/20_stream_getting_started", "generated/tutorials/21_stream_batch_with_pool_al", "generated/tutorials/22_river_classifier", "generated/tutorials_colab/00_pool_getting_started", "generated/tutorials_colab/01_deep_pool_al_with_skorch", "generated/tutorials_colab/02_pool_regression_getting_started", "generated/tutorials_colab/03_pool_oracle_annotations", "generated/tutorials_colab/04_pool_simple_evaluation_study", "generated/tutorials_colab/05_pool_al_with_self_supervised_learning", "generated/tutorials_colab/06_pool_al_text_annotation_tool", "generated/tutorials_colab/10_multiple_annotators_getting_started", "generated/tutorials_colab/20_stream_getting_started", "generated/tutorials_colab/21_stream_batch_with_pool_al", "generated/tutorials_colab/22_river_classifier", "index", "sg_execution_times", "skactiveml.utils.MISSING_LABEL", "tutorials"], "filenames": ["contributing.rst", "examples/README.rst", "examples/pool/README.rst", "examples/stream/README.rst", "generated/api/skactiveml.base.AnnotatorModelMixin.rst", "generated/api/skactiveml.base.BudgetManager.rst", "generated/api/skactiveml.base.ClassFrequencyEstimator.rst", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.ProbabilisticRegressor.rst", "generated/api/skactiveml.base.QueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy.rst", "generated/api/skactiveml.base.SkactivemlClassifier.rst", "generated/api/skactiveml.base.SkactivemlRegressor.rst", "generated/api/skactiveml.classifier.MixtureModelClassifier.rst", "generated/api/skactiveml.classifier.ParzenWindowClassifier.rst", "generated/api/skactiveml.classifier.SklearnClassifier.rst", "generated/api/skactiveml.classifier.SlidingWindowClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.rst", "generated/api/skactiveml.exceptions.MappingError.rst", "generated/api/skactiveml.pool.Badge.rst", "generated/api/skactiveml.pool.BatchBALD.rst", "generated/api/skactiveml.pool.Clue.rst", "generated/api/skactiveml.pool.ContrastiveAL.rst", "generated/api/skactiveml.pool.CoreSet.rst", "generated/api/skactiveml.pool.CostEmbeddingAL.rst", "generated/api/skactiveml.pool.DiscriminativeAL.rst", "generated/api/skactiveml.pool.DropQuery.rst", "generated/api/skactiveml.pool.EpistemicUncertaintySampling.rst", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization.rst", "generated/api/skactiveml.pool.ExpectedModelOutputChange.rst", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction.rst", "generated/api/skactiveml.pool.Falcun.rst", "generated/api/skactiveml.pool.FourDs.rst", "generated/api/skactiveml.pool.GreedyBALD.rst", "generated/api/skactiveml.pool.GreedySamplingTarget.rst", "generated/api/skactiveml.pool.GreedySamplingX.rst", "generated/api/skactiveml.pool.KLDivergenceMaximization.rst", "generated/api/skactiveml.pool.MonteCarloEER.rst", "generated/api/skactiveml.pool.ParallelUtilityEstimationWrapper.rst", "generated/api/skactiveml.pool.ProbCover.rst", "generated/api/skactiveml.pool.ProbabilisticAL.rst", "generated/api/skactiveml.pool.QueryByCommittee.rst", "generated/api/skactiveml.pool.Quire.rst", "generated/api/skactiveml.pool.RandomSampling.rst", "generated/api/skactiveml.pool.RegressionTreeBasedAL.rst", "generated/api/skactiveml.pool.SubSamplingWrapper.rst", "generated/api/skactiveml.pool.TypiClust.rst", "generated/api/skactiveml.pool.UncertaintySampling.rst", "generated/api/skactiveml.pool.ValueOfInformationEER.rst", "generated/api/skactiveml.pool.average_kl_divergence.rst", "generated/api/skactiveml.pool.batch_bald.rst", "generated/api/skactiveml.pool.cost_reduction.rst", "generated/api/skactiveml.pool.expected_average_precision.rst", "generated/api/skactiveml.pool.k_greedy_center.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold.rst", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper.rst", "generated/api/skactiveml.pool.uncertainty_scores.rst", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper.rst", "generated/api/skactiveml.pool.variation_ratios.rst", "generated/api/skactiveml.pool.vote_entropy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn.rst", "generated/api/skactiveml.stream.FixedUncertainty.rst", "generated/api/skactiveml.stream.PeriodicSampling.rst", "generated/api/skactiveml.stream.RandomVariableUncertainty.rst", "generated/api/skactiveml.stream.Split.rst", "generated/api/skactiveml.stream.StreamDensityBasedAL.rst", "generated/api/skactiveml.stream.StreamProbabilisticAL.rst", "generated/api/skactiveml.stream.StreamRandomSampling.rst", "generated/api/skactiveml.stream.VariableUncertainty.rst", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.rst", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.rst", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.utils.ExtLabelEncoder.rst", "generated/api/skactiveml.utils._check_callable.rst", "generated/api/skactiveml.utils.call_func.rst", "generated/api/skactiveml.utils.check_X_y.rst", "generated/api/skactiveml.utils.check_bound.rst", "generated/api/skactiveml.utils.check_budget_manager.rst", "generated/api/skactiveml.utils.check_class_prior.rst", "generated/api/skactiveml.utils.check_classes.rst", "generated/api/skactiveml.utils.check_classifier_params.rst", "generated/api/skactiveml.utils.check_cost_matrix.rst", "generated/api/skactiveml.utils.check_equal_missing_label.rst", "generated/api/skactiveml.utils.check_indices.rst", "generated/api/skactiveml.utils.check_missing_label.rst", "generated/api/skactiveml.utils.check_n_features.rst", "generated/api/skactiveml.utils.check_random_state.rst", "generated/api/skactiveml.utils.check_scalar.rst", "generated/api/skactiveml.utils.check_type.rst", "generated/api/skactiveml.utils.compute_vote_vectors.rst", "generated/api/skactiveml.utils.ext_confusion_matrix.rst", "generated/api/skactiveml.utils.is_labeled.rst", "generated/api/skactiveml.utils.is_unlabeled.rst", "generated/api/skactiveml.utils.labeled_indices.rst", "generated/api/skactiveml.utils.majority_vote.rst", "generated/api/skactiveml.utils.match_signature.rst", "generated/api/skactiveml.utils.rand_argmax.rst", "generated/api/skactiveml.utils.rand_argmin.rst", "generated/api/skactiveml.utils.simple_batch.rst", "generated/api/skactiveml.utils.unlabeled_indices.rst", "generated/api/skactiveml.visualization.mesh.rst", "generated/api/skactiveml.visualization.plot_annotator_utilities.rst", "generated/api/skactiveml.visualization.plot_contour_for_samples.rst", "generated/api/skactiveml.visualization.plot_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_training_data.rst", "generated/api/skactiveml.visualization.plot_utilities.rst", "generated/api_reference.rst", "generated/examples/README.rst", "generated/examples/pool/README.rst", "generated/examples/stream/README.rst", "generated/sphinx_gallery_examples/index.rst", "generated/sphinx_gallery_examples/pool/index.rst", "generated/sphinx_gallery_examples/pool/plot-Badge-Batch_Active_Learning_by_Diverse_Gradient_Embedding_(BADGE).rst", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Batch_Bayesian_Active_Learning_by_Disagreement_(BatchBALD).rst", "generated/sphinx_gallery_examples/pool/plot-Clue-Clustering_Uncertainty-weighted_Embeddings_(CLUE).rst", "generated/sphinx_gallery_examples/pool/plot-ContrastiveAL-Contrastive_Active_Learning_(CAL).rst", "generated/sphinx_gallery_examples/pool/plot-CoreSet-Core_Set.rst", "generated/sphinx_gallery_examples/pool/plot-CostEmbeddingAL-Active_Learning_with_Cost_Embedding_(ALCE).rst", "generated/sphinx_gallery_examples/pool/plot-DiscriminativeAL-Discriminative_Active_Learning_(DAL).rst", "generated/sphinx_gallery_examples/pool/plot-DropQuery-Dropout_Query_(DropQuery).rst", "generated/sphinx_gallery_examples/pool/plot-EpistemicUncertaintySampling-Epistemic_Uncertainty_Sampling_(EpisUS).rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelChangeMaximization-Expected_Model_Change.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelOutputChange-Expected_Model_Output_Change.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelVarianceReduction-Expected_Model_Variance_Reduction.rst", "generated/sphinx_gallery_examples/pool/plot-Falcun-Fast_Active_Learning_by_Contrastive_UNcertainty_(FALCUN).rst", "generated/sphinx_gallery_examples/pool/plot-FourDs-Batch_Density-Diversity-Distribution-Distance_Sampling_(Batch4DS).rst", "generated/sphinx_gallery_examples/pool/plot-FourDs-Density-Diversity-Distribution-Distance_Sampling_(4DS).rst", "generated/sphinx_gallery_examples/pool/plot-GreedyBALD-Bayesian_Active_Learning_by_Disagreement_(BALD).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Greedy_Sampling_on_the_Target_Space_(GSy).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Improved_Greedy_Sampling_(GSi).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingX-Greedy_Sampling_on_the_Feature_Space_(GSx).rst", "generated/sphinx_gallery_examples/pool/plot-KLDivergenceMaximization-Regression_based_Kullback_Leibler_Divergence_Maximization.rst", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Log-Loss.rst", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Misclassification-Loss.rst", "generated/sphinx_gallery_examples/pool/plot-ParallelUtilityEstimationWrapper-Parallel_Utility_Estimation_Wrapper.rst", "generated/sphinx_gallery_examples/pool/plot-ProbCover-Probability_Coverage_(ProbCover).rst", "generated/sphinx_gallery_examples/pool/plot-ProbabilisticAL-Multi-class_Probabilistic_Active_Learning_(McPAL).rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Empirical_Variance.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Kullback-Leibler_Divergence.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Variation_Ratios.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Vote_Entropy.rst", "generated/sphinx_gallery_examples/pool/plot-Quire-Querying_Informative_and_Representative_Examples_(QUIRE).rst", "generated/sphinx_gallery_examples/pool/plot-RandomSampling-Random_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Diversity_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Random_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Representativity_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-SubSamplingWrapper-Sub-sampling_Wrapper.rst", "generated/sphinx_gallery_examples/pool/plot-TypiClust-Typical_Clustering_(TypiClust).rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Density-weighted_Uncertainty_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Dual_Strategy_for_Active_Learning.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Expected_Average_Precision.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Entropy.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Least-Confidence.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Margin.rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_(VOI).rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Labeled_Samples.rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Unlabeled_Samples.rst", "generated/sphinx_gallery_examples/pool/sg_execution_times.rst", "generated/sphinx_gallery_examples/sg_execution_times.rst", "generated/sphinx_gallery_examples/stream/index.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyFixUn-Cognitive_Dual-Query_Strategy_with_Fixed-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRan-Cognitive_Dual-Query_Strategy_with_Random_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRanVarUn-Cognitive_Dual-Query_Strategy_with_Randomized-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyVarUn-Cognitive_Dual-Query_Strategy_with_Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-FixedUncertainty-Fixed-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-PeriodicSampling-Periodic_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-RandomVariableUncertainty-Randomized-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-Split-Split.rst", "generated/sphinx_gallery_examples/stream/plot-StreamDensityBasedAL-Density_Based_Active_Learning_for_Data_Streams.rst", "generated/sphinx_gallery_examples/stream/plot-StreamProbabilisticAL-Probabilistic_Active_Learning_in_Datastreams.rst", "generated/sphinx_gallery_examples/stream/plot-StreamRandomSampling-Stream_Random_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-VariableUncertainty-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/sg_execution_times.rst", "generated/strategy_overview.rst", "generated/tutorials/00_pool_getting_started.ipynb", "generated/tutorials/01_deep_pool_al_with_skorch.ipynb", "generated/tutorials/02_pool_regression_getting_started.ipynb", "generated/tutorials/03_pool_oracle_annotations.ipynb", "generated/tutorials/04_pool_simple_evaluation_study.ipynb", "generated/tutorials/05_pool_al_with_self_supervised_learning.ipynb", "generated/tutorials/06_pool_al_text_annotation_tool.ipynb", "generated/tutorials/10_multiple_annotators_getting_started.ipynb", "generated/tutorials/20_stream_getting_started.ipynb", "generated/tutorials/21_stream_batch_with_pool_al.ipynb", "generated/tutorials/22_river_classifier.ipynb", "generated/tutorials_colab/00_pool_getting_started.ipynb", "generated/tutorials_colab/01_deep_pool_al_with_skorch.ipynb", "generated/tutorials_colab/02_pool_regression_getting_started.ipynb", "generated/tutorials_colab/03_pool_oracle_annotations.ipynb", "generated/tutorials_colab/04_pool_simple_evaluation_study.ipynb", "generated/tutorials_colab/05_pool_al_with_self_supervised_learning.ipynb", "generated/tutorials_colab/06_pool_al_text_annotation_tool.ipynb", "generated/tutorials_colab/10_multiple_annotators_getting_started.ipynb", "generated/tutorials_colab/20_stream_getting_started.ipynb", "generated/tutorials_colab/21_stream_batch_with_pool_al.ipynb", "generated/tutorials_colab/22_river_classifier.ipynb", "index.rst", "sg_execution_times.rst", "skactiveml.utils.MISSING_LABEL.rst", "tutorials.rst"], "titles": ["Contributing Guide", "Examples", "Pool Based AL Strategies", "Stream Based AL Strategies", "skactiveml.base.AnnotatorModelMixin", "skactiveml.base.BudgetManager", "skactiveml.base.ClassFrequencyEstimator", "skactiveml.base.MultiAnnotatorPoolQueryStrategy", "skactiveml.base.ProbabilisticRegressor", "skactiveml.base.QueryStrategy", "skactiveml.base.SingleAnnotatorPoolQueryStrategy", "skactiveml.base.SingleAnnotatorStreamQueryStrategy", "skactiveml.base.SkactivemlClassifier", "skactiveml.base.SkactivemlRegressor", "skactiveml.classifier.MixtureModelClassifier", "skactiveml.classifier.ParzenWindowClassifier", "skactiveml.classifier.SklearnClassifier", "skactiveml.classifier.SlidingWindowClassifier", "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "skactiveml.exceptions.MappingError", "skactiveml.pool.Badge", "skactiveml.pool.BatchBALD", "skactiveml.pool.Clue", "skactiveml.pool.ContrastiveAL", "skactiveml.pool.CoreSet", "skactiveml.pool.CostEmbeddingAL", "skactiveml.pool.DiscriminativeAL", "skactiveml.pool.DropQuery", "skactiveml.pool.EpistemicUncertaintySampling", "skactiveml.pool.ExpectedModelChangeMaximization", "skactiveml.pool.ExpectedModelOutputChange", "skactiveml.pool.ExpectedModelVarianceReduction", "skactiveml.pool.Falcun", "skactiveml.pool.FourDs", "skactiveml.pool.GreedyBALD", "skactiveml.pool.GreedySamplingTarget", "skactiveml.pool.GreedySamplingX", "skactiveml.pool.KLDivergenceMaximization", "skactiveml.pool.MonteCarloEER", "skactiveml.pool.ParallelUtilityEstimationWrapper", "skactiveml.pool.ProbCover", "skactiveml.pool.ProbabilisticAL", "skactiveml.pool.QueryByCommittee", "skactiveml.pool.Quire", "skactiveml.pool.RandomSampling", "skactiveml.pool.RegressionTreeBasedAL", "skactiveml.pool.SubSamplingWrapper", "skactiveml.pool.TypiClust", "skactiveml.pool.UncertaintySampling", "skactiveml.pool.ValueOfInformationEER", "skactiveml.pool.average_kl_divergence", "skactiveml.pool.batch_bald", "skactiveml.pool.cost_reduction", "skactiveml.pool.expected_average_precision", "skactiveml.pool.k_greedy_center", "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "skactiveml.pool.multiannotator.IntervalEstimationThreshold", "skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "skactiveml.pool.uncertainty_scores", "skactiveml.pool.utils.IndexClassifierWrapper", "skactiveml.pool.variation_ratios", "skactiveml.pool.vote_entropy", "skactiveml.stream.CognitiveDualQueryStrategy", "skactiveml.stream.CognitiveDualQueryStrategyFixUn", "skactiveml.stream.CognitiveDualQueryStrategyRan", "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "skactiveml.stream.CognitiveDualQueryStrategyVarUn", "skactiveml.stream.FixedUncertainty", "skactiveml.stream.PeriodicSampling", "skactiveml.stream.RandomVariableUncertainty", "skactiveml.stream.Split", "skactiveml.stream.StreamDensityBasedAL", "skactiveml.stream.StreamProbabilisticAL", "skactiveml.stream.StreamRandomSampling", "skactiveml.stream.VariableUncertainty", "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.RandomBudgetManager", "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.SplitBudgetManager", "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "skactiveml.utils.ExtLabelEncoder", "skactiveml.utils._check_callable", "skactiveml.utils.call_func", "skactiveml.utils.check_X_y", "skactiveml.utils.check_bound", "skactiveml.utils.check_budget_manager", "skactiveml.utils.check_class_prior", "skactiveml.utils.check_classes", "skactiveml.utils.check_classifier_params", "skactiveml.utils.check_cost_matrix", "skactiveml.utils.check_equal_missing_label", "skactiveml.utils.check_indices", "skactiveml.utils.check_missing_label", "skactiveml.utils.check_n_features", "skactiveml.utils.check_random_state", "skactiveml.utils.check_scalar", "skactiveml.utils.check_type", "skactiveml.utils.compute_vote_vectors", "skactiveml.utils.ext_confusion_matrix", "skactiveml.utils.is_labeled", "skactiveml.utils.is_unlabeled", "skactiveml.utils.labeled_indices", "skactiveml.utils.majority_vote", "skactiveml.utils.match_signature", "skactiveml.utils.rand_argmax", "skactiveml.utils.rand_argmin", "skactiveml.utils.simple_batch", "skactiveml.utils.unlabeled_indices", "skactiveml.visualization.mesh", "skactiveml.visualization.plot_annotator_utilities", "skactiveml.visualization.plot_contour_for_samples", "skactiveml.visualization.plot_decision_boundary", "skactiveml.visualization.plot_stream_decision_boundary", "skactiveml.visualization.plot_stream_training_data", "skactiveml.visualization.plot_utilities", "API Reference", "Examples", "Pool Based AL Strategies", "Stream Based AL Strategies", "Examples", "Pool Based AL Strategies", "Batch Active Learning by Diverse Gradient Embedding (BADGE)", "Batch Bayesian Active Learning by Disagreement (BatchBALD)", "Clustering Uncertainty-weighted Embeddings (CLUE)", "Contrastive Active Learning (CAL)", "Core Set", "Active Learning with Cost Embedding", "Discriminative Active Learning", "Dropout Query (DropQuery)", "Epistemic Uncertainty Sampling", "Expected Model Change Maximization", "Expected Model Output Change", "Expected Model Variance Reduction", "Fast Active Learning by Contrastive UNcertainty (FALCUN)", "Batch Density-Diversity-Distribution-Distance Sampling", "Density-Diversity-Distribution-Distance Sampling", "Bayesian Active Learning by Disagreement (BALD)", "Greedy Sampling on the Target Space (GSy)", "Improved Greedy Sampling (GSi)", "Greedy Sampling on the Feature Space (GSx)", "Regression based Kullback Leibler Divergence Maximization", "Monte-Carlo EER with Log-Loss", "Monte-Carlo EER with Misclassification-Loss", "Parallel Utility Estimation Wrapper", "Probability Coverage (ProbCover)", "Multi-class Probabilistic Active Learning", "Query-by-Committee (QBC) with Empirical Variance", "Query-by-Committee (QBC) with Kullback-Leibler Divergence", "Query-by-Committee (QBC) with Variation Ratios", "Query-by-Committee (QBC) with Vote Entropy", "Querying Informative and Representative Examples", "Random Sampling", "Regression Tree Based Active Learning (RT-AL) with Diversity Selection", "Regression Tree Based Active Learning (RT-AL) with Random Selection", "Regression Tree Based Active Learning (RT-AL) with Representativity Selection", "Sub-sampling Wrapper", "Typical Clustering (TypiClust)", "Density-weighted Uncertainty Sampling", "Dual Strategy for Active Learning", "Expected Average Precision", "Uncertainty Sampling with Entropy", "Uncertainty Sampling with Least-Confidence", "Uncertainty Sampling with Margin", "Value of Information", "Value of Information on Labeled Samples", "Value of Information on Unlabeled Samples", "Computation times", "Computation times", "Stream Based AL Strategies", "Cognitive Dual-Query Strategy with Fixed-Uncertainty", "Cognitive Dual-Query Strategy with Random Sampling", "Cognitive Dual-Query Strategy with Randomized-Variable-Uncertainty", "Cognitive Dual-Query Strategy with Variable-Uncertainty", "Fixed-Uncertainty", "Periodic Sampling", "Randomized-Variable-Uncertainty", "Split", "Density Based Active Learning for Data Streams", "Probabilistic Active Learning in Datastreams", "Stream Random Sampling", "Variable-Uncertainty", "Computation times", "Strategy Overview", "Pool-based Active Learning - Getting Started", "Deep Pool-based Active Learning: Scikit-activeml with Skorch", "Pool-based Active Learning for Regression - Getting Started", "Sample Annotating", "Pool-based Active Learning - Simple Evaluation Study", "Active Image Classification via Self-supervised Learning", "Paper Annotation Tool using Text Embeddings", "Multi-annotator Pool-based Active Learning - Getting Started", "Stream-based Active Learning - Getting Started", "Batch Stream Active Learning with Pool-based Query Strategies", "Stream-based Active Learning with River", "Pool-based Active Learning - Getting Started", "Deep Pool-based Active Learning: Scikit-activeml with Skorch", "Pool-based Active Learning for Regression - Getting Started", "Sample Annotating", "Pool-based Active Learning - Simple Evaluation Study", "Active Image Classification via Self-supervised Learning", "Paper Annotation Tool using Text Embeddings", "Multi-annotator Pool-based Active Learning - Getting Started", "Stream-based Active Learning - Getting Started", "Batch Stream Active Learning with Pool-based Query Strategies", "Stream-based Active Learning with River", "scikit-activeml: A Library and Toolbox for Active Learning Algorithms", "Computation times", "skactiveml.utils.MISSING_LABEL", "Tutorials"], "terms": {"scikit": [0, 6, 7, 8, 9, 10, 12, 13, 16, 87, 102, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212], "activeml": [0, 6, 7, 8, 9, 10, 12, 13, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212], "i": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "librari": [0, 187, 192, 197, 198, 203, 208], "implement": [0, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 79, 81, 82, 83, 115, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 186, 187, 188, 190, 198, 199, 201, 209], "most": [0, 11, 23, 31, 37, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 79, 186, 187, 189, 198, 200, 209], "import": [0, 39, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "activ": [0, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 103, 105, 110, 111, 114, 115, 116, 117, 118, 119, 123, 124, 127, 129, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 184, 185, 186, 190, 201, 210, 211, 212], "learn": [0, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 102, 103, 105, 110, 111, 114, 115, 116, 117, 118, 119, 123, 124, 127, 129, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 184, 185, 186, 190, 201, 210, 211, 212], "It": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 27, 28, 35, 36, 37, 46, 57, 71, 73, 76, 77, 100, 108, 109, 115, 187, 190, 192, 198, 201, 203], "built": [0, 187, 189, 198, 200], "upon": [0, 187, 198], "well": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 112, 187, 195, 196, 197, 198, 206, 207, 208, 209], "known": [0, 102, 187, 198], "machin": [0, 87, 187, 190, 192, 193, 198, 201, 203, 204, 209], "framework": [0, 38, 144, 186, 188, 190, 199, 201], "our": [0, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209], "philosophi": 0, "extend": [0, 6, 50, 193, 195, 196, 197, 204, 206, 207, 208], "sklearn": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 26, 28, 29, 30, 31, 36, 37, 41, 42, 43, 44, 46, 48, 56, 63, 64, 65, 66, 67, 72, 73, 87, 102, 107, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "ecosystem": 0, "relev": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 27, 29, 33, 39, 43, 50, 56, 187, 198], "tool": [0, 119, 190, 201, 212], "work": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 173, 174, 187, 193, 198, 204], "partial": [0, 16, 17, 60], "unlabel": [0, 6, 7, 9, 10, 12, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 84, 87, 105, 113, 114, 115, 116, 117, 118, 123, 124, 156, 157, 158, 170, 186, 187, 189, 190, 192, 198, 200, 201, 203, 209, 210, 211], "data": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 87, 96, 97, 99, 106, 108, 109, 113, 114, 116, 117, 118, 123, 130, 134, 150, 156, 157, 158, 162, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 190, 193, 201, 204, 209, 210, 211], "repositori": 0, "": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 97, 99, 108, 109, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208], "structur": [0, 108, 109], "provid": [0, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 97, 186, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209], "imag": [0, 43, 50, 61, 152, 169, 186, 188, 190, 193, 199, 201, 204, 209, 212], "below": [0, 41, 186, 187, 189, 192, 194, 195, 196, 197, 198, 200, 203, 205, 206, 207, 208, 209], "each": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92, 94, 101, 106, 115, 116, 117, 125, 126, 127, 132, 137, 138, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208], "node": 0, "repres": [0, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 60, 63, 64, 65, 66, 67, 72, 84, 87, 88, 92, 94, 96, 97, 101, 102, 103, 104, 105, 106, 111, 115, 118, 123, 124, 125, 129, 170, 195, 196, 197, 206, 207, 208, 209, 210, 211], "class": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 111, 115, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211], "interfac": [0, 190, 201], "arrow": 0, "illustr": [0, 209], "inherit": [0, 190, 201], "hierarchi": 0, "among": [0, 55], "them": [0, 18, 60, 192, 195, 197, 203, 206, 208], "dash": [0, 115], "indic": [0, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 95, 97, 100, 102, 103, 104, 105, 108, 109, 110, 111, 113, 117, 118, 125, 126, 127, 132, 137, 138, 189, 190, 192, 193, 194, 200, 201, 203, 204, 205], "function": [0, 11, 15, 17, 30, 36, 37, 39, 41, 42, 44, 50, 55, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 85, 86, 97, 100, 102, 106, 107, 108, 109, 112, 113, 115, 118, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "yet": 0, "avail": [0, 7, 15, 20, 40, 57, 58, 59, 60, 69, 76, 77, 80, 189, 190, 195, 196, 197, 200, 201, 206, 207, 208, 209], "In": [0, 7, 16, 17, 18, 21, 22, 23, 24, 25, 26, 29, 31, 33, 41, 42, 43, 44, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 72, 73, 76, 77, 108, 109, 125, 126, 127, 128, 129, 130, 133, 134, 135, 137, 145, 146, 148, 149, 150, 151, 152, 153, 154, 160, 161, 162, 163, 167, 168, 169, 181, 182, 186, 187, 188, 190, 191, 192, 195, 196, 197, 198, 199, 201, 202, 203, 206, 207, 208], "packag": [0, 86, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211], "skactiveml": [0, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "ar": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 91, 92, 94, 95, 98, 102, 106, 110, 113, 118, 119, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209], "three": [0, 46, 59, 186, 190, 194, 201, 205], "major": [0, 18, 19, 56, 58, 194, 205], "compon": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 191, 192, 202, 203], "skactivemlclassifi": [0, 6, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 33, 35, 39, 42, 43, 49, 50, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 190, 201], "skactivemlregressor": [0, 8, 30, 43, 46], "querystrategi": [0, 11, 190, 201], "The": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 95, 96, 97, 98, 99, 100, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209], "modul": [0, 119, 188, 199, 209], "necessari": [0, 60, 190, 192, 195, 196, 197, 201, 203, 206, 207, 208], "handl": [0, 12, 16, 60, 191, 192, 193, 202, 203, 204], "specif": [0, 18, 100, 192, 203], "estim": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 97, 102, 105, 115, 118, 123, 124, 145, 146, 170, 186, 188, 197, 199, 208, 210, 211], "thi": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 93, 97, 102, 107, 113, 114, 118, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "wai": [0, 50, 188, 199, 209], "can": [0, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 36, 40, 41, 50, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 87, 99, 100, 114, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209], "easili": 0, "zero": [0, 93, 97, 149, 188, 194, 199, 205], "initi": [0, 14, 19, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 77, 81, 82, 83, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 193, 199, 204, 209], "label": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 91, 92, 94, 96, 101, 102, 103, 104, 105, 106, 111, 113, 114, 115, 116, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211], "regard": [0, 4, 6, 12, 14, 15, 16, 17, 18, 19, 188, 199], "we": [0, 15, 60, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "current": [0, 39, 50, 60, 114, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 204, 209], "differenti": [0, 8], "between": [0, 19, 20, 23, 34, 38, 41, 52, 84, 88, 186, 189, 190, 197, 200, 201, 208], "paradigm": 0, "larg": [0, 188, 192, 199, 203, 209], "sampl": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 101, 102, 103, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 162, 163, 167, 170, 172, 173, 175, 176, 177, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "stream": [0, 5, 6, 9, 11, 12, 15, 116, 117, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 210, 211, 212], "arriv": 0, "sequenti": 0, "e": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 76, 78, 84, 86, 87, 95, 97, 113, 114, 116, 117, 118, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 199, 201, 202, 203], "furthermor": [0, 17, 186, 191, 202], "distinguish": [0, 186], "multi": [0, 6, 9, 10, 12, 15, 42, 73, 87, 105, 115, 118, 119, 123, 124, 169, 170, 186, 209, 210, 211, 212], "set": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 95, 97, 105, 110, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 156, 157, 158, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 190, 192, 193, 201, 203, 204, 209, 210, 211], "latter": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "case": [0, 7, 16, 17, 22, 35, 39, 42, 43, 49, 50, 55, 56, 57, 58, 59, 108, 109, 188, 199, 209], "multipl": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 52, 56, 57, 58, 60, 102, 106, 108, 109, 113, 119, 186, 194, 195, 196, 197, 205, 206, 207, 208], "error": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 31, 39, 50, 56, 57, 87, 96, 99, 145, 146, 186, 191, 193, 202, 204], "prone": [0, 57], "As": [0, 19, 50, 187, 189, 190, 191, 198, 200, 201, 202, 209], "result": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 60, 69, 87, 106, 108, 109, 125, 126, 127, 132, 137, 138, 189, 193, 194, 195, 196, 197, 200, 204, 205, 206, 207, 208, 209], "onli": [0, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 27, 28, 29, 36, 40, 41, 43, 46, 49, 55, 56, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 92, 93, 113, 117, 118, 189, 190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 206, 207, 208, 209], "decid": [0, 56, 195, 197, 206, 208], "which": [0, 5, 6, 7, 10, 11, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 96, 101, 106, 113, 114, 115, 116, 117, 118, 119, 186, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204, 209], "also": [0, 7, 10, 11, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 82, 83, 87, 89, 100, 101, 106, 187, 190, 191, 192, 193, 194, 198, 201, 202, 203, 204, 205], "should": [0, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 43, 46, 49, 50, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 87, 107, 116, 191, 192, 193, 195, 196, 197, 202, 203, 204, 206, 207, 208], "A": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 95, 107, 129, 130, 136, 137, 144, 171, 186, 190, 192, 194, 201, 203, 205], "big": [0, 63, 64, 65, 66, 67, 72, 77, 181, 186], "all": [0, 4, 5, 7, 8, 9, 10, 11, 13, 15, 22, 24, 26, 35, 38, 39, 40, 43, 45, 46, 47, 51, 52, 54, 55, 57, 58, 60, 62, 86, 87, 102, 113, 117, 118, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210], "who": [0, 194, 205], "project": [0, 209], "new": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 39, 50, 55, 56, 60, 72, 84, 89, 98, 116, 125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 191, 192, 193, 195, 196, 197, 198, 202, 203, 204, 206, 207, 208], "enhanc": 0, "fix": [0, 6, 9, 11, 12, 15, 27, 63, 64, 68, 79, 116, 117, 123, 125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 156, 157, 158, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 202, 203, 210, 211], "have": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 97, 99, 100, 105, 107, 111, 117, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 204, 205, 206, 208, 209], "ani": [0, 15, 17, 18, 36, 37, 42, 44, 69, 73, 74, 87, 97, 102, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 204, 209], "question": [0, 76], "pleas": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 192, 203, 209], "reach": [0, 63, 64, 65, 66, 67, 187, 198], "out": [0, 188, 195, 196, 197, 199, 206, 207, 208], "other": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 45, 56, 72, 92, 94, 102, 113, 118, 187, 188, 190, 193, 195, 196, 197, 198, 199, 201, 204, 206, 207, 208, 209], "via": [0, 23, 28, 33, 49, 54, 76, 81, 82, 83, 127, 163, 186, 194, 205, 209, 212], "follow": [0, 29, 39, 50, 58, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 81, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "channel": [0, 188, 199], "github": [0, 192, 203, 209], "summar": 0, "upcom": 0, "featur": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 30, 31, 36, 37, 69, 74, 87, 88, 97, 103, 123, 124, 170, 186, 187, 189, 191, 192, 195, 196, 197, 198, 200, 202, 203, 206, 207, 208, 210, 211], "befor": [0, 47, 195, 196, 197, 206, 207, 208], "step": [0, 18, 19, 39, 50, 78, 79, 80, 81, 82, 83, 116, 188, 190, 192, 199, 201, 203], "There": [0, 6, 14, 15, 187, 198], "sever": 0, "creat": [0, 89, 103, 104, 110, 125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 195, 196, 197, 199, 200, 202, 203, 204, 206, 207, 208, 209], "local": [0, 63, 64, 65, 66, 67, 72, 190, 193, 201, 204], "python": [0, 26, 87, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 199, 209], "virtualenv": 0, "pipenv": 0, "One": 0, "possibl": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 100, 113, 118, 188, 199], "workflow": [0, 192, 203], "us": [0, 5, 7, 17, 18, 19, 52, 55, 56, 57, 58, 59, 60, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 97, 98, 102, 113, 125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 212], "name": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 96, 99, 100, 107, 191, 192, 202, 203], "conda": 0, "n": [0, 24, 35, 39, 46, 50, 52, 70, 110, 152, 162, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 193, 200, 204], "To": [0, 11, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208], "ensur": [0, 6, 14, 15, 46, 87, 192, 203], "correct": [0, 19, 50, 56, 85, 100, 193, 194, 204, 205], "Then": [0, 42, 49, 58, 187, 194, 198, 205], "pip": [0, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "now": [0, 189, 200], "requir": [0, 36, 188, 190, 199, 201, 209], "defin": [0, 6, 8, 12, 13, 14, 15, 18, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 42, 43, 44, 46, 49, 50, 57, 59, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 97, 113, 118, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 211], "txt": [0, 209], "requirements_extra": 0, "file": [0, 170, 171, 185, 192, 203, 210], "make": [0, 87, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208], "sure": [0, 87], "your": [0, 34, 138, 139, 186, 190, 193, 201, 204, 209], "cd": 0, "root": [0, 192, 203], "r": [0, 7, 8, 13, 28, 43, 44, 45, 46, 57, 58, 87, 103, 104, 105, 111, 126, 140, 186, 193, 204, 209], "after": [0, 5, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "success": 0, "must": [0, 6, 12, 14, 15, 16, 17, 18, 19, 22, 23, 28, 30, 35, 36, 37, 42, 43, 44, 46, 57, 73, 88, 93, 100, 113, 114, 115, 117, 118], "pandoc": 0, "ghostscript": 0, "thei": [0, 5, 11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 186], "brew": 0, "conform": 0, "pep": 0, "8": [0, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 186, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208], "style": [0, 87], "For": [0, 8, 13, 15, 28, 31, 32, 34, 35, 38, 40, 46, 59, 69, 86, 87, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209], "lint": 0, "flake8": 0, "recommend": [0, 18], "black": [0, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 194, 200, 205, 209], "simpl": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 137, 186, 190, 201, 209, 212], "solut": 0, "format": [0, 87, 192, 203], "command": 0, "line": [0, 115, 117, 189, 194, 200, 205, 209], "length": [0, 30, 42, 49, 69, 87, 195, 196, 197, 206, 207, 208], "79": 0, "example_fil": 0, "py": [0, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 201, 210], "fork": 0, "button": [0, 190, 193, 201, 204], "clone": [0, 131, 190, 201], "git": 0, "http": [0, 192, 203, 209], "com": [0, 192, 203, 209], "usernam": 0, "branch": 0, "chang": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 30, 31, 49, 54, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 81, 82, 83, 103, 123, 124, 163, 170, 186, 188, 193, 199, 204, 210, 211], "from": [0, 6, 8, 10, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 87, 98, 107, 113, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], "checkout": 0, "b": [0, 19, 34, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 87], "finish": 0, "pass": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 30, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 56, 58, 60, 73, 86, 87, 100, 106, 108, 109, 113, 118, 190, 193, 194, 201, 204, 205], "run": [0, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "pytest": 0, "cover": [0, 41, 148, 186], "cov": 0, "commit": 0, "push": 0, "add": [0, 19, 195, 196, 197, 206, 207, 208], "modifi": 0, "m": [0, 35, 42, 43, 52, 61, 73, 76, 87, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "messag": [0, 87, 96, 99], "abstract": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 78, 193, 204], "superclass": 0, "By": [0, 87, 102, 190, 192, 201, 203], "default": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 190, 195, 197, 201, 206, 208, 209], "its": [0, 17, 22, 35, 39, 43, 50, 78, 87, 209], "random_st": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 81, 82, 98, 106, 108, 109, 110, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "paramet": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 190, 193, 201, 204], "enforc": [0, 87], "select": [0, 7, 9, 10, 11, 13, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 102, 103, 108, 109, 110, 123, 124, 138, 139, 167, 170, 186, 187, 188, 189, 190, 192, 195, 196, 197, 198, 199, 200, 201, 203, 206, 207, 208, 210, 211], "logic": 0, "store": [0, 87, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 191, 192, 195, 196, 197, 198, 202, 203, 206, 207, 208, 209], "singleannotatorpoolquerystrategi": [0, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 118], "descript": [0, 15, 89, 193, 204], "whose": [0, 5, 6, 11, 14, 15, 17, 23, 34, 47, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 102, 107, 108, 109, 115, 116], "typic": [0, 6, 9, 10, 12, 15, 48, 105, 115, 118, 123, 124, 170, 186, 209, 210, 211], "standard": [0, 8, 25, 49, 81, 87, 188, 191, 192, 199, 202, 203], "return": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 93, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208], "self": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 188, 190, 199, 201, 209, 212], "_validate_data": 0, "input": [0, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 28, 35, 41, 43, 60, 84, 87, 97, 156, 157, 158, 190, 192, 193, 201, 203, 204], "x": [0, 4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 84, 87, 88, 97, 99, 110, 112, 113, 114, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "y": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 84, 87, 101, 103, 104, 105, 106, 111, 112, 113, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "onc": [0, 60, 102, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 204], "fit": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 42, 43, 46, 49, 50, 56, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 84, 95, 97, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "fit_if_not_fit": 0, "util": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 113, 114, 115, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], "calcul": [0, 4, 19, 31, 32, 36, 37, 38, 40, 42, 43, 49, 51, 53, 54, 56, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 77, 78, 79, 81, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 193, 195, 196, 197, 203, 204, 206, 207, 208], "extra": 0, "public": 0, "simple_batch": [0, 162], "determin": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 93, 106, 108, 109, 110, 113, 114, 115, 117, 118, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 189, 198, 200], "naiv": 0, "batch": [0, 6, 7, 9, 10, 12, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 57, 58, 105, 110, 114, 115, 123, 124, 127, 132, 137, 170, 186, 188, 190, 192, 193, 194, 199, 201, 203, 204, 205, 209, 210, 211, 212], "testquerystrategi": 0, "templat": 0, "template_query_strategi": 0, "templatesingleannotatorpoolquerystrategi": 0, "mani": [0, 15, 43, 58, 78, 187, 198], "automat": [0, 193, 204], "specifi": [0, 5, 7, 11, 19, 36, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89, 112, 187, 190, 194, 195, 196, 197, 198, 201, 205, 206, 207, 208], "qs_class": 0, "init_default_param": 0, "accordingli": [0, 19], "whether": [0, 5, 8, 14, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 42, 43, 46, 49, 50, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 91, 92, 93, 94, 96, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 194, 195, 196, 197, 203, 205, 206, 207, 208], "regress": [0, 2, 8, 9, 10, 13, 19, 26, 29, 30, 31, 36, 37, 38, 43, 46, 87, 103, 121, 123, 124, 134, 135, 141, 142, 143, 150, 170, 186, 187, 198, 209, 210, 211, 212], "classif": [0, 2, 3, 12, 19, 22, 27, 29, 35, 43, 49, 50, 51, 52, 59, 61, 102, 121, 122, 123, 124, 126, 140, 151, 152, 169, 172, 186, 209, 212], "both": [0, 21, 23, 28, 48, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 125, 126, 127, 132, 137, 138, 186, 187, 193, 198, 204], "need": [0, 20, 63, 64, 65, 66, 67, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "query_default_params_reg": 0, "query_default_params_clf": 0, "adjust": [0, 87, 193, 204], "until": [0, 187, 198], "resolv": 0, "refer": [0, 7, 10, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 86, 87, 102, 107, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 192, 203, 209], "more": [0, 19, 34, 59, 188, 199], "detail": [0, 31, 32, 38, 40, 187, 198], "inform": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 105, 115, 118, 123, 124, 134, 135, 136, 141, 142, 143, 144, 150, 170, 188, 199, 209, 210, 211], "part": [0, 47, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 195, 196, 197, 198, 199, 206, 207, 208], "subpackag": 0, "multiannot": [0, 194, 205], "everi": [0, 19, 21, 28, 69, 95, 193, 204], "given": [0, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 29, 31, 32, 33, 35, 38, 39, 40, 41, 43, 45, 46, 47, 49, 50, 53, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 96, 98, 99, 100, 102, 107, 110, 112, 113, 114, 115, 116, 117, 118, 188, 192, 194, 199, 203, 205], "train": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 113, 114, 116, 117, 118, 125, 126, 127, 132, 137, 138, 139, 153, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209], "predict_proba": [0, 6, 12, 14, 15, 16, 17, 18, 19, 21, 23, 24, 27, 33, 39, 42, 49, 50, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 115], "predict": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 30, 31, 32, 35, 38, 39, 43, 46, 49, 50, 59, 60, 61, 62, 68, 70, 71, 75, 102, 116, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 195, 196, 197, 200, 206, 207, 208, 209], "membership": [0, 24, 54, 59], "probabl": [0, 6, 9, 10, 12, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 33, 35, 38, 41, 42, 43, 51, 52, 54, 56, 59, 60, 68, 70, 71, 73, 74, 75, 79, 80, 82, 105, 110, 115, 118, 123, 124, 170, 186, 210, 211], "super": [0, 188, 190, 199, 201], "matrix": [0, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 39, 49, 50, 53, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 92, 93, 102], "valu": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 92, 94, 99, 100, 101, 102, 105, 106, 108, 109, 110, 113, 114, 115, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 200, 201, 209, 210, 211], "made": 0, "target": [0, 7, 8, 9, 10, 13, 31, 36, 38, 57, 58, 87, 96, 102, 103, 123, 124, 170, 186, 189, 200, 210, 211], "annotatormodelmixin": [0, 19, 56], "These": [0, 19, 195, 196, 197, 206, 207, 208], "perform": [0, 4, 19, 22, 35, 42, 43, 56, 57, 58, 87, 187, 188, 190, 193, 195, 196, 197, 198, 199, 201, 204, 206, 207, 208, 209], "predict_annotator_perf": [0, 4, 19, 56], "per": [0, 6, 14, 15, 16, 17, 18, 56, 101, 188, 193, 194, 199, 204, 205], "proxi": [0, 14], "qualiti": 0, "p_annot": [0, 4, 19, 56], "pair": [0, 7, 39, 41, 50, 57, 58, 60, 194, 205], "two": [0, 19, 21, 23, 24, 28, 39, 50, 94, 187, 191, 193, 194, 198, 202, 204, 205, 209], "main": [0, 40, 69, 186, 187, 191, 192, 198, 202, 203], "goal": [0, 187, 198, 209], "understand": [0, 187, 198], "improv": [0, 8, 9, 10, 13, 36, 103, 123, 124, 170, 186, 187, 198, 210, 211], "usabl": 0, "therefor": [0, 16, 39, 40, 50, 56, 173, 174], "do": [0, 187, 189, 190, 191, 193, 198, 200, 201, 202, 204], "so": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 187, 189, 190, 193, 198, 200, 201, 204], "doc": [0, 173, 174], "query_strategi": [0, 40, 47, 58, 147, 159, 190, 195, 196, 197, 201, 206, 207, 208], "json": 0, "support": [0, 5, 7, 10, 11, 15, 19, 22, 24, 26, 29, 35, 38, 40, 43, 45, 46, 47, 49, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 113, 117, 118, 190, 201], "entri": [0, 6, 7, 14, 15, 57, 58, 93, 102, 115, 116], "close": [0, 193, 204], "100": [0, 19, 72, 76, 78, 79, 80, 81, 82, 83, 134, 135, 136, 141, 142, 143, 144, 150, 151, 152, 153, 156, 157, 158, 187, 188, 189, 190, 191, 192, 194, 198, 199, 200, 201, 202, 203, 205], "view": [0, 19, 188, 199], "here": [0, 60, 187, 189, 192, 195, 196, 197, 198, 200, 203, 206, 207, 208], "guidelin": 0, "write": 0, "adopt": 0, "sphinx": [0, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "html": [0, 190, 201], "_build": 0, "tracker": 0, "believ": 0, "found": [0, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 201, 204], "problem": [0, 19, 25, 27, 194, 205], "ha": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 35, 43, 56, 57, 58, 60, 76, 78, 80, 81, 82, 83, 87, 93, 97, 105, 108, 109, 111, 115, 116, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 200, 209], "been": [0, 18, 60, 76, 78, 80, 81, 82, 83, 117, 209], "releas": [0, 209], "save": [0, 17, 125, 126, 127, 132, 137, 138, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 193, 197, 203, 204, 208], "time": [0, 19, 60, 70, 71, 75, 78, 81, 82, 83, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 195, 196, 197, 204, 206, 207, 208, 209], "guidanc": 0, "how": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 110, 189, 190, 191, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 206, 207, 208, 209], "search": [0, 209], "databas": [0, 33, 137, 186], "box": 0, "top": [0, 35, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 209], "page": [0, 23, 24, 26, 29, 30, 31, 32, 33, 42, 43, 46, 48, 49, 51, 54, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 72, 73, 76, 77, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 209], "filter": [0, 16, 28, 73, 76, 186, 193, 204], "when": [0, 6, 8, 13, 14, 15, 36, 39, 42, 49, 57, 68, 70, 71, 75, 78, 79, 80, 81, 82, 83, 86, 87, 97, 107, 190, 201, 209], "someth": [0, 60], "isn": 0, "t": [0, 7, 8, 13, 21, 26, 33, 34, 36, 37, 43, 49, 56, 57, 58, 59, 61, 78, 103, 104, 105, 111, 125, 126, 140, 186, 193, 195, 196, 204, 206, 207, 209], "addit": [0, 18, 19, 60, 63, 64, 65, 66, 67, 72, 113, 114, 115, 118, 190, 192, 193, 201, 203, 204, 209], "legend": [2, 3, 121, 122, 123, 124, 172, 188, 191, 192, 193, 195, 196, 197, 199, 202, 203, 204, 206, 207, 208], "plot": [2, 3, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 193, 194, 195, 196, 197, 198, 199, 200, 204, 205, 206, 207, 208, 210], "sourc": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186], "abc": [4, 5, 9, 12, 13], "annot": [4, 7, 10, 18, 19, 26, 40, 43, 47, 56, 57, 58, 62, 102, 113, 117, 118, 119, 153, 186, 209, 212], "model": [4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 26, 27, 28, 30, 31, 32, 39, 49, 50, 52, 56, 57, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 103, 119, 123, 124, 132, 170, 181, 186, 188, 189, 190, 195, 196, 197, 199, 200, 201, 206, 207, 208, 209, 210, 211], "method": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 107, 110, 128, 135, 141, 142, 144, 145, 146, 151, 152, 153, 156, 158, 161, 162, 163, 164, 165, 166, 186, 187, 189, 190, 191, 195, 197, 198, 200, 201, 202, 206, 208, 209], "an": [4, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 26, 30, 31, 43, 47, 52, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 72, 73, 77, 81, 82, 83, 84, 87, 95, 97, 98, 99, 100, 102, 105, 106, 108, 109, 110, 111, 113, 115, 116, 118, 119, 134, 135, 136, 141, 142, 143, 144, 150, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "true": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 93, 95, 97, 99, 100, 102, 110, 113, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208], "arrai": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 90, 91, 92, 93, 95, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 188, 190, 193, 194, 195, 196, 197, 199, 201, 204, 205, 206, 207, 208], "like": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 91, 92, 93, 95, 97, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 190, 193, 201, 204], "shape": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 90, 91, 92, 93, 95, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 190, 191, 192, 194, 196, 198, 201, 202, 203, 205, 207, 209], "n_sampl": [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 97, 101, 102, 103, 104, 105, 106, 111, 113, 114, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 191, 194, 195, 196, 197, 199, 201, 202, 205, 206, 207, 208, 209], "n_featur": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 97, 113, 114, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 190, 191, 198, 201, 202], "test": [4, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 41, 56, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 188, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209], "numpi": [4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 84, 90, 93, 101, 102, 105, 106, 108, 109, 111, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "ndarrai": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 93, 95, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 192, 203], "n_annot": [4, 7, 19, 56, 57, 58, 101, 102, 106, 113, 118, 194, 205], "l": [4, 15, 19, 24, 29, 49, 54, 56, 59, 156, 157, 158, 186, 209], "budget": [5, 11, 48, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 119, 160, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 195, 197, 206, 208, 209], "none": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 148, 149, 151, 152, 153, 154, 155, 160, 161, 162, 164, 165, 166, 167, 168, 169, 188, 190, 192, 199, 201, 203], "baseestim": [5, 9, 12, 13, 56, 84], "manag": [5, 11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 119, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 201], "constraint": [5, 11, 41, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 119], "float": [5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 28, 30, 33, 34, 35, 41, 42, 43, 44, 47, 51, 52, 53, 56, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 99, 117, 193, 195, 196, 197, 204, 206, 207, 208], "ratio": [5, 6, 9, 10, 11, 12, 15, 43, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 105, 115, 118, 123, 124, 170, 186, 210, 211], "allow": [5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 56, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 100, 102], "0": [5, 6, 7, 8, 10, 11, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 95, 102, 113, 114, 115, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210], "1": [5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 95, 97, 102, 110, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "If": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 97, 98, 99, 102, 105, 110, 111, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "replac": [5, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 114, 193, 204], "get_metadata_rout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "get": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 112, 162, 193, 204, 209, 212], "metadata": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 193, 204], "rout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "object": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 97, 99, 100, 107, 192, 195, 196, 197, 203, 206, 207, 208], "check": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 104, 105, 111, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 195, 196, 197, 201, 204, 206, 207, 208], "user": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 187, 190, 198, 201], "guid": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 167, 186, 192, 203], "mechan": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "metadatarequest": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "encapsul": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "get_param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "deep": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 125, 126, 137, 186, 209, 212], "bool": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 93, 95, 97, 99, 110, 113, 117, 118, 192, 203], "contain": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 93, 101, 102, 106, 113, 114, 115, 116, 118, 188, 199], "subobject": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "dict": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 108, 109, 113, 114, 115, 118, 190, 201], "map": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "query_by_util": [5, 76, 77, 78, 79, 80, 81, 82, 83], "arg": [5, 7, 9, 10, 11, 20, 78, 193, 204], "kwarg": [5, 7, 9, 10, 11, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 78, 86, 113, 118, 190, 201], "ask": [5, 76, 77, 78, 79, 80, 81, 82, 83, 187, 191, 198, 202], "suffici": [5, 63, 64, 65, 66, 67, 72, 76, 77, 78, 79, 80, 81, 82, 83], "queri": [5, 6, 7, 9, 10, 11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 103, 105, 113, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 193, 194, 199, 200, 201, 204, 205, 210, 211, 212], "correspond": [5, 19, 33, 60, 63, 64, 65, 66, 67, 76, 77, 78, 79, 80, 81, 82, 83, 95, 113], "strategi": [5, 6, 7, 9, 10, 11, 12, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 103, 110, 113, 114, 115, 116, 117, 118, 119, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 193, 194, 199, 200, 201, 204, 205, 210, 211, 212], "worth": [5, 76, 77, 78, 79, 80, 81, 82, 83], "queried_indic": [5, 11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 117, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 197, 206, 208, 209], "np": [5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 105, 106, 110, 111, 112, 114, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "n_queried_indic": [5, 11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "candid": [5, 7, 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 113, 114, 117, 118, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 190, 194, 195, 196, 197, 200, 201, 205, 206, 207, 208, 209], "n_candid": [5, 7, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 113, 118], "set_param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "nest": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "pipelin": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 190, 201], "form": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "__": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "updat": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 193, 195, 197, 199, 204, 206, 208, 209], "instanc": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 98, 106, 108, 109, 110, 116], "spars": [5, 11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "mai": [5, 6, 8, 11, 12, 13, 18, 19, 22, 35, 43, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 101, 102, 106, 114, 173, 174], "matric": [5, 11, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "accept": [5, 11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 96, 99, 100, 190, 201], "itself": [5, 11, 19, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 193, 204], "class_prior": [6, 14, 15, 90, 151, 152, 153, 194, 205], "missing_label": [6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 84, 87, 92, 96, 101, 102, 103, 104, 105, 106, 111, 113, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209], "nan": [6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 84, 87, 92, 94, 96, 101, 102, 103, 104, 105, 106, 110, 111, 114, 187, 189, 190, 191, 192, 193, 198, 200, 201, 202, 203, 204], "cost_matrix": [6, 12, 14, 15, 16, 17, 18, 19, 26, 39, 49, 50, 59, 92, 93], "frequenc": [6, 14, 15, 17, 42, 60, 73], "classifi": [6, 12, 21, 23, 24, 27, 28, 29, 33, 34, 39, 42, 49, 50, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209], "abl": [6, 16, 188, 194, 199, 205], "call": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 86, 106, 108, 109, 190, 193, 201, 204], "predict_freq": [6, 14, 15, 17, 42, 60, 73, 149], "n_class": [6, 12, 14, 15, 16, 17, 18, 19, 22, 26, 35, 39, 41, 43, 44, 49, 50, 51, 52, 53, 54, 56, 59, 62, 64, 68, 79, 84, 90, 91, 92, 93, 101, 102, 106, 117, 148, 188, 191, 196, 199, 202, 207], "hold": [6, 12, 14, 15, 16, 17, 18, 19, 54, 56, 64, 68, 79, 84, 101, 106, 117, 195, 196, 197, 206, 207, 208], "dure": [6, 12, 14, 15, 16, 17, 18, 19, 58, 125, 126, 127, 132, 137, 138], "scalar": [6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 60, 84, 87, 92, 99, 101, 102, 106, 115, 117], "str": [6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 28, 35, 36, 37, 42, 43, 44, 46, 56, 73, 85, 87, 94, 96, 99, 100, 103, 104, 105, 107, 110, 111, 115, 116, 117, 190, 192, 201, 203], "miss": [6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 60, 84, 87, 92, 94, 96, 101, 102, 103, 104, 105, 106, 111, 187, 188, 198, 199, 211], "cost": [6, 9, 10, 12, 14, 15, 16, 17, 18, 19, 26, 39, 43, 49, 50, 53, 59, 62, 92, 93, 105, 115, 118, 123, 124, 153, 168, 170, 186, 210, 211], "j": [6, 7, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 26, 28, 36, 37, 39, 42, 43, 44, 46, 49, 50, 52, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 73, 87, 101, 102, 125, 126, 127, 132, 136, 137, 138, 150, 169, 186, 188, 190, 199, 201], "prior": [6, 14, 15, 19, 42, 53, 73, 90, 189, 190, 194, 200, 201, 205], "observ": [6, 14, 15, 53, 70, 71, 75, 76, 102, 189, 194, 200, 205], "non": [6, 14, 15, 87, 93, 193, 204], "neg": [6, 8, 13, 14, 15, 93, 102], "number": [6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 55, 56, 57, 58, 68, 70, 71, 72, 74, 75, 76, 77, 79, 85, 87, 88, 90, 91, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 188, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208], "belong": [6, 14, 15, 19, 193, 194, 204, 205], "classes_": [6, 12, 14, 15, 16, 17, 18, 19, 60, 84], "int": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 90, 93, 95, 98, 99, 106, 108, 109, 110, 112, 113, 114, 115, 116, 118, 125, 127, 129, 130, 133, 134, 145, 146, 151, 160, 163, 167, 168, 181, 186, 188, 190, 192, 193, 194, 199, 201, 203, 204, 205], "randomst": [6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 81, 82, 98, 106, 108, 109, 110, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 193, 195, 196, 197, 202, 203, 204, 206, 207, 208], "random": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 81, 82, 98, 103, 105, 106, 108, 109, 110, 115, 116, 117, 118, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 176, 177, 178, 180, 181, 182, 184, 185, 186, 188, 193, 194, 199, 204, 205, 210, 211], "reproduc": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 106, 108, 109, 125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 202, 203], "across": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 106, 108, 109, 189, 191, 192, 200, 202, 203, 209], "attribut": [6, 12, 14, 15, 16, 17, 18, 19, 22, 35, 43, 44, 56, 60, 84, 97], "class_prior_": [6, 14, 15], "cost_matrix_": [6, 12, 14, 15, 16, 18, 19], "sample_weight": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 42, 43, 46, 49, 50, 56, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 87], "n_output": [6, 8, 12, 13, 16, 17, 19, 84, 103, 104, 105, 111], "variabl": [6, 8, 9, 11, 12, 13, 15, 18, 19, 63, 66, 67, 70, 75, 81, 83, 96, 100, 116, 117, 123, 172, 185, 186, 193, 195, 196, 197, 204, 206, 207, 208, 210, 211], "where": [6, 8, 12, 13, 18, 19, 31, 38, 39, 41, 50, 56, 58, 63, 64, 65, 66, 67, 95, 186, 189, 192, 193, 194, 200, 203, 204, 205], "weight": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 30, 31, 32, 33, 34, 35, 38, 39, 42, 43, 46, 49, 50, 56, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 87, 101, 105, 106, 111, 114, 115, 118, 123, 124, 170, 186, 210, 211], "same": [6, 12, 14, 15, 16, 17, 18, 19, 47, 57, 60, 63, 64, 65, 66, 67, 108, 109, 189, 200], "f": [6, 14, 15, 17, 35, 38, 50, 52, 60, 87, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 201, 202, 203, 204, 205, 207], "order": [6, 12, 14, 15, 16, 17, 18, 19, 60, 63, 64, 65, 66, 67, 87, 102], "accord": [6, 12, 14, 15, 16, 17, 18, 19, 28, 52, 57, 58, 60, 188, 193, 199, 204], "p": [6, 12, 14, 15, 16, 17, 18, 19, 43, 46, 49, 50, 56, 57, 59, 60, 62, 87, 153, 186, 188, 192, 194, 199, 203, 205], "sample_proba": [6, 14, 15, 22, 35, 43, 151, 152, 153], "10": [6, 14, 15, 33, 63, 64, 65, 66, 67, 74, 126, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 150, 154, 156, 157, 158, 170, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210], "vector": [6, 14, 15, 19, 58, 87, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 187, 198, 209], "dirichlet": [6, 14, 15, 19, 42], "distribut": [6, 8, 9, 10, 12, 14, 15, 19, 31, 32, 34, 42, 56, 57, 58, 77, 81, 105, 114, 115, 118, 123, 124, 170, 186, 210, 211], "alpha": [6, 14, 15, 41, 56, 57, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 191, 192, 202, 203], "sum": [6, 8, 13, 14, 15, 18, 50, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 201, 204], "n_test_sampl": [6, 14, 15], "score": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 39, 50, 51, 52, 54, 59, 61, 187, 188, 190, 191, 192, 193, 198, 199, 201, 202, 203, 204], "mean": [6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 42, 56, 57, 58, 73, 81, 87, 188, 190, 191, 192, 193, 195, 196, 197, 199, 201, 202, 203, 204, 206, 207, 208], "accuraci": [6, 12, 14, 15, 16, 17, 18, 19, 56, 57, 102, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209], "set_fit_request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "union": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "unchang": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56, 190, 201], "note": [6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 40, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "enable_metadata_rout": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "see": [6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 31, 32, 38, 56, 57, 58, 59, 68, 70, 71, 73, 75, 79, 80, 81, 82, 83, 86, 89, 114, 187, 193, 198, 204], "set_config": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "option": [6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 32, 34, 36, 48, 51, 56, 58, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 190, 191, 201, 202], "ignor": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 39, 43, 50, 56, 113, 114, 118, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204], "fals": [6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 86, 87, 88, 93, 97, 102, 110, 113, 118, 162, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 192, 193, 194, 195, 196, 197, 199, 203, 204, 205, 206, 207, 208], "meta": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "rais": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 41, 42, 56, 73, 87, 94, 95, 98, 99, 113, 118, 190, 201], "alia": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "instead": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 31, 39, 42, 50, 56, 60, 73, 77, 114], "origin": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 46, 47, 56, 84, 87, 188, 199], "metadata_rout": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "retain": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "exist": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56, 86, 188, 189, 199, 200], "you": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56, 186, 190, 192, 193, 201, 203, 204, 209], "some": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 39, 50, 56, 87, 189, 190, 195, 196, 197, 200, 201, 206, 207, 208], "version": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56, 188, 199], "3": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 28, 30, 43, 49, 50, 56, 58, 63, 64, 65, 66, 67, 73, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "sub": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 47, 49, 56, 105, 115, 118, 123, 124, 170, 186, 210, 211], "g": [6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 87, 95, 162, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186], "insid": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56], "otherwis": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 35, 39, 43, 56, 57, 98, 99, 105, 111, 113, 114, 117, 118, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 193, 204], "effect": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 56, 87], "set_score_request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19], "divers": [6, 9, 10, 12, 13, 14, 15, 21, 22, 23, 28, 33, 34, 36, 37, 46, 48, 52, 103, 105, 114, 115, 118, 123, 124, 126, 170, 186, 189, 200, 210, 211], "gradient": [6, 9, 10, 12, 15, 21, 30, 105, 114, 115, 123, 124, 170, 186, 210, 211], "embed": [6, 9, 10, 12, 15, 21, 23, 24, 26, 28, 41, 105, 114, 115, 118, 123, 124, 170, 186, 192, 203, 210, 211, 212], "badg": [6, 9, 10, 12, 15, 105, 114, 115, 123, 124, 170, 186, 192, 203, 210, 211], "cluster": [6, 9, 10, 12, 15, 23, 28, 41, 48, 55, 105, 114, 115, 118, 123, 124, 170, 186, 187, 191, 198, 202, 210, 211], "uncertainti": [6, 9, 10, 11, 12, 15, 16, 21, 22, 23, 26, 28, 29, 33, 35, 49, 54, 57, 59, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 79, 81, 83, 105, 111, 114, 115, 116, 117, 118, 123, 124, 130, 163, 170, 172, 181, 185, 186, 187, 188, 192, 194, 198, 199, 203, 205, 209, 210, 211], "clue": [6, 9, 10, 12, 15, 105, 114, 115, 123, 124, 170, 186, 210, 211], "contrast": [6, 9, 10, 12, 15, 24, 33, 105, 114, 115, 118, 123, 124, 170, 186, 188, 199, 210, 211], "cal": [6, 9, 10, 12, 15, 24, 105, 115, 118, 123, 124, 170, 186, 210, 211], "core": [6, 9, 10, 12, 15, 25, 40, 105, 115, 118, 123, 124, 170, 186, 210, 211], "discrimin": [6, 9, 10, 12, 15, 27, 105, 115, 118, 123, 124, 170, 186, 192, 203, 210, 211], "dropout": [6, 9, 10, 12, 15, 28, 105, 114, 115, 123, 124, 170, 186, 188, 192, 199, 203, 210, 211], "dropqueri": [6, 9, 10, 12, 15, 105, 114, 115, 123, 124, 170, 186, 210, 211], "epistem": [6, 9, 10, 12, 15, 29, 105, 115, 118, 123, 124, 170, 186, 210, 211], "fast": [6, 9, 10, 12, 15, 22, 33, 35, 105, 114, 115, 123, 124, 170, 186, 210, 211], "falcun": [6, 9, 10, 12, 15, 105, 114, 115, 123, 124, 170, 186, 210, 211], "densiti": [6, 9, 10, 11, 12, 14, 15, 16, 34, 42, 49, 63, 64, 65, 66, 67, 72, 73, 77, 105, 111, 114, 115, 116, 117, 118, 123, 124, 162, 170, 172, 185, 186, 189, 197, 200, 208, 210, 211], "distanc": [6, 9, 10, 12, 14, 26, 34, 36, 37, 41, 55, 63, 64, 65, 66, 67, 72, 88, 105, 114, 115, 118, 123, 124, 170, 186, 210, 211], "mont": [6, 9, 10, 12, 15, 22, 35, 39, 52, 105, 115, 118, 123, 124, 170, 186, 210, 211], "carlo": [6, 9, 10, 12, 15, 22, 35, 39, 52, 105, 115, 118, 123, 124, 170, 186, 210, 211], "eer": [6, 9, 10, 12, 15, 39, 105, 115, 118, 123, 124, 170, 186, 210, 211], "log": [6, 9, 10, 12, 15, 22, 24, 35, 39, 43, 50, 51, 52, 105, 115, 118, 123, 124, 170, 186, 210, 211], "loss": [6, 9, 10, 12, 15, 31, 39, 50, 105, 115, 118, 123, 124, 170, 186, 210, 211], "misclassif": [6, 9, 10, 12, 15, 39, 50, 105, 115, 118, 123, 124, 170, 186, 210, 211], "parallel": [6, 9, 10, 12, 15, 40, 42, 105, 115, 118, 123, 124, 170, 186, 210, 211], "wrapper": [6, 9, 10, 12, 15, 16, 17, 40, 42, 47, 49, 58, 60, 105, 107, 115, 118, 123, 124, 170, 188, 194, 199, 205, 210, 211], "coverag": [6, 9, 10, 12, 15, 41, 105, 115, 118, 123, 124, 170, 186, 210, 211], "probcov": [6, 9, 10, 12, 15, 105, 115, 118, 123, 124, 170, 186, 210, 211], "probabilist": [6, 8, 9, 10, 11, 12, 15, 49, 59, 73, 76, 105, 115, 116, 117, 118, 123, 124, 147, 170, 172, 185, 186, 191, 194, 196, 202, 205, 207, 210, 211], "committe": [6, 9, 10, 12, 13, 15, 22, 35, 43, 103, 105, 115, 118, 123, 124, 170, 186, 188, 199, 210, 211], "qbc": [6, 9, 10, 12, 13, 15, 43, 103, 105, 115, 118, 123, 124, 170, 186, 210, 211], "kullback": [6, 8, 9, 10, 12, 13, 15, 38, 43, 51, 103, 105, 115, 118, 123, 124, 170, 186, 210, 211], "leibler": [6, 8, 9, 10, 12, 13, 15, 38, 43, 51, 103, 105, 115, 118, 123, 124, 170, 186, 210, 211], "diverg": [6, 8, 9, 10, 12, 13, 15, 38, 43, 51, 103, 105, 115, 118, 123, 124, 170, 186, 210, 211], "variat": [6, 9, 10, 12, 15, 43, 61, 105, 115, 118, 123, 124, 170, 186, 210, 211], "vote": [6, 9, 10, 12, 15, 18, 19, 43, 56, 58, 61, 62, 101, 105, 106, 115, 118, 123, 124, 170, 186, 188, 194, 199, 205, 210, 211], "entropi": [6, 8, 9, 10, 12, 15, 22, 23, 35, 38, 43, 49, 59, 62, 105, 115, 118, 123, 124, 144, 170, 186, 187, 198, 209, 210, 211], "typiclust": [6, 9, 10, 12, 15, 105, 115, 118, 123, 124, 170, 186, 192, 203, 210, 211], "expect": [6, 8, 9, 10, 12, 13, 15, 19, 21, 22, 23, 24, 28, 30, 31, 32, 35, 38, 39, 43, 49, 50, 53, 54, 60, 97, 103, 105, 115, 118, 123, 124, 170, 186, 190, 201, 210, 211], "averag": [6, 9, 10, 12, 15, 49, 50, 51, 54, 74, 105, 115, 118, 123, 124, 170, 186, 191, 192, 195, 196, 197, 202, 203, 206, 207, 208, 210, 211], "precis": [6, 9, 10, 12, 15, 49, 54, 105, 115, 118, 123, 124, 170, 186, 210, 211], "least": [6, 9, 10, 12, 15, 49, 59, 87, 93, 102, 105, 115, 118, 123, 124, 170, 186, 190, 195, 196, 197, 201, 206, 207, 208, 210, 211], "confid": [6, 9, 10, 12, 15, 49, 56, 57, 59, 105, 115, 117, 118, 123, 124, 170, 186, 210, 211], "margin": [6, 9, 10, 12, 15, 33, 49, 59, 105, 115, 118, 123, 124, 170, 186, 210, 211], "cognit": [6, 9, 11, 12, 15, 63, 64, 65, 66, 67, 116, 117, 123, 172, 185, 186, 210, 211], "dual": [6, 9, 10, 11, 12, 15, 16, 49, 63, 64, 65, 66, 67, 103, 110, 114, 115, 116, 117, 123, 124, 170, 172, 185, 186, 210, 211], "period": [6, 9, 11, 12, 15, 69, 116, 117, 123, 172, 185, 186, 210, 211], "split": [6, 9, 11, 12, 15, 82, 116, 117, 123, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 195, 197, 199, 202, 203, 204, 206, 208, 209, 210, 211], "datastream": [6, 9, 11, 12, 15, 73, 76, 116, 117, 123, 172, 185, 186, 210, 211], "poolquerystrategi": [7, 10], "pool": [7, 10, 73, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 190, 192, 193, 201, 203, 204, 210, 212], "string": [7, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 58, 60, 84, 87, 91, 92, 101, 102, 106], "control": [7, 9, 11, 33, 44, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 190, 201], "batch_siz": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 57, 58, 110, 125, 126, 127, 132, 137, 138, 156, 157, 158, 187, 188, 190, 191, 192, 193, 194, 196, 198, 199, 201, 202, 203, 204, 205, 207], "return_util": [7, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 110, 125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 156, 157, 158, 162, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 195, 197, 200, 206, 208], "usual": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 113, 114, 116, 117, 118, 188, 190, 199, 201], "complet": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 74, 113, 114, 116, 117, 118, 190, 192, 201, 203], "includ": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 87, 113, 114, 116, 117, 118, 119, 188, 190, 192, 199, 201, 203, 209], "possibli": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 113, 117, 118, 190, 201], "ones": [7, 10, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 113, 117, 118, 190, 201], "dtype": [7, 10, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 35, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 87, 113, 118, 188, 193, 194, 195, 196, 197, 199, 204, 205, 206, 207, 208], "n_avl_annot": [7, 57, 58], "consid": [7, 10, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 95, 113, 118], "equal": [7, 30, 57, 58, 94, 95, 100, 102], "len": [7, 41, 57, 58, 110, 148, 149, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 203, 204, 206, 207, 208, 209], "type": [7, 10, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 87, 96, 99, 100, 113, 118, 188, 190, 199, 201], "directli": [7, 10, 15, 18, 21, 22, 24, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 57, 58, 73, 113, 118, 193, 204], "necessarili": [7, 10, 21, 22, 24, 25, 26, 27, 29, 31, 32, 33, 35, 38, 39, 40, 43, 45, 46, 47, 49, 50, 57, 58, 113, 118], "boolean": [7, 29, 57, 58, 86, 87, 100, 103, 104, 192, 193, 203, 204], "one": [7, 10, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 57, 58, 60, 100, 110, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208], "al": [7, 9, 10, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 57, 58, 63, 64, 65, 66, 67, 72, 77, 103, 110, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 160, 161, 162, 163, 167, 169, 170, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 186, 190, 192, 201, 203, 210, 211], "cycl": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 57, 58, 110, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 188, 190, 191, 192, 194, 199, 201, 202, 203, 205, 209], "adapt": [7, 11, 23, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 95, 127, 186, 190, 201], "query_indic": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 193, 204], "2": [7, 8, 13, 15, 26, 30, 41, 42, 43, 46, 49, 50, 52, 53, 56, 57, 58, 59, 63, 64, 65, 66, 67, 72, 73, 77, 87, 88, 102, 105, 111, 112, 113, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "respect": [7, 19, 28, 30, 57, 58, 77, 81, 82, 83, 193, 204], "index": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 95, 102, 105, 108, 109, 111, 125, 126, 127, 132, 137, 138, 187, 193, 194, 198, 204, 205, 209], "w": [7, 8, 13, 43, 57, 58, 61, 76, 78, 79, 80, 81, 82, 83, 101, 103, 104, 105, 106, 111], "first": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 87, 95, 187, 188, 189, 190, 193, 194, 197, 198, 199, 200, 201, 204, 205, 208, 209], "regressor": [8, 13, 30, 31, 32, 38, 46, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "numer": [8, 13, 19, 43, 87, 90, 113, 114, 118], "n_target": [8, 13], "missing_label_": [8, 13, 16, 17, 18], "return_std": [8, 189, 200], "return_entropi": 8, "std": [8, 189, 191, 192, 200, 202, 203], "condit": [8, 32, 38, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 102], "deviat": [8, 77, 81, 191, 202], "mu": [8, 81], "predict_target_distribut": 8, "dist": 8, "scipi": [8, 19, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 195, 196, 197, 200, 206, 207, 208], "stat": [8, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 193, 200, 204], "_distn_infrastructur": 8, "rv_frozen": 8, "sample_i": [8, 43, 150], "n_samples_x": 8, "drawn": 8, "gener": [8, 13, 14, 28, 34, 106, 108, 109, 110, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 192, 199, 201, 203, 209, 210], "randomli": [8, 47, 58, 71, 74, 80, 82, 108, 109, 110], "draw": [8, 98, 193, 204], "y_sampl": 8, "coeffici": [8, 13], "frac": [8, 13], "u": [8, 13, 34, 49, 57, 78, 138, 139, 162, 186, 209], "v": [8, 13, 15, 19, 23, 29, 46, 57, 82, 87, 101], "residu": [8, 13], "squar": [8, 13], "y_true": [8, 13, 102, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 194, 198, 199, 200, 202, 203, 205, 209], "y_pred": [8, 13, 16, 17, 102, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "total": [8, 13, 30, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 192, 193, 194, 203, 204, 205, 210], "best": [8, 13, 41, 115], "becaus": [8, 13, 115, 189, 200], "arbitrarili": [8, 13], "wors": [8, 13], "constant": [8, 13, 19, 211], "alwai": [8, 13, 193, 204], "disregard": [8, 13, 69, 74], "would": [8, 13, 69, 193, 204], "precomput": [8, 13, 15, 29, 41, 44, 60, 193, 204], "kernel": [8, 13, 15, 42, 44, 60, 73, 197, 208], "list": [8, 13, 18, 22, 26, 35, 41, 43, 62, 87, 102, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 195, 196, 197, 199, 201, 206, 207, 208, 209], "n_samples_fit": [8, 13], "multioutput": [8, 13], "uniform_averag": [8, 13], "23": [8, 13, 136, 170, 186, 192, 203, 210], "keep": [8, 13, 191, 202], "consist": [8, 13, 18, 60, 87, 188, 192, 193, 195, 196, 197, 199, 203, 204, 206, 207, 208], "r2_score": [8, 13], "influenc": [8, 13, 34, 87], "except": [8, 13, 42, 49, 73, 95, 113, 118, 190, 201], "multioutputregressor": [8, 13], "set_predict_request": 8, "maxim": [8, 9, 10, 13, 22, 23, 24, 30, 35, 36, 38, 41, 49, 53, 54, 103, 123, 124, 163, 170, 186, 210, 211], "output": [8, 9, 10, 13, 14, 21, 22, 23, 24, 28, 30, 31, 32, 35, 43, 103, 123, 124, 134, 136, 141, 142, 143, 144, 150, 156, 157, 158, 170, 186, 190, 193, 201, 204, 210, 211], "varianc": [8, 9, 10, 13, 32, 43, 103, 123, 124, 170, 186, 189, 200, 210, 211], "reduct": [8, 9, 10, 13, 32, 39, 53, 103, 123, 124, 145, 146, 170, 186, 210, 211], "greedi": [8, 9, 10, 13, 25, 35, 36, 37, 103, 123, 124, 170, 186, 210, 211], "space": [8, 9, 10, 13, 24, 26, 31, 33, 36, 37, 41, 69, 74, 103, 123, 124, 170, 186, 189, 190, 195, 196, 197, 200, 201, 206, 207, 208, 210, 211], "gsy": [8, 9, 10, 13, 36, 103, 123, 124, 170, 186, 210, 211], "gsi": [8, 9, 10, 13, 36, 103, 123, 124, 170, 186, 210, 211], "gsx": [8, 9, 10, 13, 36, 37, 103, 123, 124, 170, 186, 210, 211], "argument": [9, 18, 30, 31, 32, 36, 37, 38, 40, 47, 108, 109, 113, 118, 190, 194, 201, 205], "bayesian": [9, 10, 12, 14, 16, 19, 22, 35, 43, 52, 105, 111, 114, 115, 118, 123, 124, 170, 186, 210, 211], "disagr": [9, 10, 12, 16, 22, 28, 35, 43, 51, 52, 61, 62, 105, 111, 114, 115, 118, 123, 124, 170, 186, 210, 211], "batchbald": [9, 10, 12, 16, 43, 52, 105, 114, 115, 123, 124, 170, 186, 188, 199, 210, 211], "bald": [9, 10, 12, 16, 35, 43, 52, 105, 111, 115, 118, 123, 124, 170, 186, 188, 199, 210, 211], "empir": [9, 10, 13, 24, 43, 103, 123, 124, 128, 170, 186, 210, 211], "tree": [9, 10, 13, 46, 103, 123, 124, 170, 186, 210, 211], "rt": [9, 10, 13, 46, 103, 123, 124, 170, 186, 210, 211], "singl": [10, 40, 47, 58, 117, 118, 186, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 207, 208], "startegi": [11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75], "acquir": [11, 24, 42, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 186, 187, 198], "within": [11, 18, 27, 33, 34, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 191, 193, 195, 196, 197, 202, 204, 206, 207, 208, 209], "doe": [11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 87, 99, 107, 193, 204], "intern": [11, 15, 27, 30, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75], "state": [11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 55, 56, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 98, 110, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "budget_manager_param_dict": [11, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 197, 206, 208], "count": [11, 15, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 101, 102, 195, 196, 197, 206, 207, 208], "seen": [11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77], "conjunct": [11, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "budget_manag": [11, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 89, 195, 197, 206, 208], "classifiermixin": [12, 16, 115, 116], "sensit": [12, 26, 49, 50, 59, 130, 168, 186], "regressormixin": [13, 26], "mixture_model": [14, 138, 139], "weight_mod": 14, "respons": 14, "base": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97, 103, 106, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 190, 192, 193, 201, 203, 204, 210, 211, 212], "classfrequencyestim": [14, 15, 22, 35, 43], "mixtur": [14, 138, 139, 161, 162], "cmm": 14, "gaussian": [14, 209], "gmm": [14, 34, 161, 162], "gaussianmixtur": [14, 138, 139, 161, 162], "bayesiangaussianmixtur": 14, "unsupervis": 14, "algorithm": [14, 19, 21, 23, 24, 25, 26, 28, 41, 48, 63, 64, 65, 66, 67, 72, 77, 87, 130, 181, 186, 187, 190, 198, 201], "refit": [14, 27, 195, 197, 206, 208], "bayesianmixturemodel": 14, "n_compon": [14, 138, 139, 161, 162], "similar": [14, 24, 209], "exponenti": 14, "mahalanobi": 14, "comput": [14, 19, 22, 23, 24, 35, 36, 40, 41, 43, 47, 48, 49, 51, 52, 56, 59, 60, 61, 62, 102, 127, 134, 135, 136, 141, 142, 143, 144, 150, 151, 152, 153, 156, 157, 158, 161, 164, 165, 166, 169, 186, 192, 203], "f_components_": 14, "c": [14, 15, 19, 21, 26, 36, 37, 53, 63, 64, 65, 66, 67, 87, 102, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209], "mixture_model_": 14, "n_neighbor": 15, "metric": [15, 31, 36, 37, 41, 42, 44, 63, 64, 65, 66, 67, 72, 73, 102, 154, 191, 194, 197, 202, 205, 208], "rbf": [15, 42, 44, 73, 154, 191, 194, 197, 202, 205, 208], "metric_dict": [15, 37, 42, 44, 73, 134, 135, 136, 141, 142, 143, 144, 154, 189, 191, 194, 200, 202, 205], "parzen": [15, 29, 209], "window": [15, 17, 29, 63, 64, 65, 66, 67, 72, 76, 78, 79, 80, 81, 82, 83, 195, 196, 197, 206, 207, 208, 209], "pwc": 15, "parametr": 15, "obtain": [15, 76, 156, 157, 158, 188, 194, 199, 205, 209], "appli": [15, 35, 87, 192, 203], "callabl": [15, 19, 30, 31, 41, 42, 44, 58, 63, 64, 65, 66, 67, 72, 73, 85, 86, 190, 201], "valid": [15, 18, 36, 37, 42, 44, 73, 85, 87, 88, 89, 90, 95, 97, 98, 99, 190, 191, 192, 201, 202, 203], "pairwis": [15, 42, 44, 63, 64, 65, 66, 67, 72, 73], "pairwise_kernel": [15, 42, 44, 73], "nearest": [15, 24, 28, 48, 72], "neighbour": 15, "further": [15, 16, 17, 36, 37, 40, 42, 44, 47, 73, 86, 100, 194, 205], "bandwidth": 15, "criterion": [15, 39, 50], "gamma": [15, 19, 33, 42, 73, 134, 135, 136, 141, 142, 143, 144, 154, 189, 191, 194, 200, 202, 205], "o": [15, 25, 41, 87, 156, 157, 158, 186], "chapel": 15, "proceed": 15, "tenth": 15, "workshop": [15, 43, 63, 64, 65, 66, 67, 72, 77, 150, 151, 152, 153, 181, 186], "artifici": [15, 188, 197, 199, 208], "intellig": [15, 192, 203], "statist": [15, 32, 136, 161, 186], "2005": [15, 50, 168, 186], "chaudhuri": 15, "kakd": 15, "d": [15, 27, 36, 37, 38, 39, 41, 42, 43, 48, 49, 50, 54, 63, 64, 65, 66, 67, 72, 73, 76, 77, 87, 110, 150, 168, 186], "sadek": 15, "gonzalez": 15, "kong": 15, "median": 15, "criteria": [15, 186], "ieee": [15, 23, 26, 30, 43, 50, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 127, 130, 134, 152, 154, 169, 173, 174, 175, 176, 177, 179, 180, 184, 186], "confer": [15, 30, 192, 203], "mine": [15, 30], "icdmw": 15, "2017": [15, 26], "x_": [15, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "v_": 15, "were": [15, 78, 113, 117, 118], "additive_chi2": [15, 44], "chi2": [15, 44], "cosin": [15, 44], "linear": [15, 30, 44, 188, 192, 199, 203], "poli": [15, 44], "polynomi": [15, 44], "laplacian": [15, 44], "sigmoid": [15, 44], "m_sampl": 15, "metaestimatormixin": [16, 17], "deal": [16, 57, 194, 205], "estimator_": 16, "fit_kwarg": [16, 17], "duplic": [16, 17], "partial_fit": [16, 17, 39, 50, 60, 197, 208], "predict_kwarg": [16, 17], "predict_proba_kwarg": [16, 17], "set_partial_fit_request": [16, 17], "window_s": [17, 72], "only_label": 17, "slide": [17, 72, 195, 196, 197, 206, 207, 208], "limit": [17, 195, 196, 206, 207], "latest": 17, "enabl": [17, 22, 35, 43, 190, 201, 209], "wrap": [17, 29, 107, 187, 193, 198, 204, 209], "alreadi": [17, 78, 80, 81, 82, 83, 97, 98, 189, 192, 193, 194, 200, 203, 204, 205], "overwritten": 17, "approach": [17, 25, 31, 39, 129, 186], "size": [17, 30, 46, 63, 64, 65, 66, 67, 72, 78, 79, 80, 81, 82, 83, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 192, 193, 194, 195, 196, 197, 199, 201, 203, 204, 205, 206, 207, 208], "unrestrict": 17, "discard": 17, "base_estim": 17, "predict_freq_kwarg": 17, "hard": 18, "_baseheterogeneousensembl": 18, "ensembl": [18, 22, 35, 43, 61, 126, 140, 150, 151, 152, 153, 186, 189, 190, 200, 201], "wise": 18, "tupl": [18, 95, 96, 99, 189, 190, 200, 201], "element": [18, 22, 35, 43, 108, 109, 125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "soft": [18, 188, 199], "rule": 18, "els": [18, 110, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 162, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 206, 208, 209], "argmax": [18, 108], "calibr": 18, "estimators_": [18, 22, 35, 43], "drop": [18, 192, 203], "appear": [18, 60, 102, 107], "n_estim": [18, 22, 35, 43, 51, 52, 61, 62, 189, 200], "constructor": [18, 190, 201], "variou": [18, 49, 119, 192, 193, 203, 204], "properti": 18, "named_estim": 18, "dictionari": [18, 19, 31, 32, 38, 58, 190, 191, 192, 201, 202, 203], "access": [18, 60, 187, 198], "bunch": 18, "kei": [18, 188, 191, 192, 199, 202, 203], "keyword": [18, 40, 47, 108, 109, 113, 118], "parameter_nam": 18, "new_valu": 18, "individu": 18, "remov": [18, 47, 108, 109, 193, 204], "tol": 19, "0001": 19, "max_it": 19, "fit_intercept": 19, "annot_prior_ful": 19, "annot_prior_diag": 19, "weights_prior": 19, "solver": [19, 190, 201], "newton": 19, "cg": 19, "solver_dict": 19, "logist": [19, 29, 187, 198], "crowd": 19, "raykar": 19, "besid": [19, 58], "build": [19, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "task": [19, 27, 29, 31, 135, 186, 188, 193, 199, 204], "assum": [19, 30, 38, 57], "depend": [19, 58, 70, 71, 74, 75, 81, 82, 83, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "assign": [19, 58, 106, 187, 189, 190, 193, 194, 198, 200, 201, 204, 205], "confus": [19, 102], "row": [19, 61, 62, 87, 97, 102, 110], "normal": [19, 50, 77, 81, 102, 169, 192, 203], "bia": [19, 192, 203], "decis": [19, 34, 50, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 194, 198, 205, 209], "bias": 19, "refin": 19, "over": [19, 58, 63, 64, 65, 66, 67, 72, 77, 102, 112, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "regular": 19, "threshold": [19, 22, 24, 28, 35, 43, 51, 52, 57, 68, 70, 71, 75, 76, 77, 79, 81, 82, 83], "stop": [19, 39, 50], "em": [19, 43, 51, 151, 186], "optim": [19, 39, 49, 60, 145, 146, 186, 188, 199], "smaller": [19, 78], "than": [19, 34, 36, 44, 46, 57, 76, 78, 79, 80, 81, 82, 83], "maximum": [19, 40, 41, 42, 46, 47, 53, 55, 99, 108, 110, 190, 193, 201, 204, 209], "iter": [19, 46, 100, 187, 188, 190, 192, 193, 194, 198, 199, 201, 203, 204, 205, 209], "k": [19, 23, 24, 25, 26, 35, 43, 46, 48, 51, 58, 116, 135, 152, 186, 191, 202], "intercept": 19, "ad": [19, 50, 55, 60, 125, 126, 127, 132, 137, 138, 156, 157, 158, 188, 199], "diagon": [19, 93], "being": [19, 70, 102], "ey": 19, "invers": 19, "covari": 19, "ident": [19, 30, 192, 203], "bfg": 19, "nelder": 19, "mead": 19, "powel": 19, "tnc": 19, "cobyla": 19, "slsqp": 19, "trust": 19, "constr": 19, "dogleg": 19, "ncg": 19, "exact": 19, "krylov": 19, "custom": [19, 100, 193, 204], "minim": [19, 22, 23, 32, 35, 43, 55, 62, 88, 153, 186], "maxit": 19, "yu": 19, "h": [19, 26, 43, 44, 49, 54, 59, 61, 150, 151, 152, 153, 186], "zhao": [19, 173, 174, 175, 176, 186], "valadez": 19, "florin": 19, "bogoni": 19, "moi": 19, "mach": [19, 28, 33, 43, 48, 51, 87, 132, 135, 137, 145, 146, 151, 154, 160, 162, 186], "re": [19, 87, 112, 113, 114, 115, 116, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 190, 201], "11": [19, 50, 125, 127, 132, 154, 170, 186, 192, 203, 210], "4": [19, 43, 125, 126, 127, 132, 136, 137, 138, 147, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "1297": 19, "1322": 19, "2010": [19, 44, 154, 186], "n_annotators_": [19, 56], "w_": 19, "alpha_": 19, "describ": [19, 50, 60], "herebi": 19, "with_traceback": 20, "tb": 20, "__traceback__": 20, "clf_embedding_flag_nam": [21, 23, 24, 28], "design": 21, "incorpor": [21, 28], "flag": [21, 23, 24, 28, 50, 60, 193, 204], "represent": [21, 23, 24, 28, 192, 203], "clf_embedding_nam": [21, 23, 24, 28], "proba": [21, 23, 24, 28, 51, 52, 54, 59], "ash": [21, 125, 186], "zhang": [21, 30, 125, 134, 186], "krishnamurthi": [21, 125, 186], "langford": [21, 125, 186], "agarw": [21, 125, 186], "uncertain": [21, 33, 125, 186, 187, 198], "lower": [21, 45, 56, 99, 125, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 186, 188, 191, 192, 199, 202, 203], "bound": [21, 56, 88, 99, 112, 113, 114, 117, 118, 125, 186, 187, 191, 194, 198, 202, 205], "conf": [21, 23, 24, 25, 26, 29, 33, 42, 43, 48, 49, 51, 54, 56, 57, 59, 61, 73, 125, 127, 128, 129, 130, 133, 134, 135, 137, 145, 146, 149, 151, 152, 160, 162, 163, 167, 168, 169, 186], "2020": [21, 125, 186], "clf": [21, 23, 24, 28, 29, 33, 34, 39, 42, 49, 50, 57, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209], "fit_clf": [21, 23, 24, 28, 29, 33, 34, 39, 42, 49, 50, 57, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 188, 193, 195, 196, 197, 199, 204, 206, 207, 208], "n_mc_sampl": [22, 35, 52], "ep": [22, 24, 35, 43, 51, 52, 192, 203], "1e": [22, 24, 35, 43, 51, 52, 192, 203], "07": [22, 24, 35, 43, 51, 52, 170, 210], "sample_predictions_method_nam": [22, 35, 43, 150, 151, 152, 153], "sample_predictions_dict": [22, 35, 43, 150, 151, 152, 153], "_generalbald": [22, 35], "reduc": [22, 35], "hypothes": [22, 35], "about": [22, 35, 69, 74], "shannon": [22, 35], "seek": [22, 35], "point": [22, 35, 52, 117, 156, 157, 158, 187, 188, 191, 198, 199, 202, 209], "maximis": [22, 35], "decreas": [22, 35, 76, 77, 81, 82, 83], "posterior": [22, 23, 35], "7": [22, 24, 35, 38, 43, 50, 51, 52, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 195, 196, 197, 198, 199, 200, 202, 203, 206, 207, 208], "minimum": [22, 24, 35, 41, 43, 51, 52, 87, 99, 109, 209], "certain": [22, 35, 43, 46], "offer": [22, 35, 43, 193, 204], "construct": [22, 35, 43, 195, 196, 197, 206, 207, 208], "member": [22, 35, 43], "take": [22, 23, 28, 30, 31, 35, 41, 43, 99, 188, 199], "n_member": [22, 35, 43], "exclud": [22, 23, 28, 35, 41, 43, 47, 48, 193, 204], "kirsch": [22, 52, 126, 186], "van": [22, 52, 126, 186], "amersfoort": [22, 52, 126, 186], "gal": [22, 52, 126, 186], "effici": [22, 33, 52, 56, 57, 126, 137, 186], "acquisit": [22, 52, 76, 126, 186, 195, 196, 206, 207], "adv": [22, 41, 44, 52, 73, 76, 126, 148, 154, 182, 186], "neural": [22, 25, 41, 44, 52, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 126, 129, 148, 154, 173, 174, 175, 176, 177, 179, 180, 184, 186], "inf": [22, 34, 36, 37, 41, 44, 52, 87, 126, 138, 139, 141, 142, 143, 148, 154, 162, 186], "process": [22, 24, 41, 44, 52, 58, 97, 126, 128, 148, 154, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 192, 193, 194, 196, 203, 204, 205, 207, 209], "syst": [22, 41, 44, 52, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 126, 148, 154, 173, 174, 175, 176, 177, 179, 180, 181, 184, 186], "2019": [22, 27, 29, 36, 37, 38, 52, 126, 131, 133, 141, 142, 143, 144, 186], "fit_ensembl": [22, 35, 43, 188, 199], "plu": [22, 35, 43], "cluster_algo": [23, 28, 41, 48], "_kmean": [23, 28, 41, 48], "kmean": [23, 28, 41, 48, 161, 162], "cluster_algo_dict": [23, 28, 41, 48, 148, 160], "n_cluster_param_nam": [23, 28, 41, 48], "n_cluster": [23, 28, 41, 48], "clustermixin": [23, 28, 41, 48], "__class__": [23, 28, 41, 48, 89, 189, 200], "fit_transform": [23, 28, 30, 84, 188, 199], "minibatchkmean": [23, 28], "least_confid": [23, 49, 59, 161, 162, 165], "margin_sampl": [23, 49, 59, 166], "gap": 23, "second": [23, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 192, 198, 203], "prabhu": [23, 127, 186], "chandrasekaran": [23, 127, 186], "saenko": [23, 127, 186], "hoffman": [23, 127, 186], "domain": [23, 127, 186], "cvf": [23, 43, 61, 127, 169, 186], "vi": [23, 43, 61, 127, 135, 152, 169, 186], "8505": [23, 127, 186], "8514": [23, 127, 186], "2021": [23, 24, 127, 128, 186, 209], "nearest_neighbors_dict": 24, "while": [24, 33, 190, 193, 195, 196, 197, 201, 204, 206, 207, 208, 209], "differ": [24, 38, 58, 60, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 77, 102, 188, 189, 190, 191, 192, 194, 199, 200, 201, 202, 203, 205, 209], "neighbor": [24, 26, 48, 72], "nearestneighbor": [24, 26], "margatina": [24, 128, 186], "verniko": [24, 128, 186], "barrault": [24, 128, 186], "aletra": [24, 128, 186], "nat": [24, 128, 186], "lang": [24, 42, 73, 128, 149, 186], "650": [24, 128, 186], "663": [24, 128, 186], "center": [25, 55, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 193, 194, 195, 196, 197, 202, 204, 205, 206, 207, 208, 209], "sener": [25, 129, 186], "savares": [25, 129, 186], "convolut": [25, 129, 186], "network": [25, 129, 186], "2018": [25, 31, 43, 49, 54, 61, 129, 135, 152, 163, 186], "base_regressor": 26, "embed_dim": 26, "mds_param": 26, "nn_param": 26, "alc": [26, 130, 170, 186, 210], "measur": [26, 28, 30, 34, 49, 51, 61, 62, 186, 187, 198], "reflect": [26, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "libact": 26, "occur": 26, "actual": [26, 39, 49, 50, 59, 191, 192, 202, 203], "manifold": 26, "md": 26, "huang": [26, 36, 37, 44, 130, 141, 142, 143, 154, 186], "lin": [26, 36, 37, 49, 59, 130, 141, 142, 143, 186], "novel": [26, 38, 130, 144, 186], "multiclass": [26, 49, 50, 59, 130, 186], "min": [26, 34, 46, 56, 57, 63, 64, 65, 66, 67, 72, 77, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 190, 191, 193, 194, 198, 201, 202, 204, 205], "925": [26, 130, 186], "930": [26, 130, 186], "2016": [26, 42, 73, 130, 149, 186], "yang": [26, 49, 54, 63, 64, 65, 66, 67, 163, 173, 174, 175, 176, 186], "lee": 26, "chung": 26, "wu": [26, 36, 37, 63, 64, 65, 66, 67, 141, 142, 143, 173, 174, 175, 176, 186], "chen": [26, 49, 59], "arxiv": [26, 27, 35, 52, 126, 131, 140, 186, 193, 204], "1710": 26, "00379": 26, "greedy_select": 27, "dal": [27, 131, 170, 186, 210], "Its": 27, "idea": [27, 60, 63, 64, 65, 66, 67, 69], "solv": 27, "binari": [27, 29, 102, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "choos": [27, 58, 110, 209], "indistinguish": 27, "kept": 27, "gissin": [27, 131, 186], "shalev": [27, 131, 186], "shwartz": [27, 131, 186], "1907": [27, 131, 186], "06347": [27, 131, 186], "separ": [27, 191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "redefin": 27, "dropout_r": 28, "75": [28, 115, 189, 200], "n_dropout_sampl": 28, "5": [28, 30, 34, 43, 46, 48, 50, 115, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "purpos": [28, 187, 188, 191, 198, 199, 202], "abov": [28, 190, 193, 201, 204], "rate": [28, 81, 82, 83], "gupt": [28, 132, 186], "aklilu": [28, 132, 186], "nirschl": [28, 132, 186], "yeung": [28, 132, 186], "levi": [28, 132, 186], "revisit": [28, 132, 186], "era": [28, 132, 186], "vision": [28, 132, 186, 192, 203], "foundat": [28, 132, 186], "tran": [28, 63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 132, 154, 173, 174, 175, 176, 177, 179, 180, 184, 186], "2024": [28, 33, 132, 137, 186], "next": [28, 33, 34, 36, 37, 42, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 188, 189, 190, 193, 195, 196, 197, 199, 200, 201, 204, 206, 207, 208], "episu": [29, 133, 170, 186, 210], "parzenwindowclassifi": [29, 60, 125, 127, 128, 129, 130, 131, 132, 133, 137, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 194, 195, 196, 202, 205, 206, 207, 209], "nguyen": [29, 133, 186], "desterck": [29, 133, 186], "h\u00fcllermeier": [29, 133, 186], "discov": [29, 33, 46, 56, 57, 133, 137, 156, 157, 158, 186], "sci": [29, 34, 36, 37, 133, 138, 139, 141, 142, 143, 186], "72": [29, 133, 186], "86": [29, 133, 186], "linear_model": [29, 161, 162, 187, 192, 193, 198, 203, 204], "logisticregress": [29, 161, 162, 187, 192, 193, 198, 203, 204], "bootstrap_s": 30, "n_train": 30, "ord": 30, "feature_map": 30, "emc": 30, "bootstrap": 30, "compar": [30, 76, 78, 82, 83, 187, 191, 192, 195, 196, 197, 198, 202, 203, 206, 207, 208], "lie": 30, "rang": [30, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209], "greater": [30, 44, 46, 57, 58], "norm": [30, 189, 192, 200, 203], "linalg": 30, "dimens": [30, 87, 88, 95, 108, 109, 192, 203], "preprocess": [30, 188, 190, 199, 201], "polynomialfeatur": 30, "cai": [30, 134, 186], "wenbin": [30, 134, 186], "ya": [30, 134, 186], "jun": [30, 134, 154, 186], "zhou": [30, 44, 63, 64, 65, 66, 67, 134, 154, 173, 174, 175, 176, 186], "51": [30, 134, 186], "60": [30, 134, 186, 189, 200], "2013": [30, 34, 49, 59, 134, 138, 139, 186], "reg": [30, 31, 32, 36, 38, 46, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 190, 200, 201], "fit_reg": [30, 31, 32, 36, 38, 46, 189, 200], "integration_dict": [31, 32, 135], "emoc": 31, "integr": [31, 32, 38], "integration_method": 31, "etc": [31, 32, 38, 87], "_conditional_expect": [31, 32, 38], "assume_linear": [31, 189, 200], "evalu": [31, 39, 50, 73, 102, 188, 189, 190, 195, 196, 197, 199, 200, 201, 206, 207, 208, 209, 212], "mean_squared_error": 31, "altern": 31, "might": [31, 39, 50, 60, 87, 191, 192, 193, 202, 203, 204], "mean_absolute_error": 31, "christoph": [31, 135, 186, 209], "kaed": 31, "erik": [31, 135, 186], "rodner": [31, 135, 186], "alexand": [31, 135, 186, 209], "freytag": [31, 135, 186], "oliv": [31, 135, 186], "moth": [31, 135, 186], "bjoern": 31, "barz": [31, 135, 186], "joachim": [31, 135, 186], "denzler": [31, 135, 186], "bmvc": 31, "15": [31, 134, 135, 136, 141, 142, 143, 144, 173, 177, 178, 182, 185, 186, 188, 189, 199, 200, 210], "x_eval": [31, 32, 39, 190, 201], "probabilisticregressor": [31, 32, 38], "n_eval_sampl": [31, 39, 190, 201], "referenc": 31, "paper": [31, 209, 212], "propos": [31, 63, 64, 65, 66, 67, 72, 76, 77], "is_unlabel": [31, 103], "emvr": 32, "tri": [32, 37, 63, 64, 65, 66, 67], "cohn": [32, 136, 186], "david": [32, 136, 186], "ghahramani": [32, 35, 52, 126, 136, 140, 186], "zoubin": [32, 126, 136, 140, 186], "jordan": [32, 125, 136, 186], "michael": [32, 136, 186], "129": [32, 136, 186], "145": [32, 73, 76, 136, 182, 186], "1996": [32, 43, 62, 136, 153, 186], "hybrid": [33, 71], "jointli": [33, 52], "go": [33, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "infin": 33, "highest": [33, 110], "gilhub": [33, 137, 186], "beer": [33, 137, 186], "ma": [33, 137, 186], "seidl": [33, 137, 186], "joint": [33, 52], "eur": [33, 42, 73, 137, 149, 162, 186], "knowl": [33, 46, 56, 57, 137, 156, 157, 158, 186], "421": [33, 137, 186], "439": [33, 137, 186], "lmbda": [34, 44, 154], "4d": [34, 138, 139, 170, 186, 210], "mixturemodelclassifi": [34, 138, 139], "_": [34, 134, 135, 136, 141, 142, 143, 144, 150, 189, 200], "05": [34, 56, 57, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 192, 199, 203, 210], "round": [34, 188, 199], "avoid": [34, 209], "redund": 34, "regul": 34, "factor": [34, 63, 64, 65, 66, 67], "reitmaier": [34, 138, 139, 186], "sick": [34, 138, 139, 186, 209], "let": [34, 138, 139, 186, 187, 198], "know": [34, 138, 139, 186, 187, 191, 198, 202], "230": [34, 138, 139, 186], "106": [34, 138, 139, 186], "131": [34, 138, 139, 186], "houlsbi": [35, 52, 126, 140, 186], "husz\u00e1r": [35, 52], "z": [35, 44, 52, 63, 64, 65, 66, 67], "lengyel": [35, 52, 126, 140, 186], "prefer": [35, 52, 58, 126, 140, 186], "1112": [35, 52, 126, 140, 186], "5745": [35, 52, 126, 140, 186], "2011": [35, 52, 87, 126, 140, 186], "x_metric": 36, "y_metric": 36, "x_metric_dict": 36, "y_metric_dict": 36, "n_gsx_sampl": 36, "pairwise_dist": [36, 37, 41, 63, 64, 65, 66, 67, 72], "till": 36, "switch": 36, "exce": [36, 68, 70, 71, 74, 75, 79], "474": [36, 37, 141, 142, 143, 186], "90": [36, 37, 141, 142, 143, 186], "105": [36, 37, 141, 142, 143, 186], "those": [37, 38, 102, 194, 205, 209], "increas": [37, 76, 77, 81, 82, 83, 193, 204], "euclidean": 37, "integration_dict_target_v": [38, 144, 189, 200], "integration_dict_cross_entropi": [38, 189, 200], "independ": [38, 40, 50], "cross": [38, 190, 191, 194, 201, 202, 205], "x_cand": [38, 87, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 206, 207, 208, 209], "old": 38, "conditional_expect": 38, "elreedi": [38, 144, 186], "atiya": [38, 144, 186], "shaheen": [38, 144, 186], "balanc": [38, 73, 76, 144, 186, 193, 204], "explor": [38, 57, 144, 186], "exploit": [38, 57, 144, 186], "trade": [38, 57, 144, 186], "off": [38, 57, 144, 186], "21": [38, 112, 113, 114, 115, 118, 144, 186, 192, 203], "651": [38, 144, 186], "potenti": [38, 60, 209], "misclassification_loss": [39, 146], "subtract_curr": [39, 50, 167, 168, 169], "expectederrorreduct": [39, 50], "ever": [39, 50], "simul": [39, 50, 60], "outcom": [39, 50], "kind": [39, 50, 86], "risk": [39, 50], "log_loss": [39, 145], "subtract": [39, 50], "help": [39, 50, 107, 209], "efault": 39, "roi": [39, 145, 146, 186], "mccallum": [39, 43, 51, 145, 146, 151, 186], "2001": [39, 145, 146, 186], "toward": [39, 145, 146, 186], "through": [39, 41, 145, 146, 148, 186, 190, 192, 194, 195, 196, 197, 201, 203, 205, 206, 207, 208], "icml": 39, "pp": [39, 50], "441": [39, 145, 146, 186], "448": [39, 145, 146, 186], "ignore_partial_fit": [39, 50, 60, 145, 146, 167, 168, 169], "sample_weight_candid": 39, "sample_weight_ev": 39, "ndim": [39, 42, 49, 87, 88, 110, 113, 117, 118], "Not": [39, 190, 201], "applic": 39, "n_job": [40, 147], "parallel_dict": 40, "assumpt": 40, "anoth": [40, 189, 191, 192, 195, 197, 200, 202, 203, 206, 208], "cpu": [40, 188, 192, 199, 203], "joblib": 40, "query_kwarg": [40, 47, 58], "delta": [41, 70, 77, 81, 162], "95": [41, 187, 198], "distance_func": 41, "aim": [41, 192, 203], "meaning": [41, 192, 203], "extract": [41, 192, 203], "fallback": [41, 89], "n_delta": 41, "ball": 41, "radii": 41, "find": [41, 209], "satisfi": 41, "warn": [41, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 87, 173, 174, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204], "arang": [41, 188, 191, 192, 196, 199, 202, 203, 207], "speedup": 41, "yehuda": [41, 148, 186], "dekel": [41, 48, 148, 160, 186], "hacohen": [41, 48, 148, 160, 186], "weinshal": [41, 48, 148, 160, 186], "2022": [41, 48, 148, 160, 186], "m_max": [42, 53, 73], "mcpal": [42, 73, 149, 170, 186, 210], "gain": [42, 189, 200], "hypothet": [42, 53], "multipli": [42, 49, 70, 73, 81, 98], "typeerror": [42, 99], "kottk": [42, 73, 76, 149, 182, 186, 209], "krempl": [42, 73, 76, 149, 182, 186], "teschner": [42, 73, 149, 186], "spiliopoul": [42, 73, 76, 149, 182, 186], "artif": [42, 49, 54, 59, 73, 136, 149, 163, 167, 168, 186], "intel": [42, 43, 49, 54, 59, 73, 76, 136, 149, 150, 154, 163, 167, 168, 182, 186], "586": [42, 73, 149, 186], "594": [42, 73, 149, 186], "utility_weight": [42, 49, 73, 149, 161, 162], "kl_diverg": [43, 151], "identifi": [43, 125, 126, 127, 132, 137, 138, 188, 199], "disagre": 43, "vote_entropi": [43, 153], "variation_ratio": [43, 152], "gaussian_process": [43, 126, 140, 150, 191, 202, 209], "gaussianprocessregressor": [43, 150], "seung": [43, 150, 151, 152, 153, 186], "opper": [43, 150, 151, 152, 153, 186], "sompolinski": [43, 150, 151, 152, 153, 186], "annu": [43, 62, 150, 151, 152, 153, 161, 186], "theori": [43, 150, 151, 152, 153, 186], "287": [43, 150, 151, 152, 153, 186], "294": [43, 150, 151, 152, 153, 186], "1992": [43, 150, 151, 152, 153, 186], "nigami": [43, 51, 151, 186], "emploi": [43, 51, 151, 186, 192, 203], "text": [43, 51, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 212], "359": [43, 51, 151, 186], "367": [43, 51, 151, 186], "1998": [43, 51, 151, 186], "engelson": [43, 62, 153, 186], "dagan": [43, 62, 153, 186], "manual": [43, 62, 153, 186], "supervis": [43, 50, 62, 153, 167, 186, 190, 201, 209, 212], "corpora": [43, 62, 153, 186], "meet": [43, 62, 153, 161, 186], "assoc": [43, 62, 153, 161, 186], "linguist": [43, 62, 153, 161, 186], "319": [43, 62, 153, 186], "326": [43, 62, 153, 186], "burbidg": [43, 150, 186], "rowland": [43, 150, 186], "king": [43, 150, 186], "eng": [43, 150, 186], "autom": [43, 150, 186, 192, 203], "209": [43, 150, 186], "218": [43, 150, 186], "2007": [43, 50, 150, 162, 167, 186], "beluch": [43, 61, 152, 186], "genewein": [43, 61, 152, 186], "n\u00fcrnberger": [43, 61], "k\u00f6hler": [43, 61], "power": [43, 61, 152, 186], "pattern": [43, 61, 152, 154, 169, 186], "recognit": [43, 49, 54, 61, 152, 163, 169, 186], "9368": [43, 61, 152, 186], "9377": [43, 61, 152, 186], "high": [44, 48, 63, 64, 65, 66, 67, 72, 77, 160, 181, 186, 209], "low": [44, 48, 160, 186], "jin": [44, 154, 186], "baselin": [45, 69, 74], "max_iter_repres": 46, "n_k": 46, "leaf": 46, "optimis": 46, "jose": [46, 156, 157, 158, 186], "de": [46, 156, 157, 158, 186], "mendon": [46, 156, 157, 158, 186], "ca": 46, "devijv": [46, 156, 157, 158, 186], "jaks": [46, 156, 157, 158, 186], "monbet": [46, 156, 157, 158, 186], "poloni": [46, 156, 157, 158, 186], "420": [46, 156, 157, 158, 186], "460": [46, 156, 157, 158, 186], "2023": [46, 63, 64, 65, 66, 67, 156, 157, 158, 173, 174, 175, 176, 186], "decisiontreeregressor": [46, 156, 157, 158], "min_samples_leaf": [46, 156, 157, 158], "restrict": 46, "depth": 46, "develop": [46, 209], "max_candid": [47, 159], "exclude_non_subsampl": 47, "integ": [47, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "fraction": 47, "subsampl": [47, 193, 204], "stai": [47, 76], "opposit": [48, 160, 186], "suit": [48, 160, 186], "8175": [48, 160, 186], "8195": [48, 160, 186], "expected_average_precis": [49, 163, 170, 210], "variant": [49, 59, 189, 200], "settl": [49, 59, 164, 165, 166, 186], "burr": [49, 59, 164, 165, 166, 186], "literatur": [49, 59, 164, 165, 166, 186], "survei": [49, 59, 164, 165, 166, 186], "univers": [49, 59, 164, 165, 166, 186], "wisconsin": [49, 59, 164, 165, 166, 186], "madison": [49, 59], "depart": [49, 59, 164, 165, 166, 186], "scienc": [49, 59, 164, 165, 166, 186], "2009": [49, 56, 57, 59, 164, 165, 166, 169, 186], "technol": [49, 59], "appl": [49, 59, 63, 64, 65, 66, 67, 72, 77, 181, 186], "13": [49, 59, 185, 186, 192, 194, 203, 205], "18": [49, 59, 186, 188, 199], "wang": [49, 54, 163, 186], "shi": [49, 54, 163, 186], "shen": [49, 54, 163, 186], "action": [49, 54, 163, 186], "jt": [49, 54, 137, 163, 167, 168, 186], "964": [49, 54, 163, 186], "970": [49, 54, 163, 186], "consider_unlabel": [50, 167, 168, 169], "consider_label": [50, 167, 168, 169], "candidate_to_label": [50, 167, 168, 169], "voi": [50, 167, 170, 186, 210], "under": [50, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "term": 50, "done": [50, 188, 199], "kapoor": [50, 167, 186], "ashish": [50, 167, 186], "eric": [50, 167, 186], "horvitz": [50, 167, 186], "sumit": [50, 167, 186], "basu": [50, 167, 186], "theoret": [50, 167, 186], "ijcai": 50, "vol": 50, "joshi": [50, 169, 186], "porikli": [50, 169, 186], "papanikolopoulo": [50, 169, 186], "2012": 50, "scalabl": 50, "trpami": 50, "34": [50, 63, 64, 65, 66, 67, 173, 174, 175, 176, 186, 188, 192, 199, 203], "2259": 50, "2273": 50, "margineantu": [50, 168, 186], "1622": [50, 168, 186], "1623": [50, 168, 186], "kl": 51, "level": [51, 56, 57, 61, 62, 115, 117], "querybycommitte": [51, 61, 62, 150, 151, 152, 153, 170, 186, 188, 189, 199, 200, 210], "extens": [52, 63, 64, 65, 66, 67, 72, 73, 102], "wherebi": 52, "mutual": 52, "k_vec_list": 53, "001": [53, 73, 194, 205], "expected_cost_reduct": 53, "n_new_cand": 55, "greedili": 55, "datapoint": 55, "addition": [55, 82, 193, 195, 197, 204, 206, 208], "mode": 56, "upper": [56, 99, 193, 204], "ielearn": 56, "reli": [56, 57, 189, 200], "interv": [56, 57, 115, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "ground": 56, "truth": 56, "half": [56, 57], "student": [56, 57], "ti": [56, 108, 109], "donmez": [56, 57, 162, 186], "carbonel": [56, 57, 162, 186], "schneider": [56, 57], "acm": [56, 57], "sigkdd": [56, 57], "259": [56, 57, 151, 170, 210], "268": [56, 57], "a_perf_": 56, "a_cand": 56, "epsilon": [57, 88], "9": [57, 74, 130, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 186, 188, 190, 192, 199, 201, 203], "multiannotatorpoolquerystrategi": [57, 58, 113], "iethresh": 57, "address": [57, 209], "intervalestimationannotmodel": 57, "nonetheless": 57, "rank": [57, 58], "amount": [57, 209], "y_aggreg": [58, 106], "transform": [58, 84, 128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 192, 199, 203], "a_perf": 58, "aggreg": 58, "majority_vot": [58, 194, 205], "n_annotators_per_sampl": [58, 194, 205], "primarili": 58, "unspecifi": 58, "either": [58, 97, 100], "previous": [58, 192, 203], "chosen": 58, "interpret": [58, 95], "th": [58, 102, 110], "last": [58, 76, 78, 79, 80, 81, 82, 83, 116, 187, 198], "pf": 59, "set_base_clf": 60, "enforce_unique_sampl": 60, "use_speed_up": 60, "simplifi": [60, 191, 192, 193, 195, 196, 197, 202, 203, 204, 206, 207, 208], "retrain": [60, 187, 190, 198, 201], "scenario": 60, "therebi": [60, 100], "pre": [60, 192, 195, 196, 197, 203, 206, 207, 208], "moreov": [60, 192, 203], "newli": [60, 89], "simpli": 60, "append": [60, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 190, 192, 193, 195, 197, 199, 201, 203, 204, 206, 208, 209], "repeat": [60, 191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "speed": 60, "up": 60, "idx": [60, 190, 194, 201, 205], "n_sub_sampl": 60, "init": 60, "is_fit": 60, "base_clf": 60, "resp": 60, "use_base_clf": 60, "idx_fit": 60, "idx_pr": 60, "fit_param": 60, "pred_param": 60, "Will": 60, "idx_predict": 60, "sequenc": 60, "n_fit_sampl": 60, "n_predict_sampl": 60, "subset": [60, 102, 193, 204], "later": 60, "lexicograph": 60, "force_full_budget": [63, 64, 65, 66, 67, 173, 174, 195, 197, 206, 208], "dist_func": [63, 64, 65, 66, 67, 72], "dist_func_dict": [63, 64, 65, 66, 67, 72], "density_threshold": [63, 64, 65, 66, 67], "cognition_window_s": [63, 64, 65, 66, 67], "singleannotatorstreamquerystrategi": [63, 68, 69, 70, 71, 72, 73, 74, 75], "cognitivedualquerystrategyran": [63, 174, 185, 186, 195, 197, 206, 208, 210], "cognitivedualquerystrategyranvarun": [63, 175, 185, 186, 195, 197, 206, 208, 210], "cognitivedualquerystrategyvarun": [63, 176, 185, 186, 195, 197, 206, 208, 210], "cognitivedualquerystrategyfixun": [63, 173, 185, 186, 195, 197, 206, 208, 210], "\u017eliobait\u0117": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 177, 179, 180, 184, 186], "et": [63, 64, 65, 66, 67, 72, 77, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 160, 161, 162, 163, 167, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 186, 192, 203], "streamdensitybased": [63, 64, 65, 66, 67, 181, 185, 186, 195, 197, 206, 208, 210], "around": [63, 64, 65, 66, 67], "author": [63, 64, 65, 66, 67, 209], "monitor": [63, 64, 65, 66, 67], "full": [63, 64, 65, 66, 67, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 190, 191, 192, 194, 196, 198, 201, 202, 203, 205, 207, 209], "articl": [63, 64, 65, 66, 67, 209], "budgetmanag": [63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 89], "densitybasedbudgetmanag": [63, 72], "throw": [63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75], "randombudgetmanag": [63, 65, 66, 67], "fixeduncertaintybudgetmanag": [63, 64, 68], "variableuncertaintybudgetmanag": [63, 67, 75, 81, 82], "randomvariableuncertaintybudgetmanag": [63, 70, 77], "liu": [63, 64, 65, 66, 67, 173, 174, 175, 176, 186], "xue": [63, 64, 65, 66, 67, 173, 174, 175, 176, 186], "li": [63, 64, 65, 66, 67, 173, 174, 175, 176, 186], "cao": [63, 64, 65, 66, 67, 173, 174, 175, 176, 186], "onlin": [63, 64, 65, 66, 67, 173, 174, 175, 176, 186], "drift": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 173, 174, 175, 176, 177, 179, 180, 184, 186], "netw": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 173, 174, 175, 176, 177, 179, 180, 184, 186], "186": [63, 64, 65, 66, 67, 173, 174, 175, 176, 186], "200": [63, 64, 65, 66, 67, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 200, 209], "bifet": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 177, 179, 180, 184, 186], "pfahring": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 177, 179, 180, 181, 184, 186], "holm": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 177, 179, 180, 184, 186], "With": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 177, 179, 180, 184, 186, 209], "25": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 116, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 192, 200, 203], "27": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 177, 179, 180, 184, 186, 192, 203], "39": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 177, 179, 180, 184, 186, 192, 203], "2014": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 78, 79, 81, 82, 83, 154, 177, 179, 180, 181, 184, 186], "ienco": [63, 64, 65, 66, 67, 72, 77, 181, 186], "focus": [63, 64, 65, 66, 67, 72, 77, 181, 186], "evolv": [63, 64, 65, 66, 67, 72, 77, 181, 186], "heterog": [63, 64, 65, 66, 67, 72, 77, 181, 186], "program": [63, 64, 65, 66, 67, 72, 77, 181, 186], "133": [63, 64, 65, 66, 67, 72, 77, 181, 186], "148": [63, 64, 65, 66, 67, 72, 77, 181, 186], "cognitivedualquerystrategi": [64, 65, 66, 67], "fixeduncertainti": [64, 177, 185, 186, 195, 197, 206, 208, 210], "randomvariableuncertainti": [66, 179, 185, 186, 210], "variableuncertainti": [67, 71, 184, 185, 186, 195, 197, 206, 208, 210], "uncertaintyzliobait": [68, 70, 71, 75], "assess": [68, 70, 71, 72, 73, 75, 76], "fourth": 69, "behind": 69, "exhaust": [69, 74, 78, 79, 80, 81, 82, 83], "soon": 69, "regardless": [69, 74], "posit": [69, 74, 102, 116], "thu": [69, 74, 102, 189, 200], "combin": [71, 186, 188, 191, 199, 202], "splitbudgetmanag": [71, 80], "spatial": [73, 76], "increment": [73, 76, 78], "quantil": [73, 76], "balancedincrementalquantilefilt": [73, 195, 206], "tempor": 73, "0e": 73, "onto": 73, "anal": [73, 76, 154, 182, 186], "157": [73, 76, 182, 186], "2015": [73, 76, 182, 186], "n_candidate_sampl": 73, "allow_exceeding_budget": 74, "randomsampl": [74, 155, 170, 186, 188, 191, 192, 193, 195, 196, 197, 199, 202, 203, 204, 206, 207, 208, 210], "configur": 74, "strictli": 74, "adher": 74, "long": 74, "w_tol": 76, "50": [76, 190, 191, 195, 196, 197, 201, 202, 206, 207, 208], "biqf": [76, 197, 208], "togeth": 76, "warrant": 76, "ultil": 76, "against": [76, 191, 192, 202, 203], "deriv": 76, "infer": [76, 88], "higher": [76, 78, 79, 80, 81, 82, 83, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158], "theta": [77, 81, 82, 83], "01": [77, 81, 82, 83, 170, 188, 192, 193, 199, 203, 204, 210], "dbalstream": [77, 195, 197, 206, 208], "mainli": 77, "ist": 77, "n_seen_sampl": 77, "n_queried_sampl": 77, "theta_": [77, 81, 82, 83], "rel": [77, 81, 82, 83, 191, 202, 209], "standart": [77, 81], "spent": 78, "u_t": 78, "labeling_t": 78, "memori": [78, 79, 80, 81, 82, 83], "taken": [78, 79, 80, 81, 82, 83], "estimatedbudgetzliobait": [79, 80, 81, 82, 83], "rendom": 81, "similarli": 81, "percent": 82, "encod": 84, "inverse_transform": 84, "back": 84, "y_dec": 84, "decod": 84, "y_enc": 84, "func": 85, "n_positional_paramet": 85, "free": 85, "n_free_paramet": 85, "f_callabl": 86, "only_mandatori": 86, "ignore_var_keyword": 86, "mandatori": 86, "var_keyword": 86, "inspect": 86, "could": 86, "sample_weight_cand": 87, "accept_spars": 87, "accept_large_spars": 87, "copi": [87, 89, 188, 189, 199, 200], "ensure_all_finit": 87, "ensure_2d": 87, "allow_nd": 87, "multi_output": 87, "allow_nan": 87, "ensure_min_sampl": 87, "ensure_min_featur": 87, "y_numer": 87, "2d": [87, 105, 111], "1d": 87, "empti": [87, 97, 193, 204, 209], "finit": 87, "attempt": 87, "convert": [87, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 197, 208], "failur": 87, "nd": [87, 110], "csc": 87, "csr": 87, "coo": 87, "bsr": 87, "suppli": 87, "caus": 87, "32": [87, 170, 186, 188, 199], "bit": 87, "preserv": 87, "unless": [87, 187, 191, 198, 202], "convers": 87, "forc": 87, "fortran": 87, "trigger": 87, "pd": 87, "na": 87, "cannot": [87, 187, 190, 198, 201], "infinit": 87, "axi": [87, 108, 109, 114, 115, 116, 117, 118, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 191, 192, 200, 202, 203], "column": [87, 97, 102], "reject": 87, "dataset": [87, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209], "disabl": 87, "float64": 87, "x_convert": 87, "y_convert": 87, "pedregosa": 87, "varoquaux": 87, "gramfort": 87, "michel": 87, "thirion": 87, "grisel": 87, "blondel": 87, "prettenhof": 87, "weiss": 87, "dubourg": 87, "vanderpla": 87, "passo": 87, "cournapeau": 87, "brucher": 87, "perrot": 87, "duchesnai": 87, "12": [87, 163, 170, 185, 186, 188, 192, 199, 203, 210], "2825": 87, "2830": 87, "bound_must_be_given": 88, "x1_min": 88, "x2_min": 88, "xndim_min": 88, "x1_max": 88, "x2_max": 88, "xndim_max": 88, "default_budget_manager_class": 89, "default_budget_manager_dict": 89, "budget_manager_": 89, "creation": [89, 191, 192, 202, 203], "manger": 89, "cf": 89, "array_lik": 90, "uniformli": [91, 189, 200], "compat": [92, 96, 190, 197, 201, 208, 209], "only_non_neg": 93, "contains_non_zero": 93, "diagonal_is_zero": 93, "cost_matrix_new": 93, "missing_label1": 94, "missing_label2": 94, "symbol": [94, 96, 103, 104, 105, 111], "valueerror": [94, 98, 99, 190, 201], "dim": [95, 188, 192, 199, 203], "uniqu": [95, 126, 140, 151, 152, 153, 161, 162, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 194, 197, 198, 199, 205, 208, 209], "n_indic": 95, "n_dim": 95, "check_uniqu": 95, "target_typ": [96, 99, 100], "print": [96, 99, 187, 188, 189, 193, 195, 196, 197, 198, 199, 200, 204, 206, 207, 208], "obj": [97, 100], "reset": [97, 193, 204], "verifi": 97, "n_features_in_": 97, "deleg": 97, "verif": 97, "sklearn_check_n_featur": 97, "wa": [97, 114, 115, 116, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 201, 204], "seed_multipli": 98, "singleton": 98, "product": 98, "seed": [98, 188, 194, 199, 205], "min_inclus": 99, "max_inclus": 99, "min_val": 99, "max_val": 99, "impli": 99, "inclus": 99, "exclus": 99, "match": [99, 107, 189, 200], "desir": 99, "violat": 99, "target_v": 100, "indicator_func": 100, "ones_lik": [101, 106], "ornon": 101, "confusion_matrix": 102, "definit": 102, "c_": 102, "group": 102, "reorder": 102, "sort": [102, 156, 157, 158, 189, 190, 200, 201], "pred": 102, "popul": 102, "conf_matric": 102, "wikipedia": 102, "convent": 102, "ax": [102, 113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 193, 194, 199, 200, 204, 205], "mask": [103, 104], "present": [103, 105, 111, 193, 204], "lbld_indic": 105, "shuffl": [106, 108, 109, 191, 192, 193, 195, 196, 197, 202, 203, 204, 206, 207, 208], "wrapped_obj_nam": 107, "func_nam": 107, "decor": 107, "signatur": 107, "hide": 107, "especi": 107, "heavili": 107, "inspir": 107, "available_if": 107, "metaestim": 107, "argmax_kwarg": 108, "index_arrai": [108, 109], "along": [108, 109, 209], "argmin_kwarg": 109, "argmin": 109, "max": [110, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 191, 194, 198, 202, 205], "fill": [110, 193, 204], "best_indic": 110, "proport": 110, "batch_util": 110, "unlbld_indic": 111, "grid": [112, 125, 126, 127, 132, 137, 138], "resolut": [112, 113, 114, 115, 116, 118], "xmin": [112, 113, 114, 115, 117, 118], "ymin": [112, 113, 114, 115, 117, 118], "xmax": [112, 113, 114, 115, 117, 118], "ymax": [112, 113, 114, 115, 117, 118], "x_mesh": 112, "y_mesh": 112, "mesh_sampl": 112, "q": [113, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204, 209], "n_annotators_to_plot": [113, 117], "replace_nan": [113, 114, 118, 125, 126, 127, 132, 137, 138, 140, 154, 161, 162], "mesh": [113, 118], "ignore_undefined_query_param": [113, 118], "feature_bound": [113, 114, 115, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 194, 198, 205], "area": [113, 114, 115, 117, 118, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 188, 191, 192, 199, 202, 203], "boundari": [113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 194, 198, 205, 209], "matplotlib": [113, 114, 115, 116, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208], "contour_dict": [113, 114, 118], "contour": [113, 114, 115, 118, 125, 126, 127, 132, 137, 138, 209], "plot_annot": 113, "remain": [113, 118], "plt": [114, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208], "gca": 114, "boundary_dict": 115, "cmap": [115, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 191, 198, 202], "coolwarm": [115, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "confidence_dict": 115, "open": [115, 193, 204], "stand": 115, "color": [115, 116, 117, 134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 188, 194, 199, 205], "colormap": [115, 116, 117], "coolwarm_r": [115, 117], "t_x": [116, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "plot_step": [116, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "pred_list": 116, "newest": 116, "unlabeled_color": 117, "grei": [117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "linewidth": 117, "plot_cand_highlight": 117, "blend": 117, "backend": 117, "width": [117, 188, 190, 193, 199, 201, 204], "highlight": [117, 125, 126, 127, 132, 137, 138], "overview": [119, 189, 200], "capabl": 119, "download": [123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 193, 203, 204], "code": [123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 203, 209], "sphinx_gallery_examples_python": 123, "zip": [123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 189, 192, 193, 195, 197, 200, 203, 204, 206, 208, 209], "jupyt": [123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 201], "notebook": [123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "sphinx_gallery_examples_jupyt": 123, "galleri": [123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 210], "exampl": [124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 194, 198, 199, 204, 205, 210], "end": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 192, 203], "anim": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "bottom": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "googl": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "colab": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "fail": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "instal": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "try": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "restart": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "runtim": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "ctrl": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "session": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "uncom": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "cell": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "tutori": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209], "pyplot": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208], "make_blob": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 194, 195, 196, 197, 202, 205, 206, 207, 208, 209], "labeled_indic": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 187, 190, 198, 201], "unlabeled_indic": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 187, 188, 190, 198, 199, 201], "visual": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 192, 194, 198, 203, 205, 209], "plot_util": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 187, 198], "plot_decision_boundari": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 194, 198, 205], "plot_contour_for_sampl": [125, 126, 127, 132, 137, 138, 162], "cluster_std": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "fill_valu": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 188, 190, 191, 192, 194, 196, 198, 199, 201, 202, 203, 205, 207, 209], "initialis": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "prepar": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "2x2": [125, 126, 127, 132, 137, 138], "subplot": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 193, 194, 199, 200, 204, 205], "fig": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 193, 194, 199, 200, 204, 205], "constrained_layout": [125, 126, 127, 132, 137, 138], "artist": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "n_cycl": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 188, 190, 191, 192, 194, 198, 199, 201, 202, 203, 205, 209], "retriev": [125, 126, 127, 132, 137, 138], "query_idx": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 188, 191, 192, 194, 198, 199, 202, 203, 205, 209], "enumer": [125, 126, 127, 132, 137, 138, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 193, 194, 195, 202, 203, 204, 205, 206], "flatten": [125, 126, 127, 132, 134, 135, 136, 137, 138, 141, 142, 143, 144, 150, 156, 157, 158, 188, 189, 199, 200], "collect": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 197, 206, 208], "coll_old": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "scatter": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 187, 189, 191, 194, 195, 196, 197, 198, 200, 202, 205, 206, 207, 208], "marker": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 194, 205], "zorder": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "x_label": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "300": [125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "overlai": [125, 126, 127, 132, 137, 138], "titl": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 189, 191, 192, 193, 195, 196, 197, 198, 200, 202, 203, 204, 206, 207, 208, 209], "set_titl": [125, 126, 127, 132, 137, 138, 188, 189, 194, 199, 200, 205], "artistanim": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "1000": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 188, 193, 195, 196, 197, 199, 204, 206, 207, 208], "blit": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "loop": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 190, 193, 194, 195, 196, 197, 201, 204, 205, 206, 207, 208], "chicheng": [125, 186], "akshai": [125, 186], "john": [125, 186], "alekh": [125, 186], "script": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "minut": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "054": [125, 170, 210], "batch_active_learning_by_diverse_gradient_embedding_": [125, 170, 210], "ipynb": [125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "gaussianprocessclassifi": [126, 140, 191, 202, 209], "baggingclassifi": [126, 140, 151], "sklearnclassifi": [126, 140, 161, 162, 187, 188, 190, 191, 192, 193, 197, 198, 199, 201, 202, 203, 204, 208, 209], "neil": [126, 140, 186], "ferenc": [126, 140, 186], "husz": [126, 140, 186], "\u00e1": [126, 140, 186], "\u00e9": [126, 140, 156, 157, 158, 186], "andrea": [126, 152, 186], "joost": [126, 186], "yarin": [126, 186], "027": [126, 170, 210], "batch_bayesian_active_learning_by_disagreement_": [126, 170, 210], "viraj": [127, 186], "arjun": [127, 186], "kate": [127, 186], "judi": [127, 186], "137": [127, 170, 210], "clustering_uncertainti": [127, 170, 210], "weighted_embeddings_": [127, 170, 210], "contrastiv": [128, 170, 186, 210], "20": [128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 186, 187, 189, 194, 198, 200, 205, 209, 210], "captur": [128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 186], "rcparam": [128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 208], "titles": [128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "transax": [128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "coll_new": [128, 129, 130, 131, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "katerina": [128, 186], "giorgo": [128, 186], "lo": [128, 186, 193, 204], "\u00ef": [128, 186], "nikolao": [128, 169, 186], "708": [128, 170, 210], "contrastive_active_learning_": [128, 170, 210], "coreset": [129, 170, 186, 192, 203, 210], "ozan": [129, 186], "silvio": [129, 186], "940": [129, 170, 210], "core_set": [129, 170, 210], "costembedding": [130, 170, 186, 196, 207, 210], "kuan": [130, 186], "hao": [130, 186], "hsuan": [130, 186], "tien": [130, 186], "986": [130, 170, 210], "active_learning_with_cost_embedding_": [130, 170, 210], "discriminativ": [131, 170, 186, 188, 192, 199, 203, 210], "daniel": [131, 149, 182, 186, 209], "shai": [131, 186], "701": [131, 170, 210], "discriminative_active_learning_": [131, 170, 210], "sanket": [132, 186], "rajan": [132, 186], "josiah": [132, 186], "jeffrei": [132, 186], "serena": [132, 186], "019": [132, 170, 210], "dropout_query_": [132, 170, 210], "epistemicuncertaintysampl": [133, 170, 186, 196, 207, 210], "vu": [133, 186], "linh": [133, 186], "s\u00e9bastien": [133, 186], "eyk": [133, 186], "22": [133, 170, 186, 210], "038": [133, 170, 210], "epistemic_uncertainty_sampling_": [133, 170, 210], "uniform": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "is_label": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 162, 189, 190, 200, 201], "nickernelregressor": [134, 135, 136, 141, 142, 143, 144, 189, 200], "expectedmodelchangemaxim": [134, 170, 186, 210], "def": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208], "true_funct": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "underli": [134, 135, 136, 141, 142, 143, 144, 150], "concaten": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 192, 193, 196, 200, 203, 204, 207], "rv": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "reshap": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 195, 196, 197, 199, 200, 201, 202, 203, 206, 207, 208, 209], "nois": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 188, 189, 199, 200], "lambda": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 204, 205, 206, 207, 208], "rand": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158], "x_test": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 188, 189, 191, 192, 193, 199, 200, 202, 203, 204], "linspac": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 194, 200, 205], "num": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 194, 200, 205], "ax_1": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158], "ax_2": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158], "sharex": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158], "record": [134, 135, 136, 141, 142, 143, 144, 150, 191, 202], "utilities_test": [134, 135, 136, 141, 142, 143, 144, 150, 189, 200], "utility_lin": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158], "green": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 194, 200, 205], "utility_fil": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158], "fill_between": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 191, 202], "is_lbld": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "lightblu": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "orang": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 189, 200], "prediction_lin": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158], "frame": [134, 135, 136, 141, 142, 143, 144, 150, 156, 157, 158, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 198], "754": [134, 170, 210], "expected_model_chang": [134, 170, 210], "expectedmodeloutputchang": [135, 170, 186, 210], "gauss_hermit": [135, 144], "n_integration_sampl": [135, 144, 189, 200], "\u00e4": [135, 186], "ding": [135, 186], "bj": [135, 186], "\u00f6": [135, 152, 186], "rn": [135, 186], "br": [135, 186], "792": [135, 170, 210], "expected_model_output_chang": [135, 170, 210], "expectedmodelvariancereduct": [136, 170, 186, 210], "958": [136, 170, 210], "expected_model_variance_reduct": [136, 170, 210], "42": [137, 187, 190, 198, 201], "sandra": [137, 186], "anna": [137, 186], "yunpu": [137, 186], "thoma": [137, 186], "839": [137, 170, 210], "fast_active_learning_by_contrastive_uncertainty_": [137, 170, 210], "fourd": [138, 139, 170, 186, 210], "tobia": [138, 139, 186], "bernhard": [138, 139, 177, 179, 180, 181, 184, 186, 209], "920": [138, 170, 210], "batch_dens": [138, 170, 210], "distance_sampling_": [138, 139, 170, 210], "batch4d": [138, 170, 186, 210], "6": [139, 142, 143, 147, 150, 151, 152, 153, 156, 157, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208], "280": [139, 170, 210], "greedybald": [140, 170, 186, 210], "712": [140, 170, 210], "bayesian_active_learning_by_disagreement_": [140, 170, 210], "greedysamplingtarget": [141, 142, 170, 186, 189, 200, 210], "dongrui": [141, 142, 143, 186], "chin": [141, 142, 143, 186], "teng": [141, 142, 143, 186], "jian": [141, 142, 143, 173, 174, 175, 176, 186], "555": [141, 170, 210], "greedy_sampling_on_the_target_space_": [141, 170, 210], "765": [142, 170, 210], "improved_greedy_sampling_": [142, 170, 210], "greedysamplingx": [143, 170, 186, 189, 200, 210], "967": [143, 170, 210], "greedy_sampling_on_the_feature_space_": [143, 170, 210], "kldivergencemaxim": [144, 170, 186, 189, 200, 210], "dina": [144, 186], "amir": [144, 186], "samir": [144, 186], "17": [144, 170, 186, 210], "832": [144, 170, 210], "regression_based_kullback_leibler_divergence_maxim": [144, 170, 210], "montecarlo": [145, 146, 170, 186, 210], "nichola": [145, 146, 186], "andrew": [145, 146, 151, 186], "49": [145, 170, 210], "365": [145, 170, 210], "carlo_eer_with_log": [145, 170, 210], "48": [146, 170, 210], "738": [146, 170, 210], "carlo_eer_with_misclassif": [146, 170, 210], "parallelutilityestimationwrapp": [147, 170, 186, 210], "984": [147, 170, 210], "parallel_utility_estimation_wrapp": [147, 170, 210], "ofer": [148, 186], "avihu": [148, 160, 186], "gui": [148, 160, 186], "daphna": [148, 160, 186], "414": [148, 170, 210], "probability_coverage_": [148, 170, 210], "dens_est": 149, "den": 149, "georg": [149, 182, 186], "dominik": [149, 186], "johann": [149, 186], "myra": [149, 182, 186], "944": [149, 170, 210], "class_probabilistic_active_learning_": [149, 170, 210], "sklearnregressor": [150, 156, 157, 158, 189, 200], "sebastian": [150, 151, 152, 153, 186], "manfr": [150, 151, 152, 153, 186], "haim": [150, 151, 152, 153, 186], "robert": [150, 186], "jem": [150, 186], "ross": [150, 186], "438": [150, 170, 210], "committee_": [150, 151, 152, 153, 170, 210], "_with_empirical_vari": [150, 170, 210], "kachit": [151, 186], "kamal": [151, 186], "_with_kullback": [151, 170, 210], "leibler_diverg": [151, 170, 210], "william": [152, 186], "tim": [152, 186], "\u00fc": [152, 186], "rnberger": [152, 186], "jan": [152, 186], "hler": [152, 186], "390": [152, 170, 210], "_with_variation_ratio": [152, 170, 210], "sean": [153, 186], "ido": [153, 186], "272": [153, 170, 210], "_with_vote_entropi": [153, 170, 210], "quir": [154, 170, 186, 210], "sheng": [154, 186], "rong": [154, 186], "zhi": [154, 186], "hua": [154, 186], "36": [154, 167, 170, 186, 210], "1936": [154, 186], "1949": [154, 186], "889": [154, 170, 210], "querying_informative_and_representative_examples_": [154, 170, 210], "409": [155, 170, 210], "random_sampl": [155, 170, 210], "regressiontreebased": [156, 157, 158, 170, 186, 210], "smooth": [156, 157, 158, 196, 207], "curv": [156, 157, 158, 188, 191, 192, 193, 199, 202, 203, 204, 209], "sort_mask": [156, 157, 158], "argsort": [156, 157, 158], "x_plot": [156, 157, 158], "utilities_plot": [156, 157, 158], "light": [156, 157, 158], "blue": [156, 157, 158], "ashna": [156, 157, 158, 186], "jo": [156, 157, 158, 186], "\u00e3": [156, 157, 158, 186], "paulo": [156, 157, 158, 186], "almeida": [156, 157, 158, 186], "\u00e7": [156, 157, 158, 186], "emili": [156, 157, 158, 186], "No": [156, 157, 158, 186], "\u00eb": [156, 157, 158, 186], "val": [156, 157, 158, 186, 192, 203], "rie": [156, 157, 158, 186], "roberta": [156, 157, 158, 186], "846": [156, 170, 210], "regression_tree_based_active_learning_": [156, 157, 158, 170, 210], "_with_diversity_select": [156, 170, 210], "761": [157, 170, 210], "_with_random_select": [157, 170, 210], "044": [158, 170, 210], "_with_representativity_select": [158, 170, 210], "subsamplingwrapp": [159, 170, 186, 210], "uncertaintysampl": [159, 161, 162, 163, 164, 165, 166, 170, 186, 187, 188, 190, 191, 192, 196, 198, 199, 201, 202, 203, 207, 209, 210], "767": [159, 170, 210], "sampling_wrapp": [159, 170, 210], "670": [160, 170, 210], "typical_clustering_": [160, 170, 210], "init_param": [161, 162], "exp": [161, 162], "score_sampl": [161, 162], "tang": [161, 186], "xiaoqiang": [161, 186], "luo": [161, 186], "salim": [161, 186], "rouko": [161, 186], "natur": [161, 186], "languag": [161, 186], "pars": [161, 186], "120": [161, 186], "127": [161, 162, 186], "2002": [161, 186], "638": [161, 170, 210], "weighted_uncertainty_sampl": [161, 170, 210], "u_max": 162, "switching_point": 162, "dwu": 162, "utils_u": 162, "err": 162, "nanmean": 162, "acqur": 162, "31": [162, 186, 191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "pinar": [162, 186], "jaim": [162, 186], "paul": [162, 186], "bennett": [162, 186], "116": [162, 186], "660": [162, 170, 210], "dual_strategy_for_active_learn": [162, 170, 210], "hanmo": [163, 186], "xiaojun": [163, 186], "lei": [163, 186], "yi": [163, 186], "dong": [163, 186], "47": [163, 170, 210], "214": [163, 170, 210], "technic": [164, 165, 166, 186], "report": [164, 165, 166, 186], "1648": [164, 165, 166, 186], "450": [164, 170, 210], "uncertainty_sampling_with_entropi": [164, 170, 210], "527": [165, 170, 210], "uncertainty_sampling_with_least": [165, 170, 210], "505": [166, 170, 210], "uncertainty_sampling_with_margin": [166, 170, 210], "valueofinformation": [167, 168, 169, 170, 186, 210], "877": [167, 186], "882": [167, 186], "952": [167, 170, 210], "value_of_information_": [167, 170, 210], "drago": [168, 186], "26": [168, 170, 186, 192, 203, 210], "399": [168, 170, 210], "value_of_information_on_labeled_sampl": [168, 170, 210], "ajai": [169, 186], "fatih": [169, 186], "2372": [169, 186], "2379": [169, 186], "28": [169, 170, 186, 188, 199, 210], "075": [169, 170, 210], "value_of_information_on_unlabeled_sampl": [169, 170, 210], "40": [170, 186, 189, 200], "595": 170, "execut": [170, 171, 185, 187, 188, 190, 193, 198, 199, 201, 204, 209, 210], "45": 170, "sphinx_gallery_exampl": [170, 171, 185], "mem": [170, 171, 185, 210], "mb": [170, 171, 185, 210], "03": [170, 185, 192, 203, 210], "02": [170, 192, 203, 210], "00": [170, 171, 185, 188, 192, 199, 203, 210], "09": [170, 188, 192, 199, 203, 210], "06": [170, 192, 203, 210], "000": 171, "plot_stream_training_data": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "plot_stream_decision_boundari": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "init_s": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "x_init": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 206, 207, 208], "y_init": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 206, 207, 208], "x_stream": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 206, 207, 208], "y_stream": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 206, 207, 208], "x_train": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 192, 193, 195, 196, 197, 199, 202, 203, 204, 206, 207, 208, 209], "y_train": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 191, 192, 193, 195, 196, 197, 199, 202, 203, 204, 206, 207, 208, 209], "set_xlim": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 204], "set_ylim": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "track": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "predictions_list": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "x_t": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 197, 206, 208, 209], "y_t": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 197, 206, 208, 209], "y_cand": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 206, 207, 208, 209], "sampled_indic": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 206, 207, 208, 209], "right": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 195, 197, 199, 200, 202, 203, 206, 208], "what": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 193, 204], "data_lin": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "title_str": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "4f": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 191, 192, 202, 203], "500": [173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 195, 196, 197, 206, 207, 208], "home": [173, 174], "runner": [173, 174], "_density_uncertainti": [173, 174], "1011": [173, 174], "userwarn": [173, 174], "utilis": [173, 174], "sanmin": [173, 174, 175, 176, 186], "shan": [173, 174, 175, 176, 186], "jia": [173, 174, 175, 176, 186], "chuan": [173, 174, 175, 176, 186], "jie": [173, 174, 175, 176, 186], "069": [173, 185, 210], "cognitive_du": [173, 174, 175, 176, 185, 210], "query_strategy_with_fix": [173, 185, 210], "16": [174, 175, 176, 179, 180, 181, 183, 184, 185, 186, 188, 199, 210], "454": [174, 185, 210], "query_strategy_with_random_sampl": [174, 185, 210], "522": [175, 185, 195, 206, 210], "query_strategy_with_random": [175, 185, 210], "248": [176, 185, 210], "query_strategy_with_vari": [176, 185, 210], "indr\u0117": [177, 179, 180, 184, 186], "albert": [177, 179, 180, 184, 186], "geoffrei": [177, 179, 180, 184, 186], "483": [177, 185, 210], "periodicsampl": [178, 185, 186, 195, 197, 206, 208, 210], "949": [178, 185, 210], "periodic_sampl": [178, 185, 210], "128": [179, 185, 188, 199, 210], "124": [180, 185, 210], "dino": [181, 186], "indr": [181, 186], "\u0117": [181, 186], "\u017e": [181, 186], "liobait": [181, 186], "389": [181, 185, 210], "density_based_active_learning_for_data_stream": [181, 185, 210], "streamprobabilist": [182, 185, 186, 195, 197, 206, 208, 210], "755": [182, 185, 210], "probabilistic_active_learning_in_datastream": [182, 185, 210], "streamrandomsampl": [183, 185, 186, 195, 197, 206, 208, 210], "938": [183, 185, 210], "stream_random_sampl": [183, 185, 210], "936": [184, 185, 210], "994": 185, "often": [186, 209], "divid": 186, "categori": [186, 193, 204], "mostli": 186, "overal": [186, 193, 204], "ordens": 186, "canb": 186, "checkbox": 186, "distinct": 186, "tag": 186, "14": [186, 192, 203], "19": [186, 188, 194, 199, 205], "24": [186, 192, 203], "29": [186, 192, 203], "30": [186, 188, 189, 192, 195, 196, 197, 199, 200, 203, 206, 207, 208], "33": 186, "35": [186, 210], "37": [186, 192, 203], "38": [186, 192, 203], "eas": [187, 198, 209], "friendli": [187, 198], "better": [187, 198, 209], "show": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208], "exemplari": [187, 198], "mlp": [187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208], "make_classif": [187, 198], "figur": [187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 208], "facecolor": [187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 208], "white": [187, 188, 189, 191, 192, 194, 195, 197, 198, 199, 200, 202, 203, 205, 206, 208], "filterwarn": [187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 202, 203, 204], "practic": [187, 191, 192, 198, 202, 203], "howev": [187, 191, 198, 202], "oracl": [187, 191, 198, 202], "act": [187, 191, 192, 198, 202, 203], "n_redund": [187, 198], "jet": [187, 191, 198, 202], "xlabel": [187, 188, 191, 192, 195, 196, 197, 198, 199, 202, 203, 206, 207, 208], "ylabel": [187, 188, 191, 192, 195, 196, 197, 198, 199, 202, 203, 206, 207, 208], "introduc": [187, 198], "shown": [187, 193, 198, 204, 209], "begin": [187, 192, 198, 203], "easi": [187, 198], "cope": [187, 198], "central": [187, 198], "continu": [187, 198], "signific": [187, 198], "final": [187, 198, 209], "unlbld_idx": [187, 198], "lbld_idx": [187, 198], "grai": [187, 198], "68": [187, 198], "torch": [188, 192, 199, 203], "torchvis": [188, 192, 199, 203], "torchaudio": [188, 192, 199, 203], "tqdm": [188, 192, 199, 203], "panda": [188, 199], "brief": [188, 199], "pytorch": [188, 199], "deepcopi": [188, 199], "call_func": [188, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208], "fetch_openml": [188, 199], "votingclassifi": [188, 199], "model_select": [188, 190, 191, 193, 199, 201, 202, 204], "train_test_split": [188, 193, 199, 204], "standardscal": [188, 190, 199, 201], "neuralnetclassifi": [188, 199], "nn": [188, 199], "fontsiz": [188, 189, 194, 199, 200, 205], "manual_se": [188, 199], "cuda": [188, 192, 199, 203], "devic": [188, 192, 199, 203], "is_avail": [188, 192, 199, 203], "simplic": [188, 192, 195, 197, 199, 203, 206, 208], "mnist": [188, 199], "28px": [188, 199], "handwritten": [188, 190, 199, 201], "recogn": [188, 199], "mnist_784": [188, 199], "return_x_i": [188, 199], "as_fram": [188, 199], "figsiz": [188, 189, 193, 194, 199, 200, 204, 205], "nrow": [188, 199], "ncol": [188, 193, 199, 204], "imshow": [188, 199], "n_channel": [188, 199], "height": [188, 193, 199, 204], "astyp": [188, 199], "float32": [188, 199], "int64": [188, 199], "66": [188, 199], "y_test": [188, 191, 193, 199, 202, 204], "train_siz": [188, 199], "rotat": [188, 199], "scale": [188, 199], "basic": [188, 189, 190, 199, 200, 201], "pad": [188, 199], "vertic": [188, 199], "horizont": [188, 199], "flip": [188, 199], "translat": [188, 199], "crop": [188, 199], "darken": [188, 199], "brighten": [188, 199], "modif": [188, 199], "grayscal": [188, 199], "eras": [188, 199], "look": [188, 189, 190, 193, 199, 200, 201, 204], "tensorflow": [188, 199], "visit": [188, 199], "And": [188, 192, 199, 203], "compos": [188, 192, 199, 203], "randomaffin": [188, 199], "degre": [188, 199], "randomperspect": [188, 199], "distortion_scal": [188, 199], "gaussianblur": [188, 199], "kernel_s": [188, 192, 199, 203], "sigma": [188, 199], "x_aug": [188, 199], "from_numpi": [188, 199], "cnn": [188, 199], "ten": [188, 199], "classifiermodul": [188, 199], "__init__": [188, 190, 199, 201], "conv1": [188, 199], "conv2d": [188, 192, 199, 203], "conv2": [188, 199], "64": [188, 199], "conv2_drop": [188, 199], "dropout2d": [188, 199], "fc1": [188, 192, 199, 203], "1600": [188, 199], "fc2": [188, 192, 199, 203], "fc1_drop": [188, 199], "forward": [188, 199], "no_grad": [188, 192, 199, 203], "relu": [188, 199], "max_pool2d": [188, 199], "softmax": [188, 199], "net": [188, 199], "module__n_class": [188, 199], "max_epoch": [188, 199], "lr": [188, 199], "verbos": [188, 199], "sgd": [188, 199], "optimizer__momentum": [188, 199], "optimizer__weight_decai": [188, 199], "3e": [188, 199], "train_split": [188, 199], "ensemble_init": [188, 199], "four": [188, 189, 199, 200], "start": [188, 199, 209, 212], "setup": [188, 199], "n_sub_set": [188, 199], "qs_dict": [188, 199], "acc_dict": [188, 199], "qs_name": [188, 191, 192, 199, 202, 203], "item": [188, 190, 195, 196, 197, 199, 201, 206, 207, 208], "full_lik": [188, 189, 193, 199, 200, 204], "warm": [188, 199], "argwher": [188, 199], "acc": [188, 199], "ulbd_indic": [188, 199], "choic": [188, 193, 199, 204], "04": [188, 199], "lt": [188, 192, 196, 199, 203, 207], "08": [188, 199], "aulc": [188, 193, 199, 204], "xtick": [188, 199], "ytick": [188, 199], "loc": [188, 191, 192, 193, 199, 202, 203, 204], "give": [189, 194, 200, 205], "baggingregressor": [189, 200], "dimension": [189, 194, 200, 205], "n_iter": [189, 200], "uniform_rv": [189, 200], "pos_arg": [189, 200], "key_word_arg": [189, 200], "norm_rv": [189, 200], "complex_func": [189, 200], "high_nois": [189, 200], "80": [189, 200], "high_density_diff": [189, 200], "want": [189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 202, 204, 205, 206, 207, 208], "displai": [189, 190, 193, 194, 195, 196, 197, 200, 201, 204, 205, 206, 207, 208], "lightgreen": [189, 200], "red": [189, 200], "small": [189, 200], "behavior": [189, 200], "quiet": [189, 200], "spike": [189, 200], "evenli": [189, 200], "strong": [189, 200], "tendenc": [189, 200], "steep": [189, 200], "monoton": [189, 200], "sinc": [189, 195, 196, 197, 200, 206, 207, 208], "slowli": [189, 200], "happen": [189, 200], "learner": [189, 200], "share": [189, 200], "seem": [189, 200], "qs_": [189, 200], "y_": [189, 200], "old_is_lbld": [189, 200], "ax_t": [189, 200], "twinx": [189, 200], "y_std": [189, 200], "__name__": [189, 200], "fontdict": [189, 200], "ipyannot": [190, 201], "superintend": [190, 201], "nbextens": [190, 201], "semi": [190, 201], "knowledg": [190, 201], "familiar": [190, 201], "math": [190, 201], "cross_val_scor": [190, 201], "load_digit": [190, 201], "neural_network": [190, 201], "mlpclassifi": [190, 201], "ipywidget": [190, 193, 201, 204], "classlabel": [190, 201], "At": [190, 201], "datalabel": [190, 201], "overwrit": [190, 201], "_annotation_iter": [190, 201], "_undo": [190, 201], "labelling_widget": [190, 201], "submissionwidgetmixin": [190, 201], "query_dict": [190, 201], "past": [190, 201], "shape_queri": [190, 201], "shape_clf": [190, 201], "entir": [190, 201], "eval_method": [190, 201], "y_eval": [190, 201], "clf_eval": [190, 201], "attributeerror": [190, 201], "ceil": [190, 201], "model_perform": [190, 201], "top_bar": [190, 201], "hbox": [190, 193, 201, 204], "progressbar": [190, 201], "layout": [190, 193, 201, 204], "justify_cont": [190, 201], "children": [190, 201], "_begin_annot": [190, 201], "bar_styl": [190, 201], "undo": [190, 201], "delet": [190, 201], "_render_hold_messag": [190, 201], "load": [190, 201], "yield": [190, 201], "press": [190, 193, 201, 204], "previou": [190, 195, 196, 197, 201, 206, 207, 208], "undon": [190, 201], "pop": [190, 201], "break": [190, 193, 201, 204], "brake": [190, 201], "_render_finish": [190, 201], "_annotation_loop": [190, 201], "send": [190, 201], "advanc": [190, 201], "ve": [190, 192, 201, 203], "invok": [190, 201], "startswith": [190, 201], "enough": [190, 201], "ok": [190, 201], "cv": [190, 193, 201, 204], "error_scor": [190, 201], "n_split": [190, 191, 201, 202], "3f": [190, 193, 201, 204], "digit": [190, 201], "8x8": [190, 201], "exchang": [190, 201], "pipe": [190, 201], "scaler": [190, 201], "image_s": [190, 201], "data_label": [190, 201], "produc": [190, 193, 201, 204], "comparison": [191, 192, 202, 203], "realiz": [191, 202], "fold": [191, 202], "focu": [191, 192, 202, 203], "cleanli": [191, 202], "repetit": [191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "proper": [191, 202], "stratifiedkfold": [191, 202], "kfold": [191, 202], "guarante": [191, 195, 196, 197, 202, 206, 207, 208], "helper": [191, 192, 202, 203], "mind": [191, 202, 209], "master_random_st": [191, 192, 202, 203], "gen_se": [191, 192, 202, 203], "randint": [191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "gen_random_st": [191, 192, 202, 203], "n_centers_per_class": [191, 202], "400": [191, 202], "factori": [191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "classifier_factory_funct": [191, 202], "query_strategy_factory_funct": [191, 192, 202, 203], "create_classifi": [191, 202], "create_query_strategi": [191, 192, 202, 203], "n_rep": [191, 192, 202, 203], "n_fold": [191, 202], "stratifi": [191, 202], "use_stratifi": [191, 202], "classifier_nam": [191, 202], "query_strategy_nam": [191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "kfold_class": [191, 202], "clf_name": [191, 196, 202, 207], "i_rep": [191, 192, 202, 203], "kf": [191, 202], "i_fold": [191, 202], "train_idx": [191, 202], "test_idx": [191, 202], "y_train_tru": [191, 192, 193, 202, 203, 204], "bar": [191, 202], "reshaped_result": [191, 192, 202, 203], "errorbar_mean": [191, 192, 202, 203], "errorbar_std": [191, 192, 202, 203], "demonstr": [192, 203], "studi": [192, 203, 209, 212], "involv": [192, 203], "flower": [192, 203], "102": [192, 203], "subsequ": [192, 203], "ll": [192, 203], "aforement": [192, 203], "oquab": [192, 203], "robust": [192, 203], "without": [192, 203], "transact": [192, 203], "research": [192, 203, 209], "tmlr": [192, 203], "nilsback": [192, 203], "zisserman": [192, 203], "indian": [192, 203], "graphic": [192, 203], "icvgip": [192, 203], "short": [192, 203], "distil": [192, 203], "art": [192, 203], "excel": [192, 203], "skip": [192, 203], "ahead": [192, 203], "resiz": [192, 203], "256": [192, 203], "centercrop": [192, 203], "224": [192, 203], "totensor": [192, 203], "485": [192, 203], "456": [192, 203], "406": [192, 203], "229": [192, 203], "225": [192, 203], "pretrain": [192, 203], "smallest": [192, 203], "hub": [192, 203], "set_dir": [192, 203], "cach": [192, 203], "dinov2_vitb14": [192, 203], "facebookresearch": [192, 203], "zipbal": [192, 203], "dl": [192, 203], "fbaipublicfil": [192, 203], "dinov2_vitb14_pretrain": [192, 203], "pth": [192, 203], "checkpoint": [192, 203], "330m": [192, 203], "113mb": [192, 203], "dinovisiontransform": [192, 203], "patch_emb": [192, 203], "patchemb": [192, 203], "proj": [192, 203], "768": [192, 203], "stride": [192, 203], "block": [192, 193, 195, 196, 197, 203, 204, 206, 207, 208], "modulelist": [192, 203], "nestedtensorblock": [192, 203], "norm1": [192, 203], "layernorm": [192, 203], "elementwise_affin": [192, 203], "attn": [192, 203], "memeffattent": [192, 203], "qkv": [192, 203], "in_featur": [192, 203], "out_featur": [192, 203], "2304": [192, 203], "attn_drop": [192, 203], "inplac": [192, 203], "proj_drop": [192, 203], "ls1": [192, 203], "layerscal": [192, 203], "drop_path1": [192, 203], "norm2": [192, 203], "3072": [192, 203], "gelu": [192, 203], "approxim": [192, 203], "ls2": [192, 203], "drop_path2": [192, 203], "head": [192, 203], "firstli": [192, 203], "npy": [192, 203], "load_and_process_dataset": [192, 203], "root_dir": [192, 203], "is_train": [192, 203], "directori": [192, 203], "dataload": [192, 203], "flowers102": [192, 203], "num_work": [192, 203], "embedding_list": [192, 203], "label_list": [192, 203], "desc": [192, 203], "cat": [192, 203], "data_dir": [192, 203], "flowers102_x_train": [192, 203], "flowers102_y_train_tru": [192, 203], "flowers102_x_test": [192, 203], "flowers102_y_test_tru": [192, 203], "flowers102_dinov2b_x_train": [192, 203], "flowers102_dinov2b_y_train": [192, 203], "flowers102_dinov2b_x_test": [192, 203], "flowers102_dinov2b_y_test": [192, 203], "thor": [192, 203], "robot": [192, 203], "ox": [192, 203], "ac": [192, 203], "uk": [192, 203], "102flower": [192, 203], "tgz": [192, 203], "344862509": [192, 203], "68322052": [192, 203], "63it": [192, 203], "imagelabel": [192, 203], "mat": [192, 203], "502": [192, 197, 203, 208], "334318": [192, 203], "93it": [192, 203], "setid": [192, 203], "14989": [192, 203], "7487901": [192, 203], "70it": [192, 203], "255": [192, 203], "97it": [192, 203], "y_test_tru": [192, 203], "dataset_class": [192, 203], "query_batch_s": [192, 196, 203, 207], "39it": [192, 203], "08it": [192, 203], "37it": [192, 203], "47it": [192, 203], "31it": [192, 203], "17it": [192, 203], "21it": [192, 203], "18it": [192, 203], "06it": [192, 203], "22it": [192, 203], "05it": [192, 203], "14it": [192, 203], "insight": [192, 203], "errorbar": [192, 203], "jupyter_ui_pol": [193, 204], "showcas": [193, 195, 197, 204, 206, 208], "ai": [193, 204], "lg": [193, 204], "ni": [193, 204], "cr": [193, 204], "pl": [193, 204], "subset_arxiv_papers_with_embed": [193, 204], "huggingfac": [193, 204], "mongodb": [193, 204], "click": [193, 204], "widget": [193, 204], "textwrap": [193, 204], "ipython": [193, 204], "ui_ev": [193, 204], "is_c0_categori": [193, 204], "is_c1_categori": [193, 204], "is_valid_pap": [193, 204], "category_field": [193, 204], "category_fn": [193, 204], "valid_categori": [193, 204], "cache_dir": [193, 204], "huggingface_cach": [193, 204], "load_dataset": [193, 204], "is_c1": [193, 204], "is_c0": [193, 204], "is_exclusive_c1": [193, 204], "logical_and": [193, 204], "is_exclusive_c0": [193, 204], "subset_s": [193, 204], "is_exclusive_c1_subset": [193, 204], "is_exclusive_c0_subset": [193, 204], "c1_embed": [193, 204], "c0_embed": [193, 204], "c0": [193, 204], "c1": [193, 204], "x_indic": [193, 204], "x_embed": [193, 204], "repo": [193, 204], "card": [193, 204], "carddata": [193, 204], "267": [193, 204], "interact": [193, 204], "poll": [193, 204], "event": [193, 204], "correctli": [193, 204], "ideal": [193, 204], "process_batch_annotation_ui": [193, 204], "show_correct_class": [193, 204], "real": [193, 204], "skip_interact": [193, 204], "whitespac": [193, 204], "again": [193, 204], "normalize_text": [193, 204], "text_lin": [193, 204], "strip": [193, 204], "text_single_lin": [193, 204], "join": [193, 204], "wrapped_text": [193, 204], "70": [193, 204], "wait": [193, 204], "wait_for_interact": [193, 204], "global": [193, 204], "button_press": [193, 204], "sleep": [193, 204], "callback": [193, 204], "button_click": [193, 204], "connect": [193, 204], "button_c0": [193, 204], "tooltip": [193, 204], "on_click": [193, 204], "button_c1": [193, 204], "button_cr": [193, 204], "output_sampl": [193, 204], "summari": [193, 204], "output_stat": [193, 204], "output_plot": [193, 204], "vbox": [193, 204], "200px": [193, 204], "590px": [193, 204], "450px": [193, 204], "250px": [193, 204], "540px": [193, 204], "stats_box": [193, 204], "sample_box": [193, 204], "output_box": [193, 204], "learning_curv": [193, 204], "learning_curve_id": [193, 204], "x_indices_train": [193, 204], "num_annot_error": [193, 204], "num_total_annot": [193, 204], "set_xlabel": [193, 204], "set_ylabel": [193, 204], "bbox_to_anchor": [193, 204], "175": [193, 204], "clear_output": [193, 204], "batch_index": [193, 204], "query_index": [193, 204], "correct_class_str": [193, 204], "mark": [193, 204], "todo": [193, 204], "comment": [193, 204], "freeli": [193, 204], "ui": [193, 204], "x_indices_test": [193, 204], "y_train_id": [193, 204], "perfect": [193, 204], "affect": [193, 195, 196, 197, 204, 206, 207, 208], "num_annotation_error": [193, 204], "clear": [193, 204], "score_id": [193, 204], "introduct": [194, 205], "singleannotatorwrapp": [194, 205], "plot_annotator_util": [194, 205], "marker_s": [194, 205], "suppos": [194, 205], "omnisci": [194, 205], "tight_layout": [194, 205], "circl": [194, 205], "rng": [194, 205], "default_rng": [194, 205], "y_annot": [194, 205], "y_nois": [194, 205], "binomi": [194, 205], "is_tru": [194, 205], "singleannotwrapp": [194, 205], "achiev": [194, 205], "sa_q": [194, 205], "ma_q": [194, 205], "5th": [194, 205], "14th": [194, 205], "20th": [194, 205], "satur": [194, 205], "dequ": [195, 197, 206, 208], "ndimag": [195, 196, 197, 206, 207, 208], "gaussian_filter1d": [195, 196, 197, 206, 207, 208], "experi": [195, 196, 197, 206, 207, 208], "stream_length": [195, 196, 197, 206, 207, 208], "training_s": [195, 196, 197, 206, 207, 208], "init_train_length": [195, 196, 197, 206, 207, 208], "5000": [195, 196, 197, 206, 207, 208], "dedic": [195, 197, 206, 208], "explicitli": [195, 196, 197, 206, 207, 208], "get_randomse": [195, 196, 197, 206, 207, 208], "locat": [195, 196, 197, 206, 207, 208], "denot": [195, 196, 197, 206, 207, 208], "suffix": [195, 196, 197, 206, 207, 208], "_init": [195, 196, 197, 206, 207, 208], "_stream": [195, 196, 197, 206, 207, 208], "prequenti": [195, 196, 197, 206, 207, 208], "y_center": [195, 196, 197, 206, 207, 208], "managag": [195, 197, 206, 208], "sake": [195, 197, 206, 208], "clf_factori": [195, 196, 197, 206, 207, 208], "cogdqsran": [195, 197, 206, 208], "cogdqsfixun": [195, 197, 206, 208], "cogdqsvarun": [195, 197, 206, 208], "cogdqsranvarun": [195, 197, 206, 208], "goe": [195, 196, 197, 206, 207, 208], "lastli": [195, 196, 197, 206, 207, 208], "maxlen": [195, 197, 206, 208], "correct_classif": [195, 196, 197, 206, 207, 208, 209], "avg": [195, 196, 197, 206, 207, 208], "7642": [195, 206], "498": [195, 197, 206, 208], "7764": [195, 206], "7416": [195, 206], "7828": [195, 206], "7834": [195, 206], "521": [195, 197, 206, 208], "7966": [195, 206], "environ": [196, 207], "incom": [196, 207], "stream_batch_s": [196, 207], "clf_dict": [196, 207], "index_cand": [196, 207], "y_cand_tru": [196, 207], "x_train_arrai": [196, 207], "acquis": [196, 197, 207, 208], "806": [196, 207], "653": [196, 207], "7994": [196, 207], "8154": [196, 207], "796": [196, 207], "0x264b9891450": [196, 207], "gt": [196, 207], "slidingwindowclassifi": [197, 208], "river2sklclassifi": [197, 208], "forest": [197, 208], "arfclassifi": [197, 208], "pal": [197, 208], "7456": [197, 208], "727": [197, 208], "7746": [197, 208], "523": [197, 208], "7606": [197, 208], "7462": [197, 208], "7614": [197, 208], "gather": 209, "difficult": 209, "consum": 209, "expens": 209, "challeng": 209, "fewer": 209, "easiest": 209, "downgrad": 209, "encount": 209, "incompat": 209, "issu": 209, "requirements_max": 209, "broad": 209, "section": 209, "skorch": [209, 212], "river": [209, 212], "snippet": 209, "straightforward": 209, "substitut": 209, "document": 209, "greenish": 209, "orient": 209, "skactiveml2021": 209, "ibrari": 209, "oolbox": 209, "ctive": 209, "earn": 209, "lgorithm": 209, "marek": 209, "herd": 209, "tuan": 209, "pham": 209, "minh": 209, "benz": 209, "pascal": 209, "mergard": 209, "atal": 209, "roghman": 209, "sandrock": 209, "journal": 209, "preprint": 209, "doi": 209, "20944": 209, "preprints202103": 209, "0194": 209, "v1": 209, "year": 209, "url": 209, "54": 210, "589": 210, "57": 210, "throughout": 211}, "objects": {"": [[119, 0, 0, "-", "skactiveml"]], "skactiveml": [[119, 0, 0, "-", "base"], [119, 0, 0, "-", "classifier"], [119, 0, 0, "-", "exceptions"], [119, 0, 0, "-", "pool"], [119, 0, 0, "-", "stream"], [119, 0, 0, "-", "utils"], [119, 0, 0, "-", "visualization"]], "skactiveml.base": [[4, 1, 1, "", "AnnotatorModelMixin"], [5, 1, 1, "", "BudgetManager"], [6, 1, 1, "", "ClassFrequencyEstimator"], [7, 1, 1, "", "MultiAnnotatorPoolQueryStrategy"], [8, 1, 1, "", "ProbabilisticRegressor"], [9, 1, 1, "", "QueryStrategy"], [10, 1, 1, "", "SingleAnnotatorPoolQueryStrategy"], [11, 1, 1, "", "SingleAnnotatorStreamQueryStrategy"], [12, 1, 1, "", "SkactivemlClassifier"], [13, 1, 1, "", "SkactivemlRegressor"]], "skactiveml.base.AnnotatorModelMixin": [[4, 2, 1, "", "predict_annotator_perf"]], "skactiveml.base.BudgetManager": [[5, 2, 1, "", "get_metadata_routing"], [5, 2, 1, "", "get_params"], [5, 2, 1, "", "query_by_utility"], [5, 2, 1, "", "set_params"], [5, 2, 1, "", "update"]], "skactiveml.base.ClassFrequencyEstimator": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "get_metadata_routing"], [6, 2, 1, "", "get_params"], [6, 2, 1, "", "predict"], [6, 2, 1, "", "predict_freq"], [6, 2, 1, "", "predict_proba"], [6, 2, 1, "", "sample_proba"], [6, 2, 1, "", "score"], [6, 2, 1, "", "set_fit_request"], [6, 2, 1, "", "set_params"], [6, 2, 1, "", "set_score_request"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[7, 2, 1, "", "get_metadata_routing"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "query"], [7, 2, 1, "", "set_params"]], "skactiveml.base.ProbabilisticRegressor": [[8, 2, 1, "", "fit"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_target_distribution"], [8, 2, 1, "", "sample_y"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_predict_request"], [8, 2, 1, "", "set_score_request"]], "skactiveml.base.QueryStrategy": [[9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "query"], [9, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "query"], [10, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "query"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "update"]], "skactiveml.base.SkactivemlClassifier": [[12, 2, 1, "", "fit"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "skactiveml.base.SkactivemlRegressor": [[13, 2, 1, "", "fit"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"]], "skactiveml.classifier": [[14, 1, 1, "", "MixtureModelClassifier"], [15, 1, 1, "", "ParzenWindowClassifier"], [16, 1, 1, "", "SklearnClassifier"], [17, 1, 1, "", "SlidingWindowClassifier"], [119, 0, 0, "-", "multiannotator"]], "skactiveml.classifier.MixtureModelClassifier": [[14, 2, 1, "", "fit"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_freq"], [14, 2, 1, "", "predict_proba"], [14, 2, 1, "", "sample_proba"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "skactiveml.classifier.ParzenWindowClassifier": [[15, 3, 1, "", "METRICS"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_freq"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "sample_proba"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SklearnClassifier": [[16, 2, 1, "", "fit"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "partial_fit"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_partial_fit_request"], [16, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SlidingWindowClassifier": [[17, 2, 1, "", "fit"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "partial_fit"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_freq"], [17, 2, 1, "", "predict_proba"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_partial_fit_request"], [17, 2, 1, "", "set_score_request"]], "skactiveml.classifier.multiannotator": [[18, 1, 1, "", "AnnotatorEnsembleClassifier"], [19, 1, 1, "", "AnnotatorLogisticRegression"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[18, 2, 1, "", "fit"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 4, 1, "", "named_estimators"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_proba"], [18, 2, 1, "", "score"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_score_request"], [18, 3, 1, "", "steps"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[19, 2, 1, "", "fit"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_annotator_perf"], [19, 2, 1, "", "predict_proba"], [19, 2, 1, "", "score"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "set_score_request"]], "skactiveml.exceptions": [[20, 1, 1, "", "MappingError"]], "skactiveml.exceptions.MappingError": [[20, 3, 1, "", "args"], [20, 2, 1, "", "with_traceback"]], "skactiveml.pool": [[21, 1, 1, "", "Badge"], [22, 1, 1, "", "BatchBALD"], [23, 1, 1, "", "Clue"], [24, 1, 1, "", "ContrastiveAL"], [25, 1, 1, "", "CoreSet"], [26, 1, 1, "", "CostEmbeddingAL"], [27, 1, 1, "", "DiscriminativeAL"], [28, 1, 1, "", "DropQuery"], [29, 1, 1, "", "EpistemicUncertaintySampling"], [30, 1, 1, "", "ExpectedModelChangeMaximization"], [31, 1, 1, "", "ExpectedModelOutputChange"], [32, 1, 1, "", "ExpectedModelVarianceReduction"], [33, 1, 1, "", "Falcun"], [34, 1, 1, "", "FourDs"], [35, 1, 1, "", "GreedyBALD"], [36, 1, 1, "", "GreedySamplingTarget"], [37, 1, 1, "", "GreedySamplingX"], [38, 1, 1, "", "KLDivergenceMaximization"], [39, 1, 1, "", "MonteCarloEER"], [40, 1, 1, "", "ParallelUtilityEstimationWrapper"], [41, 1, 1, "", "ProbCover"], [42, 1, 1, "", "ProbabilisticAL"], [43, 1, 1, "", "QueryByCommittee"], [44, 1, 1, "", "Quire"], [45, 1, 1, "", "RandomSampling"], [46, 1, 1, "", "RegressionTreeBasedAL"], [47, 1, 1, "", "SubSamplingWrapper"], [48, 1, 1, "", "TypiClust"], [49, 1, 1, "", "UncertaintySampling"], [50, 1, 1, "", "ValueOfInformationEER"], [51, 5, 1, "", "average_kl_divergence"], [52, 5, 1, "", "batch_bald"], [53, 5, 1, "", "cost_reduction"], [54, 5, 1, "", "expected_average_precision"], [55, 5, 1, "", "k_greedy_center"], [119, 0, 0, "-", "multiannotator"], [59, 5, 1, "", "uncertainty_scores"], [119, 0, 0, "-", "utils"], [61, 5, 1, "", "variation_ratios"], [62, 5, 1, "", "vote_entropy"]], "skactiveml.pool.Badge": [[21, 2, 1, "", "get_metadata_routing"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "query"], [21, 2, 1, "", "set_params"]], "skactiveml.pool.BatchBALD": [[22, 2, 1, "", "get_metadata_routing"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "query"], [22, 2, 1, "", "set_params"]], "skactiveml.pool.Clue": [[23, 2, 1, "", "get_metadata_routing"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "query"], [23, 2, 1, "", "set_params"]], "skactiveml.pool.ContrastiveAL": [[24, 2, 1, "", "get_metadata_routing"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "query"], [24, 2, 1, "", "set_params"]], "skactiveml.pool.CoreSet": [[25, 2, 1, "", "get_metadata_routing"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "query"], [25, 2, 1, "", "set_params"]], "skactiveml.pool.CostEmbeddingAL": [[26, 2, 1, "", "get_metadata_routing"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "query"], [26, 2, 1, "", "set_params"]], "skactiveml.pool.DiscriminativeAL": [[27, 2, 1, "", "get_metadata_routing"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "query"], [27, 2, 1, "", "set_params"]], "skactiveml.pool.DropQuery": [[28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "query"], [28, 2, 1, "", "set_params"]], "skactiveml.pool.EpistemicUncertaintySampling": [[29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "query"], [29, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "query"], [30, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelOutputChange": [[31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "query"], [31, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "query"], [32, 2, 1, "", "set_params"]], "skactiveml.pool.Falcun": [[33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "query"], [33, 2, 1, "", "set_params"]], "skactiveml.pool.FourDs": [[34, 2, 1, "", "get_metadata_routing"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "query"], [34, 2, 1, "", "set_params"]], "skactiveml.pool.GreedyBALD": [[35, 2, 1, "", "get_metadata_routing"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "query"], [35, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingTarget": [[36, 2, 1, "", "get_metadata_routing"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "query"], [36, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingX": [[37, 2, 1, "", "get_metadata_routing"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "query"], [37, 2, 1, "", "set_params"]], "skactiveml.pool.KLDivergenceMaximization": [[38, 2, 1, "", "get_metadata_routing"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "query"], [38, 2, 1, "", "set_params"]], "skactiveml.pool.MonteCarloEER": [[39, 2, 1, "", "get_metadata_routing"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "query"], [39, 2, 1, "", "set_params"]], "skactiveml.pool.ParallelUtilityEstimationWrapper": [[40, 2, 1, "", "get_metadata_routing"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "query"], [40, 2, 1, "", "set_params"]], "skactiveml.pool.ProbCover": [[41, 2, 1, "", "get_metadata_routing"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "query"], [41, 2, 1, "", "set_params"]], "skactiveml.pool.ProbabilisticAL": [[42, 2, 1, "", "get_metadata_routing"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "query"], [42, 2, 1, "", "set_params"]], "skactiveml.pool.QueryByCommittee": [[43, 2, 1, "", "get_metadata_routing"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "query"], [43, 2, 1, "", "set_params"]], "skactiveml.pool.Quire": [[44, 3, 1, "", "METRICS"], [44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "query"], [44, 2, 1, "", "set_params"]], "skactiveml.pool.RandomSampling": [[45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "query"], [45, 2, 1, "", "set_params"]], "skactiveml.pool.RegressionTreeBasedAL": [[46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "query"], [46, 2, 1, "", "set_params"]], "skactiveml.pool.SubSamplingWrapper": [[47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "query"], [47, 2, 1, "", "set_params"]], "skactiveml.pool.TypiClust": [[48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "query"], [48, 2, 1, "", "set_params"]], "skactiveml.pool.UncertaintySampling": [[49, 2, 1, "", "get_metadata_routing"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "query"], [49, 2, 1, "", "set_params"]], "skactiveml.pool.ValueOfInformationEER": [[50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "query"], [50, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator": [[56, 1, 1, "", "IntervalEstimationAnnotModel"], [57, 1, 1, "", "IntervalEstimationThreshold"], [58, 1, 1, "", "SingleAnnotatorWrapper"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[56, 2, 1, "", "fit"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "predict_annotator_perf"], [56, 2, 1, "", "set_fit_request"], [56, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "query"], [57, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "query"], [58, 2, 1, "", "set_params"]], "skactiveml.pool.utils": [[60, 1, 1, "", "IndexClassifierWrapper"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[60, 2, 1, "", "fit"], [60, 2, 1, "", "is_fitted"], [60, 2, 1, "", "partial_fit"], [60, 2, 1, "", "precompute"], [60, 2, 1, "", "predict"], [60, 2, 1, "", "predict_freq"], [60, 2, 1, "", "predict_proba"]], "skactiveml.stream": [[63, 1, 1, "", "CognitiveDualQueryStrategy"], [64, 1, 1, "", "CognitiveDualQueryStrategyFixUn"], [65, 1, 1, "", "CognitiveDualQueryStrategyRan"], [66, 1, 1, "", "CognitiveDualQueryStrategyRanVarUn"], [67, 1, 1, "", "CognitiveDualQueryStrategyVarUn"], [68, 1, 1, "", "FixedUncertainty"], [69, 1, 1, "", "PeriodicSampling"], [70, 1, 1, "", "RandomVariableUncertainty"], [71, 1, 1, "", "Split"], [72, 1, 1, "", "StreamDensityBasedAL"], [73, 1, 1, "", "StreamProbabilisticAL"], [74, 1, 1, "", "StreamRandomSampling"], [75, 1, 1, "", "VariableUncertainty"], [119, 0, 0, "-", "budgetmanager"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 2, 1, "", "query"], [63, 2, 1, "", "set_params"], [63, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[64, 2, 1, "", "get_metadata_routing"], [64, 2, 1, "", "get_params"], [64, 2, 1, "", "query"], [64, 2, 1, "", "set_params"], [64, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[65, 2, 1, "", "get_metadata_routing"], [65, 2, 1, "", "get_params"], [65, 2, 1, "", "query"], [65, 2, 1, "", "set_params"], [65, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[66, 2, 1, "", "get_metadata_routing"], [66, 2, 1, "", "get_params"], [66, 2, 1, "", "query"], [66, 2, 1, "", "set_params"], [66, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[67, 2, 1, "", "get_metadata_routing"], [67, 2, 1, "", "get_params"], [67, 2, 1, "", "query"], [67, 2, 1, "", "set_params"], [67, 2, 1, "", "update"]], "skactiveml.stream.FixedUncertainty": [[68, 2, 1, "", "get_metadata_routing"], [68, 2, 1, "", "get_params"], [68, 2, 1, "", "query"], [68, 2, 1, "", "set_params"], [68, 2, 1, "", "update"]], "skactiveml.stream.PeriodicSampling": [[69, 2, 1, "", "get_metadata_routing"], [69, 2, 1, "", "get_params"], [69, 2, 1, "", "query"], [69, 2, 1, "", "set_params"], [69, 2, 1, "", "update"]], "skactiveml.stream.RandomVariableUncertainty": [[70, 2, 1, "", "get_metadata_routing"], [70, 2, 1, "", "get_params"], [70, 2, 1, "", "query"], [70, 2, 1, "", "set_params"], [70, 2, 1, "", "update"]], "skactiveml.stream.Split": [[71, 2, 1, "", "get_metadata_routing"], [71, 2, 1, "", "get_params"], [71, 2, 1, "", "query"], [71, 2, 1, "", "set_params"], [71, 2, 1, "", "update"]], "skactiveml.stream.StreamDensityBasedAL": [[72, 2, 1, "", "get_metadata_routing"], [72, 2, 1, "", "get_params"], [72, 2, 1, "", "query"], [72, 2, 1, "", "set_params"], [72, 2, 1, "", "update"]], "skactiveml.stream.StreamProbabilisticAL": [[73, 2, 1, "", "get_metadata_routing"], [73, 2, 1, "", "get_params"], [73, 2, 1, "", "query"], [73, 2, 1, "", "set_params"], [73, 2, 1, "", "update"]], "skactiveml.stream.StreamRandomSampling": [[74, 2, 1, "", "get_metadata_routing"], [74, 2, 1, "", "get_params"], [74, 2, 1, "", "query"], [74, 2, 1, "", "set_params"], [74, 2, 1, "", "update"]], "skactiveml.stream.VariableUncertainty": [[75, 2, 1, "", "get_metadata_routing"], [75, 2, 1, "", "get_params"], [75, 2, 1, "", "query"], [75, 2, 1, "", "set_params"], [75, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager": [[76, 1, 1, "", "BalancedIncrementalQuantileFilter"], [77, 1, 1, "", "DensityBasedSplitBudgetManager"], [78, 1, 1, "", "EstimatedBudgetZliobaite"], [79, 1, 1, "", "FixedUncertaintyBudgetManager"], [80, 1, 1, "", "RandomBudgetManager"], [81, 1, 1, "", "RandomVariableUncertaintyBudgetManager"], [82, 1, 1, "", "SplitBudgetManager"], [83, 1, 1, "", "VariableUncertaintyBudgetManager"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[76, 2, 1, "", "get_metadata_routing"], [76, 2, 1, "", "get_params"], [76, 2, 1, "", "query_by_utility"], [76, 2, 1, "", "set_params"], [76, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[77, 2, 1, "", "get_metadata_routing"], [77, 2, 1, "", "get_params"], [77, 2, 1, "", "query_by_utility"], [77, 2, 1, "", "set_params"], [77, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[78, 2, 1, "", "get_metadata_routing"], [78, 2, 1, "", "get_params"], [78, 2, 1, "", "query_by_utility"], [78, 2, 1, "", "set_params"], [78, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[79, 2, 1, "", "get_metadata_routing"], [79, 2, 1, "", "get_params"], [79, 2, 1, "", "query_by_utility"], [79, 2, 1, "", "set_params"], [79, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[80, 2, 1, "", "get_metadata_routing"], [80, 2, 1, "", "get_params"], [80, 2, 1, "", "query_by_utility"], [80, 2, 1, "", "set_params"], [80, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[81, 2, 1, "", "get_metadata_routing"], [81, 2, 1, "", "get_params"], [81, 2, 1, "", "query_by_utility"], [81, 2, 1, "", "set_params"], [81, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[82, 2, 1, "", "get_metadata_routing"], [82, 2, 1, "", "get_params"], [82, 2, 1, "", "query_by_utility"], [82, 2, 1, "", "set_params"], [82, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[83, 2, 1, "", "get_metadata_routing"], [83, 2, 1, "", "get_params"], [83, 2, 1, "", "query_by_utility"], [83, 2, 1, "", "set_params"], [83, 2, 1, "", "update"]], "skactiveml.utils": [[84, 1, 1, "", "ExtLabelEncoder"], [85, 5, 1, "", "_check_callable"], [86, 5, 1, "", "call_func"], [87, 5, 1, "", "check_X_y"], [88, 5, 1, "", "check_bound"], [89, 5, 1, "", "check_budget_manager"], [90, 5, 1, "", "check_class_prior"], [91, 5, 1, "", "check_classes"], [92, 5, 1, "", "check_classifier_params"], [93, 5, 1, "", "check_cost_matrix"], [94, 5, 1, "", "check_equal_missing_label"], [95, 5, 1, "", "check_indices"], [96, 5, 1, "", "check_missing_label"], [97, 5, 1, "", "check_n_features"], [98, 5, 1, "", "check_random_state"], [99, 5, 1, "", "check_scalar"], [100, 5, 1, "", "check_type"], [101, 5, 1, "", "compute_vote_vectors"], [102, 5, 1, "", "ext_confusion_matrix"], [103, 5, 1, "", "is_labeled"], [104, 5, 1, "", "is_unlabeled"], [105, 5, 1, "", "labeled_indices"], [106, 5, 1, "", "majority_vote"], [107, 5, 1, "", "match_signature"], [108, 5, 1, "", "rand_argmax"], [109, 5, 1, "", "rand_argmin"], [110, 5, 1, "", "simple_batch"], [111, 5, 1, "", "unlabeled_indices"]], "skactiveml.utils.ExtLabelEncoder": [[84, 2, 1, "", "fit"], [84, 2, 1, "", "fit_transform"], [84, 2, 1, "", "get_metadata_routing"], [84, 2, 1, "", "get_params"], [84, 2, 1, "", "inverse_transform"], [84, 2, 1, "", "set_params"], [84, 2, 1, "", "transform"]], "skactiveml.visualization": [[112, 5, 1, "", "mesh"], [113, 5, 1, "", "plot_annotator_utilities"], [114, 5, 1, "", "plot_contour_for_samples"], [115, 5, 1, "", "plot_decision_boundary"], [116, 5, 1, "", "plot_stream_decision_boundary"], [117, 5, 1, "", "plot_stream_training_data"], [118, 5, 1, "", "plot_utilities"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "guid": 0, "overview": [0, 186, 209], "thank": 0, "you": 0, "contributor": 0, "get": [0, 187, 189, 194, 195, 198, 200, 205, 206], "help": 0, "roadmap": 0, "start": [0, 187, 189, 190, 194, 195, 196, 197, 198, 200, 201, 205, 206, 207, 208], "setup": 0, "develop": 0, "environ": 0, "exampl": [0, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 103, 105, 110, 111, 114, 115, 116, 117, 118, 120, 123, 154, 209, 211], "miniconda": 0, "instal": [0, 209], "depend": 0, "maco": 0, "homebrew": 0, "code": 0, "gener": [0, 187, 189, 191, 194, 195, 196, 197, 198, 200, 202, 205, 206, 207, 208], "convent": 0, "cycl": [0, 187, 193, 195, 196, 197, 198, 204, 206, 207, 208], "c3": 0, "pull": 0, "request": 0, "queri": [0, 132, 150, 151, 152, 153, 154, 173, 174, 175, 176, 187, 191, 192, 195, 196, 197, 198, 202, 203, 206, 207, 208, 209], "strategi": [0, 2, 3, 121, 122, 123, 124, 162, 172, 173, 174, 175, 176, 186, 187, 191, 192, 195, 196, 197, 198, 202, 203, 206, 207, 208, 209], "singl": 0, "annot": [0, 190, 193, 194, 201, 204, 205], "pool": [0, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 119, 121, 123, 124, 186, 187, 188, 189, 191, 194, 196, 198, 199, 200, 202, 205, 207, 209], "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 119, 121, 122, 123, 124, 144, 156, 157, 158, 172, 181, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208, 209], "__init__": 0, "method": 0, "advic": 0, "test": 0, "classifi": [0, 14, 15, 16, 17, 18, 19, 119], "regressor": 0, "model": [0, 134, 135, 136, 191, 192, 202, 203], "coverag": [0, 148], "document": 0, "build": 0, "issu": 0, "track": 0, "check": 0, "If": 0, "bug": 0, "alreadi": 0, "exist": 0, "report": 0, "an": 0, "al": [2, 3, 121, 122, 123, 124, 156, 157, 158, 172], "stream": [3, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 119, 122, 123, 172, 181, 183, 186, 195, 196, 197, 206, 207, 208, 209], "skactiveml": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 211], "annotatormodelmixin": 4, "budgetmanag": [5, 76, 77, 78, 79, 80, 81, 82, 83, 119], "classfrequencyestim": 6, "us": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 103, 105, 110, 111, 114, 115, 116, 117, 118, 193, 204, 211], "multiannotatorpoolquerystrategi": 7, "probabilisticregressor": 8, "querystrategi": 9, "singleannotatorpoolquerystrategi": 10, "singleannotatorstreamquerystrategi": 11, "skactivemlclassifi": 12, "skactivemlregressor": 13, "paramet": [13, 191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "mixturemodelclassifi": 14, "parzenwindowclassifi": 15, "sklearnclassifi": 16, "slidingwindowclassifi": 17, "multiannot": [18, 19, 56, 57, 58, 119], "annotatorensembleclassifi": 18, "annotatorlogisticregress": 19, "except": [20, 119], "mappingerror": 20, "badg": [21, 125], "batchbald": [22, 126], "clue": [23, 127], "contrastiv": 24, "coreset": 25, "costembedding": 26, "discriminativ": 27, "dropqueri": [28, 132], "epistemicuncertaintysampl": 29, "expectedmodelchangemaxim": 30, "expectedmodeloutputchang": 31, "expectedmodelvariancereduct": 32, "falcun": [33, 137], "fourd": 34, "greedybald": 35, "greedysamplingtarget": 36, "greedysamplingx": 37, "kldivergencemaxim": 38, "montecarlo": 39, "parallelutilityestimationwrapp": 40, "probcov": [41, 148], "probabilist": [42, 149, 182], "querybycommitte": 43, "quir": 44, "randomsampl": 45, "regressiontreebased": 46, "subsamplingwrapp": 47, "typiclust": [48, 160], "uncertaintysampl": 49, "valueofinformation": 50, "average_kl_diverg": 51, "batch_bald": 52, "cost_reduct": 53, "expected_average_precis": 54, "k_greedy_cent": 55, "intervalestimationannotmodel": 56, "intervalestimationthreshold": 57, "singleannotatorwrapp": 58, "uncertainty_scor": 59, "util": [60, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 119, 147, 211], "indexclassifierwrapp": 60, "variation_ratio": 61, "vote_entropi": 62, "cognitivedualquerystrategi": 63, "cognitivedualquerystrategyfixun": 64, "cognitivedualquerystrategyran": 65, "cognitivedualquerystrategyranvarun": 66, "cognitivedualquerystrategyvarun": 67, "fixeduncertainti": 68, "periodicsampl": 69, "randomvariableuncertainti": 70, "split": [71, 180], "streamdensitybased": 72, "streamprobabilist": 73, "streamrandomsampl": 74, "variableuncertainti": 75, "balancedincrementalquantilefilt": 76, "densitybasedsplitbudgetmanag": 77, "estimatedbudgetzliobait": 78, "fixeduncertaintybudgetmanag": 79, "randombudgetmanag": 80, "randomvariableuncertaintybudgetmanag": 81, "splitbudgetmanag": 82, "variableuncertaintybudgetmanag": 83, "extlabelencod": 84, "_check_cal": 85, "call_func": 86, "check_x_i": 87, "check_bound": 88, "check_budget_manag": 89, "check_class_prior": 90, "check_class": 91, "check_classifier_param": 92, "check_cost_matrix": 93, "check_equal_missing_label": 94, "check_indic": 95, "check_missing_label": 96, "check_n_featur": 97, "check_random_st": 98, "check_scalar": 99, "check_typ": 100, "compute_vote_vector": 101, "ext_confusion_matrix": 102, "is_label": 103, "is_unlabel": 104, "labeled_indic": 105, "majority_vot": 106, "match_signatur": 107, "rand_argmax": 108, "rand_argmin": 109, "simple_batch": 110, "unlabeled_indic": 111, "visual": [112, 113, 114, 115, 116, 117, 118, 119, 188, 199], "mesh": 112, "plot_annotator_util": 113, "plot_contour_for_sampl": 114, "plot_decision_boundari": 115, "plot_stream_decision_boundari": 116, "plot_stream_training_data": 117, "plot_util": 118, "api": 119, "refer": [119, 186], "class": [119, 149, 190, 201], "function": 119, "batch": [125, 126, 138, 196, 207], "activ": [125, 126, 128, 130, 131, 137, 140, 149, 156, 157, 158, 162, 181, 182, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209], "learn": [125, 126, 128, 130, 131, 137, 140, 149, 156, 157, 158, 162, 181, 182, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209], "divers": [125, 138, 139, 156], "gradient": 125, "embed": [125, 127, 130, 193, 204], "bayesian": [126, 140], "disagr": [126, 140], "cluster": [127, 160], "uncertainti": [127, 133, 137, 161, 164, 165, 166, 173, 175, 176, 177, 179, 184], "weight": [127, 161], "contrast": [128, 137], "cal": 128, "core": 129, "set": [129, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 202, 205, 206, 207, 208], "cost": 130, "discrimin": 131, "dropout": 132, "epistem": 133, "sampl": [133, 138, 139, 141, 142, 143, 155, 159, 161, 164, 165, 166, 168, 169, 174, 178, 183, 190, 201], "expect": [134, 135, 136, 163], "chang": [134, 135], "maxim": [134, 144], "output": 135, "varianc": [136, 150], "reduct": 136, "fast": 137, "densiti": [138, 139, 161, 181], "distribut": [138, 139], "distanc": [138, 139], "bald": 140, "greedi": [141, 142, 143], "target": 141, "space": [141, 143], "gsy": 141, "improv": 142, "gsi": 142, "featur": 143, "gsx": 143, "regress": [144, 156, 157, 158, 189, 200], "kullback": [144, 151], "leibler": [144, 151], "diverg": [144, 151], "mont": [145, 146], "carlo": [145, 146], "eer": [145, 146], "log": 145, "loss": [145, 146], "misclassif": 146, "parallel": 147, "estim": 147, "wrapper": [147, 159, 186], "probabl": 148, "multi": [149, 194, 205], "committe": [150, 151, 152, 153], "qbc": [150, 151, 152, 153], "empir": 150, "variat": 152, "ratio": 152, "vote": 153, "entropi": [153, 164], "inform": [154, 167, 168, 169, 186], "repres": [154, 158, 186], "random": [155, 157, 174, 175, 179, 183, 191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "tree": [156, 157, 158], "rt": [156, 157, 158], "select": [156, 157, 158], "sub": 159, "typic": 160, "dual": [162, 173, 174, 175, 176], "averag": 163, "precis": 163, "least": 165, "confid": 165, "margin": 166, "valu": [167, 168, 169], "label": 168, "unlabel": 169, "comput": [170, 171, 185, 210], "time": [170, 171, 185, 210], "cognit": [173, 174, 175, 176], "fix": [173, 177], "variabl": [175, 176, 179, 184], "period": 178, "data": [181, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 203, 205, 206, 207, 208], "datastream": 182, "baselin": 186, "hybrid": 186, "classif": [187, 188, 191, 192, 194, 198, 199, 202, 203, 205], "deep": [188, 199], "scikit": [188, 199, 209], "activeml": [188, 199, 209], "skorch": [188, 199], "load": [188, 192, 199, 203], "digit": [188, 199], "augment": [188, 199], "convolut": [188, 199], "neural": [188, 199], "network": [188, 199], "ensembl": [188, 199], "result": [188, 191, 192, 199, 202, 203], "The": [190, 201], "widget": [190, 201], "creat": [190, 201], "dataset": [190, 192, 193, 201, 203, 204], "process": [190, 201], "simpl": [191, 202], "evalu": [191, 202], "studi": [191, 202], "seed": [191, 192, 195, 196, 197, 202, 203, 206, 207, 208], "manag": [191, 192, 202, 203], "experi": [191, 192, 202, 203], "loop": [191, 192, 202, 203], "plot": [191, 192, 202, 203], "imag": [192, 203], "via": [192, 203], "self": [192, 203], "supervis": [192, 203], "prepar": [192, 203], "dinov2": [192, 203], "your": [192, 203], "preprocess": [192, 203], "paper": [193, 204], "tool": [193, 204], "text": [193, 204], "user": [193, 204, 209], "interfac": [193, 204], "initi": [195, 196, 197, 206, 207, 208], "And": [195, 196, 206, 207], "river": [197, 208], "A": 209, "librari": 209, "toolbox": 209, "algorithm": 209, "cite": 209, "indic": 209, "tabl": 209, "missing_label": 211, "tutori": 212}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "nbsphinx": 4, "copy_sphinx_gallery_notebooks": 1, "sphinx": 57}, "alltitles": {"Contributing Guide": [[0, "contributing-guide"]], "Overview": [[0, "overview"]], "Thank You, Contributors!": [[0, "thank-you-contributors"]], "Getting Help": [[0, "getting-help"]], "Roadmap": [[0, "roadmap"]], "Get Started": [[0, "get-started"]], "Setup Development Environment": [[0, "setup-development-environment"]], "Example with miniconda": [[0, "example-with-miniconda"]], "Install Dependencies": [[0, "install-dependencies"]], "Example with macOS (Homebrew)": [[0, "example-with-macos-homebrew"]], "Contributing Code": [[0, "contributing-code"]], "General Coding Conventions": [[0, "general-coding-conventions"]], "Example for Code Contribution Cycle (C3) and Pull Requests": [[0, "example-for-code-contribution-cycle-c3-and-pull-requests"]], "Query Strategies": [[0, "query-strategies"]], "Single-annotator Pool-based Query Strategies": [[0, "single-annotator-pool-based-query-strategies"]], "General": [[0, "general"]], "__init__ Method": [[0, "init-method"]], "query Method": [[0, "query-method"]], "General Advice": [[0, "general-advice"]], "Testing": [[0, "testing"]], "Classifiers": [[0, "classifiers"]], "Regressors": [[0, "regressors"]], "Annotator Models": [[0, "annotator-models"]], "Examples": [[0, "examples"], [1, "examples"], [120, "examples"], [123, "examples"], [209, "examples"]], "Testing and Code Coverage": [[0, "testing-and-code-coverage"]], "Documentation": [[0, "documentation"]], "Building the Documentation": [[0, "building-the-documentation"]], "Issue Tracking": [[0, "issue-tracking"]], "Checking If a Bug Already Exists": [[0, "checking-if-a-bug-already-exists"]], "Reporting an Issue": [[0, "reporting-an-issue"]], "Pool Based AL Strategies": [[2, "pool-based-al-strategies"], [121, "pool-based-al-strategies"], [123, "pool-based-al-strategies"], [124, "pool-based-al-strategies"]], "Stream Based AL Strategies": [[3, "stream-based-al-strategies"], [122, "stream-based-al-strategies"], [123, "stream-based-al-strategies"], [172, "stream-based-al-strategies"]], "skactiveml.base.AnnotatorModelMixin": [[4, "skactiveml-base-annotatormodelmixin"]], "skactiveml.base.BudgetManager": [[5, "skactiveml-base-budgetmanager"]], "skactiveml.base.ClassFrequencyEstimator": [[6, "skactiveml-base-classfrequencyestimator"]], "Examples using skactiveml.base.ClassFrequencyEstimator": [[6, "examples-using-skactiveml-base-classfrequencyestimator"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[7, "skactiveml-base-multiannotatorpoolquerystrategy"]], "skactiveml.base.ProbabilisticRegressor": [[8, "skactiveml-base-probabilisticregressor"]], "Examples using skactiveml.base.ProbabilisticRegressor": [[8, "examples-using-skactiveml-base-probabilisticregressor"]], "skactiveml.base.QueryStrategy": [[9, "skactiveml-base-querystrategy"]], "Examples using skactiveml.base.QueryStrategy": [[9, "examples-using-skactiveml-base-querystrategy"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, "skactiveml-base-singleannotatorpoolquerystrategy"]], "Examples using skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, "examples-using-skactiveml-base-singleannotatorpoolquerystrategy"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, "skactiveml-base-singleannotatorstreamquerystrategy"]], "Examples using skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, "examples-using-skactiveml-base-singleannotatorstreamquerystrategy"]], "skactiveml.base.SkactivemlClassifier": [[12, "skactiveml-base-skactivemlclassifier"]], "Examples using skactiveml.base.SkactivemlClassifier": [[12, "examples-using-skactiveml-base-skactivemlclassifier"]], "skactiveml.base.SkactivemlRegressor": [[13, "skactiveml-base-skactivemlregressor"]], "Parameters": [[13, "parameters"]], "Examples using skactiveml.base.SkactivemlRegressor": [[13, "examples-using-skactiveml-base-skactivemlregressor"]], "skactiveml.classifier.MixtureModelClassifier": [[14, "skactiveml-classifier-mixturemodelclassifier"]], "Examples using skactiveml.classifier.MixtureModelClassifier": [[14, "examples-using-skactiveml-classifier-mixturemodelclassifier"]], "skactiveml.classifier.ParzenWindowClassifier": [[15, "skactiveml-classifier-parzenwindowclassifier"]], "Examples using skactiveml.classifier.ParzenWindowClassifier": [[15, "examples-using-skactiveml-classifier-parzenwindowclassifier"]], "skactiveml.classifier.SklearnClassifier": [[16, "skactiveml-classifier-sklearnclassifier"]], "Examples using skactiveml.classifier.SklearnClassifier": [[16, "examples-using-skactiveml-classifier-sklearnclassifier"]], "skactiveml.classifier.SlidingWindowClassifier": [[17, "skactiveml-classifier-slidingwindowclassifier"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[18, "skactiveml-classifier-multiannotator-annotatorensembleclassifier"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[19, "skactiveml-classifier-multiannotator-annotatorlogisticregression"]], "skactiveml.exceptions.MappingError": [[20, "skactiveml-exceptions-mappingerror"]], "skactiveml.pool.Badge": [[21, "skactiveml-pool-badge"]], "Examples using skactiveml.pool.Badge": [[21, "examples-using-skactiveml-pool-badge"]], "skactiveml.pool.BatchBALD": [[22, "skactiveml-pool-batchbald"]], "Examples using skactiveml.pool.BatchBALD": [[22, "examples-using-skactiveml-pool-batchbald"]], "skactiveml.pool.Clue": [[23, "skactiveml-pool-clue"]], "Examples using skactiveml.pool.Clue": [[23, "examples-using-skactiveml-pool-clue"]], "skactiveml.pool.ContrastiveAL": [[24, "skactiveml-pool-contrastiveal"]], "Examples using skactiveml.pool.ContrastiveAL": [[24, "examples-using-skactiveml-pool-contrastiveal"]], "skactiveml.pool.CoreSet": [[25, "skactiveml-pool-coreset"]], "Examples using skactiveml.pool.CoreSet": [[25, "examples-using-skactiveml-pool-coreset"]], "skactiveml.pool.CostEmbeddingAL": [[26, "skactiveml-pool-costembeddingal"]], "Examples using skactiveml.pool.CostEmbeddingAL": [[26, "examples-using-skactiveml-pool-costembeddingal"]], "skactiveml.pool.DiscriminativeAL": [[27, "skactiveml-pool-discriminativeal"]], "Examples using skactiveml.pool.DiscriminativeAL": [[27, "examples-using-skactiveml-pool-discriminativeal"]], "skactiveml.pool.DropQuery": [[28, "skactiveml-pool-dropquery"]], "Examples using skactiveml.pool.DropQuery": [[28, "examples-using-skactiveml-pool-dropquery"]], "skactiveml.pool.EpistemicUncertaintySampling": [[29, "skactiveml-pool-epistemicuncertaintysampling"]], "Examples using skactiveml.pool.EpistemicUncertaintySampling": [[29, "examples-using-skactiveml-pool-epistemicuncertaintysampling"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[30, "skactiveml-pool-expectedmodelchangemaximization"]], "Examples using skactiveml.pool.ExpectedModelChangeMaximization": [[30, "examples-using-skactiveml-pool-expectedmodelchangemaximization"]], "skactiveml.pool.ExpectedModelOutputChange": [[31, "skactiveml-pool-expectedmodeloutputchange"]], "Examples using skactiveml.pool.ExpectedModelOutputChange": [[31, "examples-using-skactiveml-pool-expectedmodeloutputchange"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[32, "skactiveml-pool-expectedmodelvariancereduction"]], "Examples using skactiveml.pool.ExpectedModelVarianceReduction": [[32, "examples-using-skactiveml-pool-expectedmodelvariancereduction"]], "skactiveml.pool.Falcun": [[33, "skactiveml-pool-falcun"]], "Examples using skactiveml.pool.Falcun": [[33, "examples-using-skactiveml-pool-falcun"]], "skactiveml.pool.FourDs": [[34, "skactiveml-pool-fourds"]], "Examples using skactiveml.pool.FourDs": [[34, "examples-using-skactiveml-pool-fourds"]], "skactiveml.pool.GreedyBALD": [[35, "skactiveml-pool-greedybald"]], "Examples using skactiveml.pool.GreedyBALD": [[35, "examples-using-skactiveml-pool-greedybald"]], "skactiveml.pool.GreedySamplingTarget": [[36, "skactiveml-pool-greedysamplingtarget"]], "Examples using skactiveml.pool.GreedySamplingTarget": [[36, "examples-using-skactiveml-pool-greedysamplingtarget"]], "skactiveml.pool.GreedySamplingX": [[37, "skactiveml-pool-greedysamplingx"]], "Examples using skactiveml.pool.GreedySamplingX": [[37, "examples-using-skactiveml-pool-greedysamplingx"]], "skactiveml.pool.KLDivergenceMaximization": [[38, "skactiveml-pool-kldivergencemaximization"]], "Examples using skactiveml.pool.KLDivergenceMaximization": [[38, "examples-using-skactiveml-pool-kldivergencemaximization"]], "skactiveml.pool.MonteCarloEER": [[39, "skactiveml-pool-montecarloeer"]], "Examples using skactiveml.pool.MonteCarloEER": [[39, "examples-using-skactiveml-pool-montecarloeer"]], "skactiveml.pool.ParallelUtilityEstimationWrapper": [[40, "skactiveml-pool-parallelutilityestimationwrapper"]], "Examples using skactiveml.pool.ParallelUtilityEstimationWrapper": [[40, "examples-using-skactiveml-pool-parallelutilityestimationwrapper"]], "skactiveml.pool.ProbCover": [[41, "skactiveml-pool-probcover"]], "Examples using skactiveml.pool.ProbCover": [[41, "examples-using-skactiveml-pool-probcover"]], "skactiveml.pool.ProbabilisticAL": [[42, "skactiveml-pool-probabilistical"]], "Examples using skactiveml.pool.ProbabilisticAL": [[42, "examples-using-skactiveml-pool-probabilistical"]], "skactiveml.pool.QueryByCommittee": [[43, "skactiveml-pool-querybycommittee"]], "Examples using skactiveml.pool.QueryByCommittee": [[43, "examples-using-skactiveml-pool-querybycommittee"]], "skactiveml.pool.Quire": [[44, "skactiveml-pool-quire"]], "Examples using skactiveml.pool.Quire": [[44, "examples-using-skactiveml-pool-quire"]], "skactiveml.pool.RandomSampling": [[45, "skactiveml-pool-randomsampling"]], "Examples using skactiveml.pool.RandomSampling": [[45, "examples-using-skactiveml-pool-randomsampling"]], "skactiveml.pool.RegressionTreeBasedAL": [[46, "skactiveml-pool-regressiontreebasedal"]], "Examples using skactiveml.pool.RegressionTreeBasedAL": [[46, "examples-using-skactiveml-pool-regressiontreebasedal"]], "skactiveml.pool.SubSamplingWrapper": [[47, "skactiveml-pool-subsamplingwrapper"]], "Examples using skactiveml.pool.SubSamplingWrapper": [[47, "examples-using-skactiveml-pool-subsamplingwrapper"]], "skactiveml.pool.TypiClust": [[48, "skactiveml-pool-typiclust"]], "Examples using skactiveml.pool.TypiClust": [[48, "examples-using-skactiveml-pool-typiclust"]], "skactiveml.pool.UncertaintySampling": [[49, "skactiveml-pool-uncertaintysampling"]], "Examples using skactiveml.pool.UncertaintySampling": [[49, "examples-using-skactiveml-pool-uncertaintysampling"]], "skactiveml.pool.ValueOfInformationEER": [[50, "skactiveml-pool-valueofinformationeer"]], "Examples using skactiveml.pool.ValueOfInformationEER": [[50, "examples-using-skactiveml-pool-valueofinformationeer"]], "skactiveml.pool.average_kl_divergence": [[51, "skactiveml-pool-average-kl-divergence"]], "skactiveml.pool.batch_bald": [[52, "skactiveml-pool-batch-bald"]], "skactiveml.pool.cost_reduction": [[53, "skactiveml-pool-cost-reduction"]], "skactiveml.pool.expected_average_precision": [[54, "skactiveml-pool-expected-average-precision"]], "skactiveml.pool.k_greedy_center": [[55, "skactiveml-pool-k-greedy-center"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[56, "skactiveml-pool-multiannotator-intervalestimationannotmodel"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[57, "skactiveml-pool-multiannotator-intervalestimationthreshold"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[58, "skactiveml-pool-multiannotator-singleannotatorwrapper"]], "skactiveml.pool.uncertainty_scores": [[59, "skactiveml-pool-uncertainty-scores"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[60, "skactiveml-pool-utils-indexclassifierwrapper"]], "skactiveml.pool.variation_ratios": [[61, "skactiveml-pool-variation-ratios"]], "skactiveml.pool.vote_entropy": [[62, "skactiveml-pool-vote-entropy"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[63, "skactiveml-stream-cognitivedualquerystrategy"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategy": [[63, "examples-using-skactiveml-stream-cognitivedualquerystrategy"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[64, "skactiveml-stream-cognitivedualquerystrategyfixun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[64, "examples-using-skactiveml-stream-cognitivedualquerystrategyfixun"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[65, "skactiveml-stream-cognitivedualquerystrategyran"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyRan": [[65, "examples-using-skactiveml-stream-cognitivedualquerystrategyran"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[66, "skactiveml-stream-cognitivedualquerystrategyranvarun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[66, "examples-using-skactiveml-stream-cognitivedualquerystrategyranvarun"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[67, "skactiveml-stream-cognitivedualquerystrategyvarun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[67, "examples-using-skactiveml-stream-cognitivedualquerystrategyvarun"]], "skactiveml.stream.FixedUncertainty": [[68, "skactiveml-stream-fixeduncertainty"]], "Examples using skactiveml.stream.FixedUncertainty": [[68, "examples-using-skactiveml-stream-fixeduncertainty"]], "skactiveml.stream.PeriodicSampling": [[69, "skactiveml-stream-periodicsampling"]], "Examples using skactiveml.stream.PeriodicSampling": [[69, "examples-using-skactiveml-stream-periodicsampling"]], "skactiveml.stream.RandomVariableUncertainty": [[70, "skactiveml-stream-randomvariableuncertainty"]], "Examples using skactiveml.stream.RandomVariableUncertainty": [[70, "examples-using-skactiveml-stream-randomvariableuncertainty"]], "skactiveml.stream.Split": [[71, "skactiveml-stream-split"]], "Examples using skactiveml.stream.Split": [[71, "examples-using-skactiveml-stream-split"]], "skactiveml.stream.StreamDensityBasedAL": [[72, "skactiveml-stream-streamdensitybasedal"]], "Examples using skactiveml.stream.StreamDensityBasedAL": [[72, "examples-using-skactiveml-stream-streamdensitybasedal"]], "skactiveml.stream.StreamProbabilisticAL": [[73, "skactiveml-stream-streamprobabilistical"]], "Examples using skactiveml.stream.StreamProbabilisticAL": [[73, "examples-using-skactiveml-stream-streamprobabilistical"]], "skactiveml.stream.StreamRandomSampling": [[74, "skactiveml-stream-streamrandomsampling"]], "Examples using skactiveml.stream.StreamRandomSampling": [[74, "examples-using-skactiveml-stream-streamrandomsampling"]], "skactiveml.stream.VariableUncertainty": [[75, "skactiveml-stream-variableuncertainty"]], "Examples using skactiveml.stream.VariableUncertainty": [[75, "examples-using-skactiveml-stream-variableuncertainty"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[76, "skactiveml-stream-budgetmanager-balancedincrementalquantilefilter"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[77, "skactiveml-stream-budgetmanager-densitybasedsplitbudgetmanager"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[78, "skactiveml-stream-budgetmanager-estimatedbudgetzliobaite"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[79, "skactiveml-stream-budgetmanager-fixeduncertaintybudgetmanager"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[80, "skactiveml-stream-budgetmanager-randombudgetmanager"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[81, "skactiveml-stream-budgetmanager-randomvariableuncertaintybudgetmanager"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[82, "skactiveml-stream-budgetmanager-splitbudgetmanager"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[83, "skactiveml-stream-budgetmanager-variableuncertaintybudgetmanager"]], "skactiveml.utils.ExtLabelEncoder": [[84, "skactiveml-utils-extlabelencoder"]], "skactiveml.utils._check_callable": [[85, "skactiveml-utils-check-callable"]], "skactiveml.utils.call_func": [[86, "skactiveml-utils-call-func"]], "skactiveml.utils.check_X_y": [[87, "skactiveml-utils-check-x-y"]], "skactiveml.utils.check_bound": [[88, "skactiveml-utils-check-bound"]], "skactiveml.utils.check_budget_manager": [[89, "skactiveml-utils-check-budget-manager"]], "skactiveml.utils.check_class_prior": [[90, "skactiveml-utils-check-class-prior"]], "skactiveml.utils.check_classes": [[91, "skactiveml-utils-check-classes"]], "skactiveml.utils.check_classifier_params": [[92, "skactiveml-utils-check-classifier-params"]], "skactiveml.utils.check_cost_matrix": [[93, "skactiveml-utils-check-cost-matrix"]], "skactiveml.utils.check_equal_missing_label": [[94, "skactiveml-utils-check-equal-missing-label"]], "skactiveml.utils.check_indices": [[95, "skactiveml-utils-check-indices"]], "skactiveml.utils.check_missing_label": [[96, "skactiveml-utils-check-missing-label"]], "skactiveml.utils.check_n_features": [[97, "skactiveml-utils-check-n-features"]], "skactiveml.utils.check_random_state": [[98, "skactiveml-utils-check-random-state"]], "skactiveml.utils.check_scalar": [[99, "skactiveml-utils-check-scalar"]], "skactiveml.utils.check_type": [[100, "skactiveml-utils-check-type"]], "skactiveml.utils.compute_vote_vectors": [[101, "skactiveml-utils-compute-vote-vectors"]], "skactiveml.utils.ext_confusion_matrix": [[102, "skactiveml-utils-ext-confusion-matrix"]], "skactiveml.utils.is_labeled": [[103, "skactiveml-utils-is-labeled"]], "Examples using skactiveml.utils.is_labeled": [[103, "examples-using-skactiveml-utils-is-labeled"]], "skactiveml.utils.is_unlabeled": [[104, "skactiveml-utils-is-unlabeled"]], "skactiveml.utils.labeled_indices": [[105, "skactiveml-utils-labeled-indices"]], "Examples using skactiveml.utils.labeled_indices": [[105, "examples-using-skactiveml-utils-labeled-indices"]], "skactiveml.utils.majority_vote": [[106, "skactiveml-utils-majority-vote"]], "skactiveml.utils.match_signature": [[107, "skactiveml-utils-match-signature"]], "skactiveml.utils.rand_argmax": [[108, "skactiveml-utils-rand-argmax"]], "skactiveml.utils.rand_argmin": [[109, "skactiveml-utils-rand-argmin"]], "skactiveml.utils.simple_batch": [[110, "skactiveml-utils-simple-batch"]], "Examples using skactiveml.utils.simple_batch": [[110, "examples-using-skactiveml-utils-simple-batch"]], "skactiveml.utils.unlabeled_indices": [[111, "skactiveml-utils-unlabeled-indices"]], "Examples using skactiveml.utils.unlabeled_indices": [[111, "examples-using-skactiveml-utils-unlabeled-indices"]], "skactiveml.visualization.mesh": [[112, "skactiveml-visualization-mesh"]], "skactiveml.visualization.plot_annotator_utilities": [[113, "skactiveml-visualization-plot-annotator-utilities"]], "skactiveml.visualization.plot_contour_for_samples": [[114, "skactiveml-visualization-plot-contour-for-samples"]], "Examples using skactiveml.visualization.plot_contour_for_samples": [[114, "examples-using-skactiveml-visualization-plot-contour-for-samples"]], "skactiveml.visualization.plot_decision_boundary": [[115, "skactiveml-visualization-plot-decision-boundary"]], "Examples using skactiveml.visualization.plot_decision_boundary": [[115, "examples-using-skactiveml-visualization-plot-decision-boundary"]], "skactiveml.visualization.plot_stream_decision_boundary": [[116, "skactiveml-visualization-plot-stream-decision-boundary"]], "Examples using skactiveml.visualization.plot_stream_decision_boundary": [[116, "examples-using-skactiveml-visualization-plot-stream-decision-boundary"]], "skactiveml.visualization.plot_stream_training_data": [[117, "skactiveml-visualization-plot-stream-training-data"]], "Examples using skactiveml.visualization.plot_stream_training_data": [[117, "examples-using-skactiveml-visualization-plot-stream-training-data"]], "skactiveml.visualization.plot_utilities": [[118, "skactiveml-visualization-plot-utilities"]], "Examples using skactiveml.visualization.plot_utilities": [[118, "examples-using-skactiveml-visualization-plot-utilities"]], "API Reference": [[119, "api-reference"]], "skactiveml.base": [[119, "module-skactiveml.base"]], "Classes": [[119, "classes"], [119, "id2"], [119, "id4"], [119, "id5"], [119, "id6"], [119, "id16"], [119, "id17"], [119, "id18"], [119, "id20"], [119, "id23"]], "skactiveml.pool": [[119, "module-skactiveml.pool"]], "Functions": [[119, "functions"], [119, "id19"], [119, "id21"]], "skactiveml.pool.multiannotator": [[119, "module-skactiveml.pool.multiannotator"]], "skactiveml.pool.utils": [[119, "module-skactiveml.pool.utils"]], "skactiveml.stream": [[119, "module-skactiveml.stream"]], "skactiveml.stream.budgetmanager": [[119, "module-skactiveml.stream.budgetmanager"]], "skactiveml.classifier": [[119, "module-skactiveml.classifier"]], "skactiveml.classifier.multiannotator": [[119, "module-skactiveml.classifier.multiannotator"]], "skactiveml.visualization": [[119, "module-skactiveml.visualization"]], "skactiveml.utils": [[119, "module-skactiveml.utils"]], "skactiveml.exceptions": [[119, "module-skactiveml.exceptions"]], "Batch Active Learning by Diverse Gradient Embedding (BADGE)": [[125, "batch-active-learning-by-diverse-gradient-embedding-badge"]], "Batch Bayesian Active Learning by Disagreement (BatchBALD)": [[126, "batch-bayesian-active-learning-by-disagreement-batchbald"]], "Clustering Uncertainty-weighted Embeddings (CLUE)": [[127, "clustering-uncertainty-weighted-embeddings-clue"]], "Contrastive Active Learning (CAL)": [[128, "contrastive-active-learning-cal"]], "Core Set": [[129, "core-set"]], "Active Learning with Cost Embedding": [[130, "active-learning-with-cost-embedding"]], "Discriminative Active Learning": [[131, "discriminative-active-learning"]], "Dropout Query (DropQuery)": [[132, "dropout-query-dropquery"]], "Epistemic Uncertainty Sampling": [[133, "epistemic-uncertainty-sampling"]], "Expected Model Change Maximization": [[134, "expected-model-change-maximization"]], "Expected Model Output Change": [[135, "expected-model-output-change"]], "Expected Model Variance Reduction": [[136, "expected-model-variance-reduction"]], "Fast Active Learning by Contrastive UNcertainty (FALCUN)": [[137, "fast-active-learning-by-contrastive-uncertainty-falcun"]], "Batch Density-Diversity-Distribution-Distance Sampling": [[138, "batch-density-diversity-distribution-distance-sampling"]], "Density-Diversity-Distribution-Distance Sampling": [[139, "density-diversity-distribution-distance-sampling"]], "Bayesian Active Learning by Disagreement (BALD)": [[140, "bayesian-active-learning-by-disagreement-bald"]], "Greedy Sampling on the Target Space (GSy)": [[141, "greedy-sampling-on-the-target-space-gsy"]], "Improved Greedy Sampling (GSi)": [[142, "improved-greedy-sampling-gsi"]], "Greedy Sampling on the Feature Space (GSx)": [[143, "greedy-sampling-on-the-feature-space-gsx"]], "Regression based Kullback Leibler Divergence Maximization": [[144, "regression-based-kullback-leibler-divergence-maximization"]], "Monte-Carlo EER with Log-Loss": [[145, "monte-carlo-eer-with-log-loss"]], "Monte-Carlo EER with Misclassification-Loss": [[146, "monte-carlo-eer-with-misclassification-loss"]], "Parallel Utility Estimation Wrapper": [[147, "parallel-utility-estimation-wrapper"]], "Probability Coverage (ProbCover)": [[148, "probability-coverage-probcover"]], "Multi-class Probabilistic Active Learning": [[149, "multi-class-probabilistic-active-learning"]], "Query-by-Committee (QBC) with Empirical Variance": [[150, "query-by-committee-qbc-with-empirical-variance"]], "Query-by-Committee (QBC) with Kullback-Leibler Divergence": [[151, "query-by-committee-qbc-with-kullback-leibler-divergence"]], "Query-by-Committee (QBC) with Variation Ratios": [[152, "query-by-committee-qbc-with-variation-ratios"]], "Query-by-Committee (QBC) with Vote Entropy": [[153, "query-by-committee-qbc-with-vote-entropy"]], "Querying Informative and Representative Examples": [[154, "querying-informative-and-representative-examples"]], "Random Sampling": [[155, "random-sampling"]], "Regression Tree Based Active Learning (RT-AL) with Diversity Selection": [[156, "regression-tree-based-active-learning-rt-al-with-diversity-selection"]], "Regression Tree Based Active Learning (RT-AL) with Random Selection": [[157, "regression-tree-based-active-learning-rt-al-with-random-selection"]], "Regression Tree Based Active Learning (RT-AL) with Representativity Selection": [[158, "regression-tree-based-active-learning-rt-al-with-representativity-selection"]], "Sub-sampling Wrapper": [[159, "sub-sampling-wrapper"]], "Typical Clustering (TypiClust)": [[160, "typical-clustering-typiclust"]], "Density-weighted Uncertainty Sampling": [[161, "density-weighted-uncertainty-sampling"]], "Dual Strategy for Active Learning": [[162, "dual-strategy-for-active-learning"]], "Expected Average Precision": [[163, "expected-average-precision"]], "Uncertainty Sampling with Entropy": [[164, "uncertainty-sampling-with-entropy"]], "Uncertainty Sampling with Least-Confidence": [[165, "uncertainty-sampling-with-least-confidence"]], "Uncertainty Sampling with Margin": [[166, "uncertainty-sampling-with-margin"]], "Value of Information": [[167, "value-of-information"]], "Value of Information on Labeled Samples": [[168, "value-of-information-on-labeled-samples"]], "Value of Information on Unlabeled Samples": [[169, "value-of-information-on-unlabeled-samples"]], "Computation times": [[170, "computation-times"], [171, "computation-times"], [185, "computation-times"], [210, "computation-times"]], "Cognitive Dual-Query Strategy with Fixed-Uncertainty": [[173, "cognitive-dual-query-strategy-with-fixed-uncertainty"]], "Cognitive Dual-Query Strategy with Random Sampling": [[174, "cognitive-dual-query-strategy-with-random-sampling"]], "Cognitive Dual-Query Strategy with Randomized-Variable-Uncertainty": [[175, "cognitive-dual-query-strategy-with-randomized-variable-uncertainty"]], "Cognitive Dual-Query Strategy with Variable-Uncertainty": [[176, "cognitive-dual-query-strategy-with-variable-uncertainty"]], "Fixed-Uncertainty": [[177, "fixed-uncertainty"]], "Periodic Sampling": [[178, "periodic-sampling"]], "Randomized-Variable-Uncertainty": [[179, "randomized-variable-uncertainty"]], "Split": [[180, "split"]], "Density Based Active Learning for Data Streams": [[181, "density-based-active-learning-for-data-streams"]], "Probabilistic Active Learning in Datastreams": [[182, "probabilistic-active-learning-in-datastreams"]], "Stream Random Sampling": [[183, "stream-random-sampling"]], "Variable-Uncertainty": [[184, "variable-uncertainty"]], "Strategy Overview": [[186, "strategy-overview"]], "Stream": [[186, "stream"]], "Baseline": [[186, "baseline"], [186, "id11"]], "Hybrid": [[186, "hybrid"], [186, "id12"]], "Informativeness": [[186, "informativeness"], [186, "id28"]], "Pool": [[186, "pool"]], "Representativeness": [[186, "representativeness"]], "Wrapper": [[186, "wrapper"]], "References": [[186, "references"]], "Pool-based Active Learning - Getting Started": [[187, "Pool-based-Active-Learning---Getting-Started"], [198, "Pool-based-Active-Learning---Getting-Started"]], "Data Set Generation": [[187, "Data-Set-Generation"], [189, "Data-Set-Generation"], [191, "Data-Set-Generation"], [194, "Data-Set-Generation"], [198, "Data-Set-Generation"], [200, "Data-Set-Generation"], [202, "Data-Set-Generation"], [205, "Data-Set-Generation"]], "Classification": [[187, "Classification"], [198, "Classification"]], "Query Strategy": [[187, "Query-Strategy"], [198, "Query-Strategy"]], "Active Learning Cycle": [[187, "Active-Learning-Cycle"], [198, "Active-Learning-Cycle"]], "Deep Pool-based Active Learning: Scikit-activeml with Skorch": [[188, "Deep-Pool-based-Active-Learning:-Scikit-activeml-with-Skorch"], [199, "Deep-Pool-based-Active-Learning:-Scikit-activeml-with-Skorch"]], "Loading Digit Data Set": [[188, "Loading-Digit-Data-Set"], [199, "Loading-Digit-Data-Set"]], "Data Augmentation": [[188, "Data-Augmentation"], [199, "Data-Augmentation"]], "Convolutional Neural Network Ensemble": [[188, "Convolutional-Neural-Network-Ensemble"], [199, "Convolutional-Neural-Network-Ensemble"]], "Active Classification": [[188, "Active-Classification"], [194, "Active-Classification"], [199, "Active-Classification"], [205, "Active-Classification"]], "Visualize Results": [[188, "Visualize-Results"], [199, "Visualize-Results"]], "Pool-based Active Learning for Regression - Getting Started": [[189, "Pool-based-Active-Learning-for-Regression---Getting-Started"], [200, "Pool-based-Active-Learning-for-Regression---Getting-Started"]], "Active Regression": [[189, "Active-Regression"], [200, "Active-Regression"]], "Sample Annotating": [[190, "Sample-Annotating"], [201, "Sample-Annotating"]], "The Annotation Widget Class": [[190, "The-Annotation-Widget-Class"], [201, "The-Annotation-Widget-Class"]], "Create Dataset": [[190, "Create-Dataset"], [201, "Create-Dataset"]], "Create and Start Annotation Process": [[190, "Create-and-Start-Annotation-Process"], [201, "Create-and-Start-Annotation-Process"]], "Pool-based Active Learning - Simple Evaluation Study": [[191, "Pool-based-Active-Learning---Simple-Evaluation-Study"], [202, "Pool-based-Active-Learning---Simple-Evaluation-Study"]], "Random Seed Management": [[191, "Random-Seed-Management"], [192, "Random-Seed-Management"], [202, "Random-Seed-Management"], [203, "Random-Seed-Management"]], "Classification Models and Query Strategies": [[191, "Classification-Models-and-Query-Strategies"], [192, "Classification-Models-and-Query-Strategies"], [202, "Classification-Models-and-Query-Strategies"], [203, "Classification-Models-and-Query-Strategies"]], "Experiment Parameters": [[191, "Experiment-Parameters"], [192, "Experiment-Parameters"], [202, "Experiment-Parameters"], [203, "Experiment-Parameters"]], "Experiment Loop": [[191, "Experiment-Loop"], [192, "Experiment-Loop"], [202, "Experiment-Loop"], [203, "Experiment-Loop"]], "Result Plotting": [[191, "Result-Plotting"], [202, "Result-Plotting"]], "Active Image Classification via Self-supervised Learning": [[192, "Active-Image-Classification-via-Self-supervised-Learning"], [203, "Active-Image-Classification-via-Self-supervised-Learning"]], "Prepare Data with DINOv2": [[192, "Prepare-Data-with-DINOv2"], [203, "Prepare-Data-with-DINOv2"]], "Load your preprocessed Dataset": [[192, "Load-your-preprocessed-Dataset"], [203, "Load-your-preprocessed-Dataset"]], "Resulting Plotting": [[192, "Resulting-Plotting"], [203, "Resulting-Plotting"]], "Paper Annotation Tool using Text Embeddings": [[193, "Paper-Annotation-Tool-using-Text-Embeddings"], [204, "Paper-Annotation-Tool-using-Text-Embeddings"]], "Dataset": [[193, "Dataset"], [204, "Dataset"]], "User Interface": [[193, "User-Interface"], [204, "User-Interface"]], "Annotation & Active Learning Cycle": [[193, "Annotation-&-Active-Learning-Cycle"], [204, "Annotation-&-Active-Learning-Cycle"]], "Multi-annotator Pool-based Active Learning - Getting Started": [[194, "Multi-annotator-Pool-based-Active-Learning---Getting-Started"], [205, "Multi-annotator-Pool-based-Active-Learning---Getting-Started"]], "Stream-based Active Learning - Getting Started": [[195, "Stream-based-Active-Learning---Getting-Started"], [206, "Stream-based-Active-Learning---Getting-Started"]], "Initialize Stream Parameters": [[195, "Initialize-Stream-Parameters"], [197, "Initialize-Stream-Parameters"], [206, "Initialize-Stream-Parameters"], [208, "Initialize-Stream-Parameters"]], "Random Seed Generation": [[195, "Random-Seed-Generation"], [196, "Random-Seed-Generation"], [197, "Random-Seed-Generation"], [206, "Random-Seed-Generation"], [207, "Random-Seed-Generation"], [208, "Random-Seed-Generation"]], "Generate And Initialize Data Set": [[195, "Generate-And-Initialize-Data-Set"], [196, "Generate-And-Initialize-Data-Set"], [206, "Generate-And-Initialize-Data-Set"], [207, "Generate-And-Initialize-Data-Set"]], "Initialize Query Strategies": [[195, "Initialize-Query-Strategies"], [196, "Initialize-Query-Strategies"], [197, "Initialize-Query-Strategies"], [206, "Initialize-Query-Strategies"], [207, "Initialize-Query-Strategies"], [208, "Initialize-Query-Strategies"]], "Start Active Learning Cycle": [[195, "Start-Active-Learning-Cycle"], [196, "Start-Active-Learning-Cycle"], [197, "Start-Active-Learning-Cycle"], [206, "Start-Active-Learning-Cycle"], [207, "Start-Active-Learning-Cycle"], [208, "Start-Active-Learning-Cycle"]], "Batch Stream Active Learning with Pool-based Query Strategies": [[196, "Batch-Stream-Active-Learning-with-Pool-based-Query-Strategies"], [207, "Batch-Stream-Active-Learning-with-Pool-based-Query-Strategies"]], "Initialize Batch Stream Parameters": [[196, "Initialize-Batch-Stream-Parameters"], [207, "Initialize-Batch-Stream-Parameters"]], "Stream-based Active Learning with River": [[197, "Stream-based-Active-Learning-with-River"], [208, "Stream-based-Active-Learning-with-River"]], "Generate and Initialize Data Set": [[197, "Generate-and-Initialize-Data-Set"], [208, "Generate-and-Initialize-Data-Set"]], "scikit-activeml: A Library and Toolbox for Active Learning Algorithms": [[209, "scikit-activeml-a-library-and-toolbox-for-active-learning-algorithms"]], "User Installation": [[209, "user-installation"]], "Pool-based Active Learning": [[209, "pool-based-active-learning"]], "Stream-based Active Learning": [[209, "stream-based-active-learning"]], "Query Strategy Overview": [[209, "query-strategy-overview"]], "Citing": [[209, "citing"]], "Indices and tables": [[209, "indices-and-tables"]], "skactiveml.utils.MISSING_LABEL": [[211, "skactiveml-utils-missing-label"]], "Examples using skactiveml.utils.MISSING_LABEL": [[211, "examples-using-skactiveml-utils-missing-label"]], "Tutorials": [[212, "tutorials"]]}, "indexentries": {"annotatormodelmixin (class in skactiveml.base)": [[4, "skactiveml.base.AnnotatorModelMixin"]], "predict_annotator_perf() (skactiveml.base.annotatormodelmixin method)": [[4, "skactiveml.base.AnnotatorModelMixin.predict_annotator_perf"]], "budgetmanager (class in skactiveml.base)": [[5, "skactiveml.base.BudgetManager"]], "get_metadata_routing() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.get_metadata_routing"]], "get_params() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.get_params"]], "query_by_utility() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.query_by_utility"]], "set_params() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.set_params"]], "update() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.update"]], "classfrequencyestimator (class in skactiveml.base)": [[6, "skactiveml.base.ClassFrequencyEstimator"]], "fit() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.fit"]], "get_metadata_routing() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.get_metadata_routing"]], "get_params() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.get_params"]], "predict() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict"]], "predict_freq() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict_freq"]], "predict_proba() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict_proba"]], "sample_proba() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.sample_proba"]], "score() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.score"]], "set_fit_request() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_fit_request"]], "set_params() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_params"]], "set_score_request() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_score_request"]], "multiannotatorpoolquerystrategy (class in skactiveml.base)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy"]], "get_metadata_routing() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_params"]], "query() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.query"]], "set_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.set_params"]], "probabilisticregressor (class in skactiveml.base)": [[8, "skactiveml.base.ProbabilisticRegressor"]], "fit() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.fit"]], "get_metadata_routing() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_metadata_routing"]], "get_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_params"]], "predict() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict"]], "predict_target_distribution() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict_target_distribution"]], "sample_y() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.sample_y"]], "score() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.score"]], "set_fit_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_fit_request"]], "set_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_params"]], "set_predict_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_predict_request"]], "set_score_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_score_request"]], "querystrategy (class in skactiveml.base)": [[9, "skactiveml.base.QueryStrategy"]], "get_metadata_routing() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_params"]], "query() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.query"]], "set_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.set_params"]], "singleannotatorpoolquerystrategy (class in skactiveml.base)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy"]], "get_metadata_routing() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_params"]], "query() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.query"]], "set_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.set_params"]], "singleannotatorstreamquerystrategy (class in skactiveml.base)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy"]], "get_metadata_routing() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_params"]], "query() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.query"]], "set_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.set_params"]], "update() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.update"]], "skactivemlclassifier (class in skactiveml.base)": [[12, "skactiveml.base.SkactivemlClassifier"]], "fit() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.fit"]], "get_metadata_routing() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_metadata_routing"]], "get_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_params"]], "predict() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict"]], "predict_proba() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict_proba"]], "score() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.score"]], "set_fit_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_fit_request"]], "set_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_params"]], "set_score_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_score_request"]], "skactivemlregressor (class in skactiveml.base)": [[13, "skactiveml.base.SkactivemlRegressor"]], "fit() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.fit"]], "get_metadata_routing() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_metadata_routing"]], "get_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_params"]], "predict() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.predict"]], "score() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.score"]], "set_fit_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_fit_request"]], "set_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_params"]], "set_score_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_score_request"]], "mixturemodelclassifier (class in skactiveml.classifier)": [[14, "skactiveml.classifier.MixtureModelClassifier"]], "fit() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.get_params"]], "predict() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict"]], "predict_freq() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict_proba"]], "sample_proba() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.sample_proba"]], "score() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.score"]], "set_fit_request() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_params"]], "set_score_request() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_score_request"]], "metrics (skactiveml.classifier.parzenwindowclassifier attribute)": [[15, "skactiveml.classifier.ParzenWindowClassifier.METRICS"]], "parzenwindowclassifier (class in skactiveml.classifier)": [[15, "skactiveml.classifier.ParzenWindowClassifier"]], "fit() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.get_params"]], "predict() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict"]], "predict_freq() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict_proba"]], "sample_proba() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.sample_proba"]], "score() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.score"]], "set_fit_request() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_params"]], "set_score_request() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_score_request"]], "sklearnclassifier (class in skactiveml.classifier)": [[16, "skactiveml.classifier.SklearnClassifier"]], "fit() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.get_params"]], "partial_fit() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.partial_fit"]], "predict() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.predict"]], "predict_proba() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.predict_proba"]], "score() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.score"]], "set_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_params"]], "set_partial_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_partial_fit_request"]], "set_score_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_score_request"]], "slidingwindowclassifier (class in skactiveml.classifier)": [[17, "skactiveml.classifier.SlidingWindowClassifier"]], "fit() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.get_params"]], "partial_fit() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.partial_fit"]], "predict() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict"]], "predict_freq() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict_proba"]], "score() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.score"]], "set_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_params"]], "set_partial_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_partial_fit_request"]], "set_score_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_score_request"]], "annotatorensembleclassifier (class in skactiveml.classifier.multiannotator)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier"]], "fit() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_params"]], "named_estimators (skactiveml.classifier.multiannotator.annotatorensembleclassifier property)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.named_estimators"]], "predict() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict"]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict_proba"]], "score() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.score"]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_params"]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_score_request"]], "steps (skactiveml.classifier.multiannotator.annotatorensembleclassifier attribute)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.steps"]], "annotatorlogisticregression (class in skactiveml.classifier.multiannotator)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression"]], "fit() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.fit"]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_metadata_routing"]], "get_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_params"]], "predict() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict"]], "predict_annotator_perf() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_annotator_perf"]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_proba"]], "score() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.score"]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_fit_request"]], "set_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_params"]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_score_request"]], "mappingerror (class in skactiveml.exceptions)": [[20, "skactiveml.exceptions.MappingError"]], "args (skactiveml.exceptions.mappingerror attribute)": [[20, "skactiveml.exceptions.MappingError.args"]], "with_traceback() (skactiveml.exceptions.mappingerror method)": [[20, "skactiveml.exceptions.MappingError.with_traceback"]], "badge (class in skactiveml.pool)": [[21, "skactiveml.pool.Badge"]], "get_metadata_routing() (skactiveml.pool.badge method)": [[21, "skactiveml.pool.Badge.get_metadata_routing"]], "get_params() (skactiveml.pool.badge method)": [[21, "skactiveml.pool.Badge.get_params"]], "query() (skactiveml.pool.badge method)": [[21, "skactiveml.pool.Badge.query"]], "set_params() (skactiveml.pool.badge method)": [[21, "skactiveml.pool.Badge.set_params"]], "batchbald (class in skactiveml.pool)": [[22, "skactiveml.pool.BatchBALD"]], "get_metadata_routing() (skactiveml.pool.batchbald method)": [[22, "skactiveml.pool.BatchBALD.get_metadata_routing"]], "get_params() (skactiveml.pool.batchbald method)": [[22, "skactiveml.pool.BatchBALD.get_params"]], "query() (skactiveml.pool.batchbald method)": [[22, "skactiveml.pool.BatchBALD.query"]], "set_params() (skactiveml.pool.batchbald method)": [[22, "skactiveml.pool.BatchBALD.set_params"]], "clue (class in skactiveml.pool)": [[23, "skactiveml.pool.Clue"]], "get_metadata_routing() (skactiveml.pool.clue method)": [[23, "skactiveml.pool.Clue.get_metadata_routing"]], "get_params() (skactiveml.pool.clue method)": [[23, "skactiveml.pool.Clue.get_params"]], "query() (skactiveml.pool.clue method)": [[23, "skactiveml.pool.Clue.query"]], "set_params() (skactiveml.pool.clue method)": [[23, "skactiveml.pool.Clue.set_params"]], "contrastiveal (class in skactiveml.pool)": [[24, "skactiveml.pool.ContrastiveAL"]], "get_metadata_routing() (skactiveml.pool.contrastiveal method)": [[24, "skactiveml.pool.ContrastiveAL.get_metadata_routing"]], "get_params() (skactiveml.pool.contrastiveal method)": [[24, "skactiveml.pool.ContrastiveAL.get_params"]], "query() (skactiveml.pool.contrastiveal method)": [[24, "skactiveml.pool.ContrastiveAL.query"]], "set_params() (skactiveml.pool.contrastiveal method)": [[24, "skactiveml.pool.ContrastiveAL.set_params"]], "coreset (class in skactiveml.pool)": [[25, "skactiveml.pool.CoreSet"]], "get_metadata_routing() (skactiveml.pool.coreset method)": [[25, "skactiveml.pool.CoreSet.get_metadata_routing"]], "get_params() (skactiveml.pool.coreset method)": [[25, "skactiveml.pool.CoreSet.get_params"]], "query() (skactiveml.pool.coreset method)": [[25, "skactiveml.pool.CoreSet.query"]], "set_params() (skactiveml.pool.coreset method)": [[25, "skactiveml.pool.CoreSet.set_params"]], "costembeddingal (class in skactiveml.pool)": [[26, "skactiveml.pool.CostEmbeddingAL"]], "get_metadata_routing() (skactiveml.pool.costembeddingal method)": [[26, "skactiveml.pool.CostEmbeddingAL.get_metadata_routing"]], "get_params() (skactiveml.pool.costembeddingal method)": [[26, "skactiveml.pool.CostEmbeddingAL.get_params"]], "query() (skactiveml.pool.costembeddingal method)": [[26, "skactiveml.pool.CostEmbeddingAL.query"]], "set_params() (skactiveml.pool.costembeddingal method)": [[26, "skactiveml.pool.CostEmbeddingAL.set_params"]], "discriminativeal (class in skactiveml.pool)": [[27, "skactiveml.pool.DiscriminativeAL"]], "get_metadata_routing() (skactiveml.pool.discriminativeal method)": [[27, "skactiveml.pool.DiscriminativeAL.get_metadata_routing"]], "get_params() (skactiveml.pool.discriminativeal method)": [[27, "skactiveml.pool.DiscriminativeAL.get_params"]], "query() (skactiveml.pool.discriminativeal method)": [[27, "skactiveml.pool.DiscriminativeAL.query"]], "set_params() (skactiveml.pool.discriminativeal method)": [[27, "skactiveml.pool.DiscriminativeAL.set_params"]], "dropquery (class in skactiveml.pool)": [[28, "skactiveml.pool.DropQuery"]], "get_metadata_routing() (skactiveml.pool.dropquery method)": [[28, "skactiveml.pool.DropQuery.get_metadata_routing"]], "get_params() (skactiveml.pool.dropquery method)": [[28, "skactiveml.pool.DropQuery.get_params"]], "query() (skactiveml.pool.dropquery method)": [[28, "skactiveml.pool.DropQuery.query"]], "set_params() (skactiveml.pool.dropquery method)": [[28, "skactiveml.pool.DropQuery.set_params"]], "epistemicuncertaintysampling (class in skactiveml.pool)": [[29, "skactiveml.pool.EpistemicUncertaintySampling"]], "get_metadata_routing() (skactiveml.pool.epistemicuncertaintysampling method)": [[29, "skactiveml.pool.EpistemicUncertaintySampling.get_metadata_routing"]], "get_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[29, "skactiveml.pool.EpistemicUncertaintySampling.get_params"]], "query() (skactiveml.pool.epistemicuncertaintysampling method)": [[29, "skactiveml.pool.EpistemicUncertaintySampling.query"]], "set_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[29, "skactiveml.pool.EpistemicUncertaintySampling.set_params"]], "expectedmodelchangemaximization (class in skactiveml.pool)": [[30, "skactiveml.pool.ExpectedModelChangeMaximization"]], "get_metadata_routing() (skactiveml.pool.expectedmodelchangemaximization method)": [[30, "skactiveml.pool.ExpectedModelChangeMaximization.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[30, "skactiveml.pool.ExpectedModelChangeMaximization.get_params"]], "query() (skactiveml.pool.expectedmodelchangemaximization method)": [[30, "skactiveml.pool.ExpectedModelChangeMaximization.query"]], "set_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[30, "skactiveml.pool.ExpectedModelChangeMaximization.set_params"]], "expectedmodeloutputchange (class in skactiveml.pool)": [[31, "skactiveml.pool.ExpectedModelOutputChange"]], "get_metadata_routing() (skactiveml.pool.expectedmodeloutputchange method)": [[31, "skactiveml.pool.ExpectedModelOutputChange.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodeloutputchange method)": [[31, "skactiveml.pool.ExpectedModelOutputChange.get_params"]], "query() (skactiveml.pool.expectedmodeloutputchange method)": [[31, "skactiveml.pool.ExpectedModelOutputChange.query"]], "set_params() (skactiveml.pool.expectedmodeloutputchange method)": [[31, "skactiveml.pool.ExpectedModelOutputChange.set_params"]], "expectedmodelvariancereduction (class in skactiveml.pool)": [[32, "skactiveml.pool.ExpectedModelVarianceReduction"]], "get_metadata_routing() (skactiveml.pool.expectedmodelvariancereduction method)": [[32, "skactiveml.pool.ExpectedModelVarianceReduction.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[32, "skactiveml.pool.ExpectedModelVarianceReduction.get_params"]], "query() (skactiveml.pool.expectedmodelvariancereduction method)": [[32, "skactiveml.pool.ExpectedModelVarianceReduction.query"]], "set_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[32, "skactiveml.pool.ExpectedModelVarianceReduction.set_params"]], "falcun (class in skactiveml.pool)": [[33, "skactiveml.pool.Falcun"]], "get_metadata_routing() (skactiveml.pool.falcun method)": [[33, "skactiveml.pool.Falcun.get_metadata_routing"]], "get_params() (skactiveml.pool.falcun method)": [[33, "skactiveml.pool.Falcun.get_params"]], "query() (skactiveml.pool.falcun method)": [[33, "skactiveml.pool.Falcun.query"]], "set_params() (skactiveml.pool.falcun method)": [[33, "skactiveml.pool.Falcun.set_params"]], "fourds (class in skactiveml.pool)": [[34, "skactiveml.pool.FourDs"]], "get_metadata_routing() (skactiveml.pool.fourds method)": [[34, "skactiveml.pool.FourDs.get_metadata_routing"]], "get_params() (skactiveml.pool.fourds method)": [[34, "skactiveml.pool.FourDs.get_params"]], "query() (skactiveml.pool.fourds method)": [[34, "skactiveml.pool.FourDs.query"]], "set_params() (skactiveml.pool.fourds method)": [[34, "skactiveml.pool.FourDs.set_params"]], "greedybald (class in skactiveml.pool)": [[35, "skactiveml.pool.GreedyBALD"]], "get_metadata_routing() (skactiveml.pool.greedybald method)": [[35, "skactiveml.pool.GreedyBALD.get_metadata_routing"]], "get_params() (skactiveml.pool.greedybald method)": [[35, "skactiveml.pool.GreedyBALD.get_params"]], "query() (skactiveml.pool.greedybald method)": [[35, "skactiveml.pool.GreedyBALD.query"]], "set_params() (skactiveml.pool.greedybald method)": [[35, "skactiveml.pool.GreedyBALD.set_params"]], "greedysamplingtarget (class in skactiveml.pool)": [[36, "skactiveml.pool.GreedySamplingTarget"]], "get_metadata_routing() (skactiveml.pool.greedysamplingtarget method)": [[36, "skactiveml.pool.GreedySamplingTarget.get_metadata_routing"]], "get_params() (skactiveml.pool.greedysamplingtarget method)": [[36, "skactiveml.pool.GreedySamplingTarget.get_params"]], "query() (skactiveml.pool.greedysamplingtarget method)": [[36, "skactiveml.pool.GreedySamplingTarget.query"]], "set_params() (skactiveml.pool.greedysamplingtarget method)": [[36, "skactiveml.pool.GreedySamplingTarget.set_params"]], "greedysamplingx (class in skactiveml.pool)": [[37, "skactiveml.pool.GreedySamplingX"]], "get_metadata_routing() (skactiveml.pool.greedysamplingx method)": [[37, "skactiveml.pool.GreedySamplingX.get_metadata_routing"]], "get_params() (skactiveml.pool.greedysamplingx method)": [[37, "skactiveml.pool.GreedySamplingX.get_params"]], "query() (skactiveml.pool.greedysamplingx method)": [[37, "skactiveml.pool.GreedySamplingX.query"]], "set_params() (skactiveml.pool.greedysamplingx method)": [[37, "skactiveml.pool.GreedySamplingX.set_params"]], "kldivergencemaximization (class in skactiveml.pool)": [[38, "skactiveml.pool.KLDivergenceMaximization"]], "get_metadata_routing() (skactiveml.pool.kldivergencemaximization method)": [[38, "skactiveml.pool.KLDivergenceMaximization.get_metadata_routing"]], "get_params() (skactiveml.pool.kldivergencemaximization method)": [[38, "skactiveml.pool.KLDivergenceMaximization.get_params"]], "query() (skactiveml.pool.kldivergencemaximization method)": [[38, "skactiveml.pool.KLDivergenceMaximization.query"]], "set_params() (skactiveml.pool.kldivergencemaximization method)": [[38, "skactiveml.pool.KLDivergenceMaximization.set_params"]], "montecarloeer (class in skactiveml.pool)": [[39, "skactiveml.pool.MonteCarloEER"]], "get_metadata_routing() (skactiveml.pool.montecarloeer method)": [[39, "skactiveml.pool.MonteCarloEER.get_metadata_routing"]], "get_params() (skactiveml.pool.montecarloeer method)": [[39, "skactiveml.pool.MonteCarloEER.get_params"]], "query() (skactiveml.pool.montecarloeer method)": [[39, "skactiveml.pool.MonteCarloEER.query"]], "set_params() (skactiveml.pool.montecarloeer method)": [[39, "skactiveml.pool.MonteCarloEER.set_params"]], "parallelutilityestimationwrapper (class in skactiveml.pool)": [[40, "skactiveml.pool.ParallelUtilityEstimationWrapper"]], "get_metadata_routing() (skactiveml.pool.parallelutilityestimationwrapper method)": [[40, "skactiveml.pool.ParallelUtilityEstimationWrapper.get_metadata_routing"]], "get_params() (skactiveml.pool.parallelutilityestimationwrapper method)": [[40, "skactiveml.pool.ParallelUtilityEstimationWrapper.get_params"]], "query() (skactiveml.pool.parallelutilityestimationwrapper method)": [[40, "skactiveml.pool.ParallelUtilityEstimationWrapper.query"]], "set_params() (skactiveml.pool.parallelutilityestimationwrapper method)": [[40, "skactiveml.pool.ParallelUtilityEstimationWrapper.set_params"]], "probcover (class in skactiveml.pool)": [[41, "skactiveml.pool.ProbCover"]], "get_metadata_routing() (skactiveml.pool.probcover method)": [[41, "skactiveml.pool.ProbCover.get_metadata_routing"]], "get_params() (skactiveml.pool.probcover method)": [[41, "skactiveml.pool.ProbCover.get_params"]], "query() (skactiveml.pool.probcover method)": [[41, "skactiveml.pool.ProbCover.query"]], "set_params() (skactiveml.pool.probcover method)": [[41, "skactiveml.pool.ProbCover.set_params"]], "probabilistical (class in skactiveml.pool)": [[42, "skactiveml.pool.ProbabilisticAL"]], "get_metadata_routing() (skactiveml.pool.probabilistical method)": [[42, "skactiveml.pool.ProbabilisticAL.get_metadata_routing"]], "get_params() (skactiveml.pool.probabilistical method)": [[42, "skactiveml.pool.ProbabilisticAL.get_params"]], "query() (skactiveml.pool.probabilistical method)": [[42, "skactiveml.pool.ProbabilisticAL.query"]], "set_params() (skactiveml.pool.probabilistical method)": [[42, "skactiveml.pool.ProbabilisticAL.set_params"]], "querybycommittee (class in skactiveml.pool)": [[43, "skactiveml.pool.QueryByCommittee"]], "get_metadata_routing() (skactiveml.pool.querybycommittee method)": [[43, "skactiveml.pool.QueryByCommittee.get_metadata_routing"]], "get_params() (skactiveml.pool.querybycommittee method)": [[43, "skactiveml.pool.QueryByCommittee.get_params"]], "query() (skactiveml.pool.querybycommittee method)": [[43, "skactiveml.pool.QueryByCommittee.query"]], "set_params() (skactiveml.pool.querybycommittee method)": [[43, "skactiveml.pool.QueryByCommittee.set_params"]], "metrics (skactiveml.pool.quire attribute)": [[44, "skactiveml.pool.Quire.METRICS"]], "quire (class in skactiveml.pool)": [[44, "skactiveml.pool.Quire"]], "get_metadata_routing() (skactiveml.pool.quire method)": [[44, "skactiveml.pool.Quire.get_metadata_routing"]], "get_params() (skactiveml.pool.quire method)": [[44, "skactiveml.pool.Quire.get_params"]], "query() (skactiveml.pool.quire method)": [[44, "skactiveml.pool.Quire.query"]], "set_params() (skactiveml.pool.quire method)": [[44, "skactiveml.pool.Quire.set_params"]], "randomsampling (class in skactiveml.pool)": [[45, "skactiveml.pool.RandomSampling"]], "get_metadata_routing() (skactiveml.pool.randomsampling method)": [[45, "skactiveml.pool.RandomSampling.get_metadata_routing"]], "get_params() (skactiveml.pool.randomsampling method)": [[45, "skactiveml.pool.RandomSampling.get_params"]], "query() (skactiveml.pool.randomsampling method)": [[45, "skactiveml.pool.RandomSampling.query"]], "set_params() (skactiveml.pool.randomsampling method)": [[45, "skactiveml.pool.RandomSampling.set_params"]], "regressiontreebasedal (class in skactiveml.pool)": [[46, "skactiveml.pool.RegressionTreeBasedAL"]], "get_metadata_routing() (skactiveml.pool.regressiontreebasedal method)": [[46, "skactiveml.pool.RegressionTreeBasedAL.get_metadata_routing"]], "get_params() (skactiveml.pool.regressiontreebasedal method)": [[46, "skactiveml.pool.RegressionTreeBasedAL.get_params"]], "query() (skactiveml.pool.regressiontreebasedal method)": [[46, "skactiveml.pool.RegressionTreeBasedAL.query"]], "set_params() (skactiveml.pool.regressiontreebasedal method)": [[46, "skactiveml.pool.RegressionTreeBasedAL.set_params"]], "subsamplingwrapper (class in skactiveml.pool)": [[47, "skactiveml.pool.SubSamplingWrapper"]], "get_metadata_routing() (skactiveml.pool.subsamplingwrapper method)": [[47, "skactiveml.pool.SubSamplingWrapper.get_metadata_routing"]], "get_params() (skactiveml.pool.subsamplingwrapper method)": [[47, "skactiveml.pool.SubSamplingWrapper.get_params"]], "query() (skactiveml.pool.subsamplingwrapper method)": [[47, "skactiveml.pool.SubSamplingWrapper.query"]], "set_params() (skactiveml.pool.subsamplingwrapper method)": [[47, "skactiveml.pool.SubSamplingWrapper.set_params"]], "typiclust (class in skactiveml.pool)": [[48, "skactiveml.pool.TypiClust"]], "get_metadata_routing() (skactiveml.pool.typiclust method)": [[48, "skactiveml.pool.TypiClust.get_metadata_routing"]], "get_params() (skactiveml.pool.typiclust method)": [[48, "skactiveml.pool.TypiClust.get_params"]], "query() (skactiveml.pool.typiclust method)": [[48, "skactiveml.pool.TypiClust.query"]], "set_params() (skactiveml.pool.typiclust method)": [[48, "skactiveml.pool.TypiClust.set_params"]], "uncertaintysampling (class in skactiveml.pool)": [[49, "skactiveml.pool.UncertaintySampling"]], "get_metadata_routing() (skactiveml.pool.uncertaintysampling method)": [[49, "skactiveml.pool.UncertaintySampling.get_metadata_routing"]], "get_params() (skactiveml.pool.uncertaintysampling method)": [[49, "skactiveml.pool.UncertaintySampling.get_params"]], "query() (skactiveml.pool.uncertaintysampling method)": [[49, "skactiveml.pool.UncertaintySampling.query"]], "set_params() (skactiveml.pool.uncertaintysampling method)": [[49, "skactiveml.pool.UncertaintySampling.set_params"]], "valueofinformationeer (class in skactiveml.pool)": [[50, "skactiveml.pool.ValueOfInformationEER"]], "get_metadata_routing() (skactiveml.pool.valueofinformationeer method)": [[50, "skactiveml.pool.ValueOfInformationEER.get_metadata_routing"]], "get_params() (skactiveml.pool.valueofinformationeer method)": [[50, "skactiveml.pool.ValueOfInformationEER.get_params"]], "query() (skactiveml.pool.valueofinformationeer method)": [[50, "skactiveml.pool.ValueOfInformationEER.query"]], "set_params() (skactiveml.pool.valueofinformationeer method)": [[50, "skactiveml.pool.ValueOfInformationEER.set_params"]], "average_kl_divergence() (in module skactiveml.pool)": [[51, "skactiveml.pool.average_kl_divergence"]], "batch_bald() (in module skactiveml.pool)": [[52, "skactiveml.pool.batch_bald"]], "cost_reduction() (in module skactiveml.pool)": [[53, "skactiveml.pool.cost_reduction"]], "expected_average_precision() (in module skactiveml.pool)": [[54, "skactiveml.pool.expected_average_precision"]], "k_greedy_center() (in module skactiveml.pool)": [[55, "skactiveml.pool.k_greedy_center"]], "intervalestimationannotmodel (class in skactiveml.pool.multiannotator)": [[56, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel"]], "fit() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[56, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.fit"]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[56, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[56, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_params"]], "predict_annotator_perf() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[56, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.predict_annotator_perf"]], "set_fit_request() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[56, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_fit_request"]], "set_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[56, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_params"]], "intervalestimationthreshold (class in skactiveml.pool.multiannotator)": [[57, "skactiveml.pool.multiannotator.IntervalEstimationThreshold"]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[57, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[57, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_params"]], "query() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[57, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.query"]], "set_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[57, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.set_params"]], "singleannotatorwrapper (class in skactiveml.pool.multiannotator)": [[58, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper"]], "get_metadata_routing() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[58, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[58, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_params"]], "query() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[58, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.query"]], "set_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[58, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.set_params"]], "uncertainty_scores() (in module skactiveml.pool)": [[59, "skactiveml.pool.uncertainty_scores"]], "indexclassifierwrapper (class in skactiveml.pool.utils)": [[60, "skactiveml.pool.utils.IndexClassifierWrapper"]], "fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[60, "skactiveml.pool.utils.IndexClassifierWrapper.fit"]], "is_fitted() (skactiveml.pool.utils.indexclassifierwrapper method)": [[60, "skactiveml.pool.utils.IndexClassifierWrapper.is_fitted"]], "partial_fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[60, "skactiveml.pool.utils.IndexClassifierWrapper.partial_fit"]], "precompute() (skactiveml.pool.utils.indexclassifierwrapper method)": [[60, "skactiveml.pool.utils.IndexClassifierWrapper.precompute"]], "predict() (skactiveml.pool.utils.indexclassifierwrapper method)": [[60, "skactiveml.pool.utils.IndexClassifierWrapper.predict"]], "predict_freq() (skactiveml.pool.utils.indexclassifierwrapper method)": [[60, "skactiveml.pool.utils.IndexClassifierWrapper.predict_freq"]], "predict_proba() (skactiveml.pool.utils.indexclassifierwrapper method)": [[60, "skactiveml.pool.utils.IndexClassifierWrapper.predict_proba"]], "variation_ratios() (in module skactiveml.pool)": [[61, "skactiveml.pool.variation_ratios"]], "vote_entropy() (in module skactiveml.pool)": [[62, "skactiveml.pool.vote_entropy"]], "cognitivedualquerystrategy (class in skactiveml.stream)": [[63, "skactiveml.stream.CognitiveDualQueryStrategy"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategy method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategy.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategy method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategy.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategy.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategy method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategy.update"]], "cognitivedualquerystrategyfixun (class in skactiveml.stream)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyFixUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.update"]], "cognitivedualquerystrategyran (class in skactiveml.stream)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyRan"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyran method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyran method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyRan.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyRan.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyran method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyRan.update"]], "cognitivedualquerystrategyranvarun (class in skactiveml.stream)": [[66, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[66, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[66, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[66, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[66, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[66, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.update"]], "cognitivedualquerystrategyvarun (class in skactiveml.stream)": [[67, "skactiveml.stream.CognitiveDualQueryStrategyVarUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[67, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[67, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[67, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[67, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[67, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.update"]], "fixeduncertainty (class in skactiveml.stream)": [[68, "skactiveml.stream.FixedUncertainty"]], "get_metadata_routing() (skactiveml.stream.fixeduncertainty method)": [[68, "skactiveml.stream.FixedUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.fixeduncertainty method)": [[68, "skactiveml.stream.FixedUncertainty.get_params"]], "query() (skactiveml.stream.fixeduncertainty method)": [[68, "skactiveml.stream.FixedUncertainty.query"]], "set_params() (skactiveml.stream.fixeduncertainty method)": [[68, "skactiveml.stream.FixedUncertainty.set_params"]], "update() (skactiveml.stream.fixeduncertainty method)": [[68, "skactiveml.stream.FixedUncertainty.update"]], "periodicsampling (class in skactiveml.stream)": [[69, "skactiveml.stream.PeriodicSampling"]], "get_metadata_routing() (skactiveml.stream.periodicsampling method)": [[69, "skactiveml.stream.PeriodicSampling.get_metadata_routing"]], "get_params() (skactiveml.stream.periodicsampling method)": [[69, "skactiveml.stream.PeriodicSampling.get_params"]], "query() (skactiveml.stream.periodicsampling method)": [[69, "skactiveml.stream.PeriodicSampling.query"]], "set_params() (skactiveml.stream.periodicsampling method)": [[69, "skactiveml.stream.PeriodicSampling.set_params"]], "update() (skactiveml.stream.periodicsampling method)": [[69, "skactiveml.stream.PeriodicSampling.update"]], "randomvariableuncertainty (class in skactiveml.stream)": [[70, "skactiveml.stream.RandomVariableUncertainty"]], "get_metadata_routing() (skactiveml.stream.randomvariableuncertainty method)": [[70, "skactiveml.stream.RandomVariableUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.randomvariableuncertainty method)": [[70, "skactiveml.stream.RandomVariableUncertainty.get_params"]], "query() (skactiveml.stream.randomvariableuncertainty method)": [[70, "skactiveml.stream.RandomVariableUncertainty.query"]], "set_params() (skactiveml.stream.randomvariableuncertainty method)": [[70, "skactiveml.stream.RandomVariableUncertainty.set_params"]], "update() (skactiveml.stream.randomvariableuncertainty method)": [[70, "skactiveml.stream.RandomVariableUncertainty.update"]], "split (class in skactiveml.stream)": [[71, "skactiveml.stream.Split"]], "get_metadata_routing() (skactiveml.stream.split method)": [[71, "skactiveml.stream.Split.get_metadata_routing"]], "get_params() (skactiveml.stream.split method)": [[71, "skactiveml.stream.Split.get_params"]], "query() (skactiveml.stream.split method)": [[71, "skactiveml.stream.Split.query"]], "set_params() (skactiveml.stream.split method)": [[71, "skactiveml.stream.Split.set_params"]], "update() (skactiveml.stream.split method)": [[71, "skactiveml.stream.Split.update"]], "streamdensitybasedal (class in skactiveml.stream)": [[72, "skactiveml.stream.StreamDensityBasedAL"]], "get_metadata_routing() (skactiveml.stream.streamdensitybasedal method)": [[72, "skactiveml.stream.StreamDensityBasedAL.get_metadata_routing"]], "get_params() (skactiveml.stream.streamdensitybasedal method)": [[72, "skactiveml.stream.StreamDensityBasedAL.get_params"]], "query() (skactiveml.stream.streamdensitybasedal method)": [[72, "skactiveml.stream.StreamDensityBasedAL.query"]], "set_params() (skactiveml.stream.streamdensitybasedal method)": [[72, "skactiveml.stream.StreamDensityBasedAL.set_params"]], "update() (skactiveml.stream.streamdensitybasedal method)": [[72, "skactiveml.stream.StreamDensityBasedAL.update"]], "streamprobabilistical (class in skactiveml.stream)": [[73, "skactiveml.stream.StreamProbabilisticAL"]], "get_metadata_routing() (skactiveml.stream.streamprobabilistical method)": [[73, "skactiveml.stream.StreamProbabilisticAL.get_metadata_routing"]], "get_params() (skactiveml.stream.streamprobabilistical method)": [[73, "skactiveml.stream.StreamProbabilisticAL.get_params"]], "query() (skactiveml.stream.streamprobabilistical method)": [[73, "skactiveml.stream.StreamProbabilisticAL.query"]], "set_params() (skactiveml.stream.streamprobabilistical method)": [[73, "skactiveml.stream.StreamProbabilisticAL.set_params"]], "update() (skactiveml.stream.streamprobabilistical method)": [[73, "skactiveml.stream.StreamProbabilisticAL.update"]], "streamrandomsampling (class in skactiveml.stream)": [[74, "skactiveml.stream.StreamRandomSampling"]], "get_metadata_routing() (skactiveml.stream.streamrandomsampling method)": [[74, "skactiveml.stream.StreamRandomSampling.get_metadata_routing"]], "get_params() (skactiveml.stream.streamrandomsampling method)": [[74, "skactiveml.stream.StreamRandomSampling.get_params"]], "query() (skactiveml.stream.streamrandomsampling method)": [[74, "skactiveml.stream.StreamRandomSampling.query"]], "set_params() (skactiveml.stream.streamrandomsampling method)": [[74, "skactiveml.stream.StreamRandomSampling.set_params"]], "update() (skactiveml.stream.streamrandomsampling method)": [[74, "skactiveml.stream.StreamRandomSampling.update"]], "variableuncertainty (class in skactiveml.stream)": [[75, "skactiveml.stream.VariableUncertainty"]], "get_metadata_routing() (skactiveml.stream.variableuncertainty method)": [[75, "skactiveml.stream.VariableUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.variableuncertainty method)": [[75, "skactiveml.stream.VariableUncertainty.get_params"]], "query() (skactiveml.stream.variableuncertainty method)": [[75, "skactiveml.stream.VariableUncertainty.query"]], "set_params() (skactiveml.stream.variableuncertainty method)": [[75, "skactiveml.stream.VariableUncertainty.set_params"]], "update() (skactiveml.stream.variableuncertainty method)": [[75, "skactiveml.stream.VariableUncertainty.update"]], "balancedincrementalquantilefilter (class in skactiveml.stream.budgetmanager)": [[76, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[76, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[76, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[76, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[76, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.set_params"]], "update() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[76, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.update"]], "densitybasedsplitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[77, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.update"]], "estimatedbudgetzliobaite (class in skactiveml.stream.budgetmanager)": [[78, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[78, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[78, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[78, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[78, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.set_params"]], "update() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[78, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.update"]], "fixeduncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[79, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.update"]], "randombudgetmanager (class in skactiveml.stream.budgetmanager)": [[80, "skactiveml.stream.budgetmanager.RandomBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.RandomBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.RandomBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.RandomBudgetManager.update"]], "randomvariableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[81, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.update"]], "splitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[82, "skactiveml.stream.budgetmanager.SplitBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[82, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[82, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[82, "skactiveml.stream.budgetmanager.SplitBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[82, "skactiveml.stream.budgetmanager.SplitBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[82, "skactiveml.stream.budgetmanager.SplitBudgetManager.update"]], "variableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[83, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[83, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[83, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[83, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[83, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[83, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.update"]], "extlabelencoder (class in skactiveml.utils)": [[84, "skactiveml.utils.ExtLabelEncoder"]], "fit() (skactiveml.utils.extlabelencoder method)": [[84, "skactiveml.utils.ExtLabelEncoder.fit"]], "fit_transform() (skactiveml.utils.extlabelencoder method)": [[84, "skactiveml.utils.ExtLabelEncoder.fit_transform"]], "get_metadata_routing() (skactiveml.utils.extlabelencoder method)": [[84, "skactiveml.utils.ExtLabelEncoder.get_metadata_routing"]], "get_params() (skactiveml.utils.extlabelencoder method)": [[84, "skactiveml.utils.ExtLabelEncoder.get_params"]], "inverse_transform() (skactiveml.utils.extlabelencoder method)": [[84, "skactiveml.utils.ExtLabelEncoder.inverse_transform"]], "set_params() (skactiveml.utils.extlabelencoder method)": [[84, "skactiveml.utils.ExtLabelEncoder.set_params"]], "transform() (skactiveml.utils.extlabelencoder method)": [[84, "skactiveml.utils.ExtLabelEncoder.transform"]], "_check_callable() (in module skactiveml.utils)": [[85, "skactiveml.utils._check_callable"]], "call_func() (in module skactiveml.utils)": [[86, "skactiveml.utils.call_func"]], "check_x_y() (in module skactiveml.utils)": [[87, "skactiveml.utils.check_X_y"]], "check_bound() (in module skactiveml.utils)": [[88, "skactiveml.utils.check_bound"]], "check_budget_manager() (in module skactiveml.utils)": [[89, "skactiveml.utils.check_budget_manager"]], "check_class_prior() (in module skactiveml.utils)": [[90, "skactiveml.utils.check_class_prior"]], "check_classes() (in module skactiveml.utils)": [[91, "skactiveml.utils.check_classes"]], "check_classifier_params() (in module skactiveml.utils)": [[92, "skactiveml.utils.check_classifier_params"]], "check_cost_matrix() (in module skactiveml.utils)": [[93, "skactiveml.utils.check_cost_matrix"]], "check_equal_missing_label() (in module skactiveml.utils)": [[94, "skactiveml.utils.check_equal_missing_label"]], "check_indices() (in module skactiveml.utils)": [[95, "skactiveml.utils.check_indices"]], "check_missing_label() (in module skactiveml.utils)": [[96, "skactiveml.utils.check_missing_label"]], "check_n_features() (in module skactiveml.utils)": [[97, "skactiveml.utils.check_n_features"]], "check_random_state() (in module skactiveml.utils)": [[98, "skactiveml.utils.check_random_state"]], "check_scalar() (in module skactiveml.utils)": [[99, "skactiveml.utils.check_scalar"]], "check_type() (in module skactiveml.utils)": [[100, "skactiveml.utils.check_type"]], "compute_vote_vectors() (in module skactiveml.utils)": [[101, "skactiveml.utils.compute_vote_vectors"]], "ext_confusion_matrix() (in module skactiveml.utils)": [[102, "skactiveml.utils.ext_confusion_matrix"]], "is_labeled() (in module skactiveml.utils)": [[103, "skactiveml.utils.is_labeled"]], "is_unlabeled() (in module skactiveml.utils)": [[104, "skactiveml.utils.is_unlabeled"]], "labeled_indices() (in module skactiveml.utils)": [[105, "skactiveml.utils.labeled_indices"]], "majority_vote() (in module skactiveml.utils)": [[106, "skactiveml.utils.majority_vote"]], "match_signature() (in module skactiveml.utils)": [[107, "skactiveml.utils.match_signature"]], "rand_argmax() (in module skactiveml.utils)": [[108, "skactiveml.utils.rand_argmax"]], "rand_argmin() (in module skactiveml.utils)": [[109, "skactiveml.utils.rand_argmin"]], "simple_batch() (in module skactiveml.utils)": [[110, "skactiveml.utils.simple_batch"]], "unlabeled_indices() (in module skactiveml.utils)": [[111, "skactiveml.utils.unlabeled_indices"]], "mesh() (in module skactiveml.visualization)": [[112, "skactiveml.visualization.mesh"]], "plot_annotator_utilities() (in module skactiveml.visualization)": [[113, "skactiveml.visualization.plot_annotator_utilities"]], "plot_contour_for_samples() (in module skactiveml.visualization)": [[114, "skactiveml.visualization.plot_contour_for_samples"]], "plot_decision_boundary() (in module skactiveml.visualization)": [[115, "skactiveml.visualization.plot_decision_boundary"]], "plot_stream_decision_boundary() (in module skactiveml.visualization)": [[116, "skactiveml.visualization.plot_stream_decision_boundary"]], "plot_stream_training_data() (in module skactiveml.visualization)": [[117, "skactiveml.visualization.plot_stream_training_data"]], "plot_utilities() (in module skactiveml.visualization)": [[118, "skactiveml.visualization.plot_utilities"]], "module": [[119, "module-skactiveml"], [119, "module-skactiveml.base"], [119, "module-skactiveml.classifier"], [119, "module-skactiveml.classifier.multiannotator"], [119, "module-skactiveml.exceptions"], [119, "module-skactiveml.pool"], [119, "module-skactiveml.pool.multiannotator"], [119, "module-skactiveml.pool.utils"], [119, "module-skactiveml.stream"], [119, "module-skactiveml.stream.budgetmanager"], [119, "module-skactiveml.utils"], [119, "module-skactiveml.visualization"]], "skactiveml": [[119, "module-skactiveml"]], "skactiveml.base": [[119, "module-skactiveml.base"]], "skactiveml.classifier": [[119, "module-skactiveml.classifier"]], "skactiveml.classifier.multiannotator": [[119, "module-skactiveml.classifier.multiannotator"]], "skactiveml.exceptions": [[119, "module-skactiveml.exceptions"]], "skactiveml.pool": [[119, "module-skactiveml.pool"]], "skactiveml.pool.multiannotator": [[119, "module-skactiveml.pool.multiannotator"]], "skactiveml.pool.utils": [[119, "module-skactiveml.pool.utils"]], "skactiveml.stream": [[119, "module-skactiveml.stream"]], "skactiveml.stream.budgetmanager": [[119, "module-skactiveml.stream.budgetmanager"]], "skactiveml.utils": [[119, "module-skactiveml.utils"]], "skactiveml.visualization": [[119, "module-skactiveml.visualization"]]}})