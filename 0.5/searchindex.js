Search.setIndex({"docnames": ["contributing", "examples/README", "examples/pool/README", "examples/stream/README", "generated/api/skactiveml.base.AnnotatorModelMixin", "generated/api/skactiveml.base.BudgetManager", "generated/api/skactiveml.base.ClassFrequencyEstimator", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.ProbabilisticRegressor", "generated/api/skactiveml.base.QueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy", "generated/api/skactiveml.base.SkactivemlClassifier", "generated/api/skactiveml.base.SkactivemlRegressor", "generated/api/skactiveml.classifier.MixtureModelClassifier", "generated/api/skactiveml.classifier.ParzenWindowClassifier", "generated/api/skactiveml.classifier.SklearnClassifier", "generated/api/skactiveml.classifier.SlidingWindowClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "generated/api/skactiveml.exceptions.MappingError", "generated/api/skactiveml.pool.Badge", "generated/api/skactiveml.pool.BatchBALD", "generated/api/skactiveml.pool.Clue", "generated/api/skactiveml.pool.ContrastiveAL", "generated/api/skactiveml.pool.CoreSet", "generated/api/skactiveml.pool.CostEmbeddingAL", "generated/api/skactiveml.pool.DiscriminativeAL", "generated/api/skactiveml.pool.EpistemicUncertaintySampling", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization", "generated/api/skactiveml.pool.ExpectedModelOutputChange", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction", "generated/api/skactiveml.pool.FourDs", "generated/api/skactiveml.pool.GreedyBALD", "generated/api/skactiveml.pool.GreedySamplingTarget", "generated/api/skactiveml.pool.GreedySamplingX", "generated/api/skactiveml.pool.KLDivergenceMaximization", "generated/api/skactiveml.pool.MonteCarloEER", "generated/api/skactiveml.pool.ParallelUtilityEstimationWrapper", "generated/api/skactiveml.pool.ProbCover", "generated/api/skactiveml.pool.ProbabilisticAL", "generated/api/skactiveml.pool.QueryByCommittee", "generated/api/skactiveml.pool.Quire", "generated/api/skactiveml.pool.RandomSampling", "generated/api/skactiveml.pool.RegressionTreeBasedAL", "generated/api/skactiveml.pool.SubSamplingWrapper", "generated/api/skactiveml.pool.TypiClust", "generated/api/skactiveml.pool.UncertaintySampling", "generated/api/skactiveml.pool.ValueOfInformationEER", "generated/api/skactiveml.pool.average_kl_divergence", "generated/api/skactiveml.pool.batch_bald", "generated/api/skactiveml.pool.cost_reduction", "generated/api/skactiveml.pool.expected_average_precision", "generated/api/skactiveml.pool.k_greedy_center", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "generated/api/skactiveml.pool.uncertainty_scores", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper", "generated/api/skactiveml.pool.variation_ratios", "generated/api/skactiveml.pool.vote_entropy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn", "generated/api/skactiveml.stream.FixedUncertainty", "generated/api/skactiveml.stream.PeriodicSampling", "generated/api/skactiveml.stream.RandomVariableUncertainty", "generated/api/skactiveml.stream.Split", "generated/api/skactiveml.stream.StreamDensityBasedAL", "generated/api/skactiveml.stream.StreamProbabilisticAL", "generated/api/skactiveml.stream.StreamRandomSampling", "generated/api/skactiveml.stream.VariableUncertainty", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "generated/api/skactiveml.utils.ExtLabelEncoder", "generated/api/skactiveml.utils._check_callable", "generated/api/skactiveml.utils.call_func", "generated/api/skactiveml.utils.check_X_y", "generated/api/skactiveml.utils.check_bound", "generated/api/skactiveml.utils.check_budget_manager", "generated/api/skactiveml.utils.check_class_prior", "generated/api/skactiveml.utils.check_classes", "generated/api/skactiveml.utils.check_classifier_params", "generated/api/skactiveml.utils.check_cost_matrix", "generated/api/skactiveml.utils.check_equal_missing_label", "generated/api/skactiveml.utils.check_indices", "generated/api/skactiveml.utils.check_missing_label", "generated/api/skactiveml.utils.check_random_state", "generated/api/skactiveml.utils.check_scalar", "generated/api/skactiveml.utils.check_type", "generated/api/skactiveml.utils.compute_vote_vectors", "generated/api/skactiveml.utils.ext_confusion_matrix", "generated/api/skactiveml.utils.is_labeled", "generated/api/skactiveml.utils.is_unlabeled", "generated/api/skactiveml.utils.labeled_indices", "generated/api/skactiveml.utils.majority_vote", "generated/api/skactiveml.utils.match_signature", "generated/api/skactiveml.utils.rand_argmax", "generated/api/skactiveml.utils.rand_argmin", "generated/api/skactiveml.utils.simple_batch", "generated/api/skactiveml.utils.unlabeled_indices", "generated/api/skactiveml.visualization.mesh", "generated/api/skactiveml.visualization.plot_annotator_utilities", "generated/api/skactiveml.visualization.plot_contour_for_samples", "generated/api/skactiveml.visualization.plot_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_decision_boundary", "generated/api/skactiveml.visualization.plot_stream_training_data", "generated/api/skactiveml.visualization.plot_utilities", "generated/api_reference", "generated/examples/README", "generated/examples/pool/README", "generated/examples/stream/README", "generated/sphinx_gallery_examples/index", "generated/sphinx_gallery_examples/pool/index", "generated/sphinx_gallery_examples/pool/plot-Badge-Batch_Active_Learning_by_Diverse_Gradient_Embedding_(BADGE)", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Batch_Bayesian_Active_Learning_by_Disagreement_(BatchBALD)", "generated/sphinx_gallery_examples/pool/plot-Clue-Clustering_Uncertainty-weighted_Embeddings_(CLUE)", "generated/sphinx_gallery_examples/pool/plot-ContrastiveAL-Contrastive_Active_Learning_(CAL)", "generated/sphinx_gallery_examples/pool/plot-CoreSet-Core_Set", "generated/sphinx_gallery_examples/pool/plot-CostEmbeddingAL-Active_Learning_with_Cost_Embedding_(ALCE)", "generated/sphinx_gallery_examples/pool/plot-DiscriminativeAL-Discriminative_Active_Learning_(DAL)", "generated/sphinx_gallery_examples/pool/plot-EpistemicUncertaintySampling-Epistemic_Uncertainty_Sampling", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelChangeMaximization-Expected_Model_Change", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelOutputChange-Expected_Model_Output_Change", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelVarianceReduction-Expected_Model_Variance_Reduction", "generated/sphinx_gallery_examples/pool/plot-FourDs-Batch_Density-Diversity-Distribution-Distance_Sampling_(Batch4DS)", "generated/sphinx_gallery_examples/pool/plot-FourDs-Density-Diversity-Distribution-Distance_Sampling_(4DS)", "generated/sphinx_gallery_examples/pool/plot-GreedyBALD-Bayesian_Active_Learning_by_Disagreement_(BALD)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Greedy_Sampling_on_the_Target_Space_(GSy)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Improved_Greedy_Sampling_(GSi)", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingX-Greedy_Sampling_on_the_Feature_Space_(GSx)", "generated/sphinx_gallery_examples/pool/plot-KLDivergenceMaximization-Regression_based_Kullback_Leibler_Divergence_Maximization", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Log-Loss", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Misclassification-Loss", "generated/sphinx_gallery_examples/pool/plot-ParallelUtilityEstimationWrapper-Parallel_Utility_Estimation_Wrapper", "generated/sphinx_gallery_examples/pool/plot-ProbCover-Probability_Coverage_(ProbCover)", "generated/sphinx_gallery_examples/pool/plot-ProbabilisticAL-Multi-class_Probabilistic_Active_Learning_(McPAL)", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Empirical_Variance", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Kullback-Leibler_Divergence", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Variation_Ratios", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Vote_Entropy", "generated/sphinx_gallery_examples/pool/plot-Quire-Querying_Informative_and_Representative_Examples_(QUIRE)", "generated/sphinx_gallery_examples/pool/plot-RandomSampling-Random_Sampling", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Diversity_Selection", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Random_Selection", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Representativity_Selection", "generated/sphinx_gallery_examples/pool/plot-SubSamplingWrapper-Sub-sampling_Wrapper", "generated/sphinx_gallery_examples/pool/plot-TypiClust-Typical_Clustering_(TypiClust)", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Density-weighted_Uncertainty_Sampling", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Dual_strategy_for_Active_Learning", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Expected_Average_Precision", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Entropy", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Least-Confidence", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Margin", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_(VOI)", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Labeled_Samples", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Unlabeled_Samples", "generated/sphinx_gallery_examples/pool/sg_execution_times", "generated/sphinx_gallery_examples/sg_execution_times", "generated/sphinx_gallery_examples/stream/index", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyFixUn-Cognitive_Dual-Query_Strategy_with_Fixed-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRan-Cognitive_Dual-Query_Strategy_with_Random_Sampling", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRanVarUn-Cognitive_Dual-Query_Strategy_with_Randomized-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyVarUn-Cognitive_Dual-Query_Strategy_with_Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-FixedUncertainty-Fixed-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-PeriodicSampling-Periodic_Sampling", "generated/sphinx_gallery_examples/stream/plot-RandomVariableUncertainty-Randomized-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/plot-Split-Split", "generated/sphinx_gallery_examples/stream/plot-StreamDensityBasedAL-Density_Based_Active_Learning_for_Data_Streams", "generated/sphinx_gallery_examples/stream/plot-StreamProbabilisticAL-Probabilistic_Active_Learning_in_Datastreams", "generated/sphinx_gallery_examples/stream/plot-StreamRandomSampling-Stream_Random_Sampling", "generated/sphinx_gallery_examples/stream/plot-VariableUncertainty-Variable-Uncertainty", "generated/sphinx_gallery_examples/stream/sg_execution_times", "generated/strategy_overview", "generated/tutorials/00_pool_getting_started", "generated/tutorials/01_deep_pool_al_with_skorch", "generated/tutorials/02_pool_regression_getting_started", "generated/tutorials/03_pool_oracle_annotations", "generated/tutorials/04_pool_simple_evaluation_study", "generated/tutorials/05_pool_al_with_self_supervised_learning", "generated/tutorials/10_multiple_annotators_getting_started", "generated/tutorials/20_stream_getting_started", "generated/tutorials/21_stream_batch_with_pool_al", "generated/tutorials/22_river_classifier", "generated/tutorials_colab/00_pool_getting_started", "generated/tutorials_colab/01_deep_pool_al_with_skorch", "generated/tutorials_colab/02_pool_regression_getting_started", "generated/tutorials_colab/03_pool_oracle_annotations", "generated/tutorials_colab/04_pool_simple_evaluation_study", "generated/tutorials_colab/05_pool_al_with_self_supervised_learning", "generated/tutorials_colab/10_multiple_annotators_getting_started", "generated/tutorials_colab/20_stream_getting_started", "generated/tutorials_colab/21_stream_batch_with_pool_al", "generated/tutorials_colab/22_river_classifier", "index", "sg_execution_times", "skactiveml.utils.MISSING_LABEL", "tutorials"], "filenames": ["contributing.rst", "examples/README.rst", "examples/pool/README.rst", "examples/stream/README.rst", "generated/api/skactiveml.base.AnnotatorModelMixin.rst", "generated/api/skactiveml.base.BudgetManager.rst", "generated/api/skactiveml.base.ClassFrequencyEstimator.rst", "generated/api/skactiveml.base.MultiAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.ProbabilisticRegressor.rst", "generated/api/skactiveml.base.QueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorPoolQueryStrategy.rst", "generated/api/skactiveml.base.SingleAnnotatorStreamQueryStrategy.rst", "generated/api/skactiveml.base.SkactivemlClassifier.rst", "generated/api/skactiveml.base.SkactivemlRegressor.rst", "generated/api/skactiveml.classifier.MixtureModelClassifier.rst", "generated/api/skactiveml.classifier.ParzenWindowClassifier.rst", "generated/api/skactiveml.classifier.SklearnClassifier.rst", "generated/api/skactiveml.classifier.SlidingWindowClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.rst", "generated/api/skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.rst", "generated/api/skactiveml.exceptions.MappingError.rst", "generated/api/skactiveml.pool.Badge.rst", "generated/api/skactiveml.pool.BatchBALD.rst", "generated/api/skactiveml.pool.Clue.rst", "generated/api/skactiveml.pool.ContrastiveAL.rst", "generated/api/skactiveml.pool.CoreSet.rst", "generated/api/skactiveml.pool.CostEmbeddingAL.rst", "generated/api/skactiveml.pool.DiscriminativeAL.rst", "generated/api/skactiveml.pool.EpistemicUncertaintySampling.rst", "generated/api/skactiveml.pool.ExpectedModelChangeMaximization.rst", "generated/api/skactiveml.pool.ExpectedModelOutputChange.rst", "generated/api/skactiveml.pool.ExpectedModelVarianceReduction.rst", "generated/api/skactiveml.pool.FourDs.rst", "generated/api/skactiveml.pool.GreedyBALD.rst", "generated/api/skactiveml.pool.GreedySamplingTarget.rst", "generated/api/skactiveml.pool.GreedySamplingX.rst", "generated/api/skactiveml.pool.KLDivergenceMaximization.rst", "generated/api/skactiveml.pool.MonteCarloEER.rst", "generated/api/skactiveml.pool.ParallelUtilityEstimationWrapper.rst", "generated/api/skactiveml.pool.ProbCover.rst", "generated/api/skactiveml.pool.ProbabilisticAL.rst", "generated/api/skactiveml.pool.QueryByCommittee.rst", "generated/api/skactiveml.pool.Quire.rst", "generated/api/skactiveml.pool.RandomSampling.rst", "generated/api/skactiveml.pool.RegressionTreeBasedAL.rst", "generated/api/skactiveml.pool.SubSamplingWrapper.rst", "generated/api/skactiveml.pool.TypiClust.rst", "generated/api/skactiveml.pool.UncertaintySampling.rst", "generated/api/skactiveml.pool.ValueOfInformationEER.rst", "generated/api/skactiveml.pool.average_kl_divergence.rst", "generated/api/skactiveml.pool.batch_bald.rst", "generated/api/skactiveml.pool.cost_reduction.rst", "generated/api/skactiveml.pool.expected_average_precision.rst", "generated/api/skactiveml.pool.k_greedy_center.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.rst", "generated/api/skactiveml.pool.multiannotator.IntervalEstimationThreshold.rst", "generated/api/skactiveml.pool.multiannotator.SingleAnnotatorWrapper.rst", "generated/api/skactiveml.pool.uncertainty_scores.rst", "generated/api/skactiveml.pool.utils.IndexClassifierWrapper.rst", "generated/api/skactiveml.pool.variation_ratios.rst", "generated/api/skactiveml.pool.vote_entropy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategy.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyFixUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRan.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.rst", "generated/api/skactiveml.stream.CognitiveDualQueryStrategyVarUn.rst", "generated/api/skactiveml.stream.FixedUncertainty.rst", "generated/api/skactiveml.stream.PeriodicSampling.rst", "generated/api/skactiveml.stream.RandomVariableUncertainty.rst", "generated/api/skactiveml.stream.Split.rst", "generated/api/skactiveml.stream.StreamDensityBasedAL.rst", "generated/api/skactiveml.stream.StreamProbabilisticAL.rst", "generated/api/skactiveml.stream.StreamRandomSampling.rst", "generated/api/skactiveml.stream.VariableUncertainty.rst", "generated/api/skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.rst", "generated/api/skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.rst", "generated/api/skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.SplitBudgetManager.rst", "generated/api/skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.rst", "generated/api/skactiveml.utils.ExtLabelEncoder.rst", "generated/api/skactiveml.utils._check_callable.rst", "generated/api/skactiveml.utils.call_func.rst", "generated/api/skactiveml.utils.check_X_y.rst", "generated/api/skactiveml.utils.check_bound.rst", "generated/api/skactiveml.utils.check_budget_manager.rst", "generated/api/skactiveml.utils.check_class_prior.rst", "generated/api/skactiveml.utils.check_classes.rst", "generated/api/skactiveml.utils.check_classifier_params.rst", "generated/api/skactiveml.utils.check_cost_matrix.rst", "generated/api/skactiveml.utils.check_equal_missing_label.rst", "generated/api/skactiveml.utils.check_indices.rst", "generated/api/skactiveml.utils.check_missing_label.rst", "generated/api/skactiveml.utils.check_random_state.rst", "generated/api/skactiveml.utils.check_scalar.rst", "generated/api/skactiveml.utils.check_type.rst", "generated/api/skactiveml.utils.compute_vote_vectors.rst", "generated/api/skactiveml.utils.ext_confusion_matrix.rst", "generated/api/skactiveml.utils.is_labeled.rst", "generated/api/skactiveml.utils.is_unlabeled.rst", "generated/api/skactiveml.utils.labeled_indices.rst", "generated/api/skactiveml.utils.majority_vote.rst", "generated/api/skactiveml.utils.match_signature.rst", "generated/api/skactiveml.utils.rand_argmax.rst", "generated/api/skactiveml.utils.rand_argmin.rst", "generated/api/skactiveml.utils.simple_batch.rst", "generated/api/skactiveml.utils.unlabeled_indices.rst", "generated/api/skactiveml.visualization.mesh.rst", "generated/api/skactiveml.visualization.plot_annotator_utilities.rst", "generated/api/skactiveml.visualization.plot_contour_for_samples.rst", "generated/api/skactiveml.visualization.plot_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_decision_boundary.rst", "generated/api/skactiveml.visualization.plot_stream_training_data.rst", "generated/api/skactiveml.visualization.plot_utilities.rst", "generated/api_reference.rst", "generated/examples/README.rst", "generated/examples/pool/README.rst", "generated/examples/stream/README.rst", "generated/sphinx_gallery_examples/index.rst", "generated/sphinx_gallery_examples/pool/index.rst", "generated/sphinx_gallery_examples/pool/plot-Badge-Batch_Active_Learning_by_Diverse_Gradient_Embedding_(BADGE).rst", "generated/sphinx_gallery_examples/pool/plot-BatchBALD-Batch_Bayesian_Active_Learning_by_Disagreement_(BatchBALD).rst", "generated/sphinx_gallery_examples/pool/plot-Clue-Clustering_Uncertainty-weighted_Embeddings_(CLUE).rst", "generated/sphinx_gallery_examples/pool/plot-ContrastiveAL-Contrastive_Active_Learning_(CAL).rst", "generated/sphinx_gallery_examples/pool/plot-CoreSet-Core_Set.rst", "generated/sphinx_gallery_examples/pool/plot-CostEmbeddingAL-Active_Learning_with_Cost_Embedding_(ALCE).rst", "generated/sphinx_gallery_examples/pool/plot-DiscriminativeAL-Discriminative_Active_Learning_(DAL).rst", "generated/sphinx_gallery_examples/pool/plot-EpistemicUncertaintySampling-Epistemic_Uncertainty_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelChangeMaximization-Expected_Model_Change.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelOutputChange-Expected_Model_Output_Change.rst", "generated/sphinx_gallery_examples/pool/plot-ExpectedModelVarianceReduction-Expected_Model_Variance_Reduction.rst", "generated/sphinx_gallery_examples/pool/plot-FourDs-Batch_Density-Diversity-Distribution-Distance_Sampling_(Batch4DS).rst", "generated/sphinx_gallery_examples/pool/plot-FourDs-Density-Diversity-Distribution-Distance_Sampling_(4DS).rst", "generated/sphinx_gallery_examples/pool/plot-GreedyBALD-Bayesian_Active_Learning_by_Disagreement_(BALD).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Greedy_Sampling_on_the_Target_Space_(GSy).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingTarget-Improved_Greedy_Sampling_(GSi).rst", "generated/sphinx_gallery_examples/pool/plot-GreedySamplingX-Greedy_Sampling_on_the_Feature_Space_(GSx).rst", "generated/sphinx_gallery_examples/pool/plot-KLDivergenceMaximization-Regression_based_Kullback_Leibler_Divergence_Maximization.rst", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Log-Loss.rst", "generated/sphinx_gallery_examples/pool/plot-MonteCarloEER-Monte-Carlo_EER_with_Misclassification-Loss.rst", "generated/sphinx_gallery_examples/pool/plot-ParallelUtilityEstimationWrapper-Parallel_Utility_Estimation_Wrapper.rst", "generated/sphinx_gallery_examples/pool/plot-ProbCover-Probability_Coverage_(ProbCover).rst", "generated/sphinx_gallery_examples/pool/plot-ProbabilisticAL-Multi-class_Probabilistic_Active_Learning_(McPAL).rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Empirical_Variance.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Kullback-Leibler_Divergence.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Variation_Ratios.rst", "generated/sphinx_gallery_examples/pool/plot-QueryByCommittee-Query-by-Committee_(QBC)_with_Vote_Entropy.rst", "generated/sphinx_gallery_examples/pool/plot-Quire-Querying_Informative_and_Representative_Examples_(QUIRE).rst", "generated/sphinx_gallery_examples/pool/plot-RandomSampling-Random_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Diversity_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Random_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-RegressionTreeBasedAL-Regression_Tree_Based_Active_Learning_(RT-AL)_with_Representativity_Selection.rst", "generated/sphinx_gallery_examples/pool/plot-SubSamplingWrapper-Sub-sampling_Wrapper.rst", "generated/sphinx_gallery_examples/pool/plot-TypiClust-Typical_Clustering_(TypiClust).rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Density-weighted_Uncertainty_Sampling.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Dual_strategy_for_Active_Learning.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Expected_Average_Precision.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Entropy.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Least-Confidence.rst", "generated/sphinx_gallery_examples/pool/plot-UncertaintySampling-Uncertainty_Sampling_with_Margin.rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_(VOI).rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Labeled_Samples.rst", "generated/sphinx_gallery_examples/pool/plot-ValueOfInformationEER-Value_of_Information_on_Unlabeled_Samples.rst", "generated/sphinx_gallery_examples/pool/sg_execution_times.rst", "generated/sphinx_gallery_examples/sg_execution_times.rst", "generated/sphinx_gallery_examples/stream/index.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyFixUn-Cognitive_Dual-Query_Strategy_with_Fixed-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRan-Cognitive_Dual-Query_Strategy_with_Random_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyRanVarUn-Cognitive_Dual-Query_Strategy_with_Randomized-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-CognitiveDualQueryStrategyVarUn-Cognitive_Dual-Query_Strategy_with_Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-FixedUncertainty-Fixed-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-PeriodicSampling-Periodic_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-RandomVariableUncertainty-Randomized-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/plot-Split-Split.rst", "generated/sphinx_gallery_examples/stream/plot-StreamDensityBasedAL-Density_Based_Active_Learning_for_Data_Streams.rst", "generated/sphinx_gallery_examples/stream/plot-StreamProbabilisticAL-Probabilistic_Active_Learning_in_Datastreams.rst", "generated/sphinx_gallery_examples/stream/plot-StreamRandomSampling-Stream_Random_Sampling.rst", "generated/sphinx_gallery_examples/stream/plot-VariableUncertainty-Variable-Uncertainty.rst", "generated/sphinx_gallery_examples/stream/sg_execution_times.rst", "generated/strategy_overview.rst", "generated/tutorials/00_pool_getting_started.ipynb", "generated/tutorials/01_deep_pool_al_with_skorch.ipynb", "generated/tutorials/02_pool_regression_getting_started.ipynb", "generated/tutorials/03_pool_oracle_annotations.ipynb", "generated/tutorials/04_pool_simple_evaluation_study.ipynb", "generated/tutorials/05_pool_al_with_self_supervised_learning.ipynb", "generated/tutorials/10_multiple_annotators_getting_started.ipynb", "generated/tutorials/20_stream_getting_started.ipynb", "generated/tutorials/21_stream_batch_with_pool_al.ipynb", "generated/tutorials/22_river_classifier.ipynb", "generated/tutorials_colab/00_pool_getting_started.ipynb", "generated/tutorials_colab/01_deep_pool_al_with_skorch.ipynb", "generated/tutorials_colab/02_pool_regression_getting_started.ipynb", "generated/tutorials_colab/03_pool_oracle_annotations.ipynb", "generated/tutorials_colab/04_pool_simple_evaluation_study.ipynb", "generated/tutorials_colab/05_pool_al_with_self_supervised_learning.ipynb", "generated/tutorials_colab/10_multiple_annotators_getting_started.ipynb", "generated/tutorials_colab/20_stream_getting_started.ipynb", "generated/tutorials_colab/21_stream_batch_with_pool_al.ipynb", "generated/tutorials_colab/22_river_classifier.ipynb", "index.rst", "sg_execution_times.rst", "skactiveml.utils.MISSING_LABEL.rst", "tutorials.rst"], "titles": ["Contributing Guide", "Examples", "Pool Based AL Strategies", "Stream Based AL Strategies", "skactiveml.base.AnnotatorModelMixin", "skactiveml.base.BudgetManager", "skactiveml.base.ClassFrequencyEstimator", "skactiveml.base.MultiAnnotatorPoolQueryStrategy", "skactiveml.base.ProbabilisticRegressor", "skactiveml.base.QueryStrategy", "skactiveml.base.SingleAnnotatorPoolQueryStrategy", "skactiveml.base.SingleAnnotatorStreamQueryStrategy", "skactiveml.base.SkactivemlClassifier", "skactiveml.base.SkactivemlRegressor", "skactiveml.classifier.MixtureModelClassifier", "skactiveml.classifier.ParzenWindowClassifier", "skactiveml.classifier.SklearnClassifier", "skactiveml.classifier.SlidingWindowClassifier", "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier", "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression", "skactiveml.exceptions.MappingError", "skactiveml.pool.Badge", "skactiveml.pool.BatchBALD", "skactiveml.pool.Clue", "skactiveml.pool.ContrastiveAL", "skactiveml.pool.CoreSet", "skactiveml.pool.CostEmbeddingAL", "skactiveml.pool.DiscriminativeAL", "skactiveml.pool.EpistemicUncertaintySampling", "skactiveml.pool.ExpectedModelChangeMaximization", "skactiveml.pool.ExpectedModelOutputChange", "skactiveml.pool.ExpectedModelVarianceReduction", "skactiveml.pool.FourDs", "skactiveml.pool.GreedyBALD", "skactiveml.pool.GreedySamplingTarget", "skactiveml.pool.GreedySamplingX", "skactiveml.pool.KLDivergenceMaximization", "skactiveml.pool.MonteCarloEER", "skactiveml.pool.ParallelUtilityEstimationWrapper", "skactiveml.pool.ProbCover", "skactiveml.pool.ProbabilisticAL", "skactiveml.pool.QueryByCommittee", "skactiveml.pool.Quire", "skactiveml.pool.RandomSampling", "skactiveml.pool.RegressionTreeBasedAL", "skactiveml.pool.SubSamplingWrapper", "skactiveml.pool.TypiClust", "skactiveml.pool.UncertaintySampling", "skactiveml.pool.ValueOfInformationEER", "skactiveml.pool.average_kl_divergence", "skactiveml.pool.batch_bald", "skactiveml.pool.cost_reduction", "skactiveml.pool.expected_average_precision", "skactiveml.pool.k_greedy_center", "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel", "skactiveml.pool.multiannotator.IntervalEstimationThreshold", "skactiveml.pool.multiannotator.SingleAnnotatorWrapper", "skactiveml.pool.uncertainty_scores", "skactiveml.pool.utils.IndexClassifierWrapper", "skactiveml.pool.variation_ratios", "skactiveml.pool.vote_entropy", "skactiveml.stream.CognitiveDualQueryStrategy", "skactiveml.stream.CognitiveDualQueryStrategyFixUn", "skactiveml.stream.CognitiveDualQueryStrategyRan", "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn", "skactiveml.stream.CognitiveDualQueryStrategyVarUn", "skactiveml.stream.FixedUncertainty", "skactiveml.stream.PeriodicSampling", "skactiveml.stream.RandomVariableUncertainty", "skactiveml.stream.Split", "skactiveml.stream.StreamDensityBasedAL", "skactiveml.stream.StreamProbabilisticAL", "skactiveml.stream.StreamRandomSampling", "skactiveml.stream.VariableUncertainty", "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter", "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager", "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite", "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.RandomBudgetManager", "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager", "skactiveml.stream.budgetmanager.SplitBudgetManager", "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager", "skactiveml.utils.ExtLabelEncoder", "skactiveml.utils._check_callable", "skactiveml.utils.call_func", "skactiveml.utils.check_X_y", "skactiveml.utils.check_bound", "skactiveml.utils.check_budget_manager", "skactiveml.utils.check_class_prior", "skactiveml.utils.check_classes", "skactiveml.utils.check_classifier_params", "skactiveml.utils.check_cost_matrix", "skactiveml.utils.check_equal_missing_label", "skactiveml.utils.check_indices", "skactiveml.utils.check_missing_label", "skactiveml.utils.check_random_state", "skactiveml.utils.check_scalar", "skactiveml.utils.check_type", "skactiveml.utils.compute_vote_vectors", "skactiveml.utils.ext_confusion_matrix", "skactiveml.utils.is_labeled", "skactiveml.utils.is_unlabeled", "skactiveml.utils.labeled_indices", "skactiveml.utils.majority_vote", "skactiveml.utils.match_signature", "skactiveml.utils.rand_argmax", "skactiveml.utils.rand_argmin", "skactiveml.utils.simple_batch", "skactiveml.utils.unlabeled_indices", "skactiveml.visualization.mesh", "skactiveml.visualization.plot_annotator_utilities", "skactiveml.visualization.plot_contour_for_samples", "skactiveml.visualization.plot_decision_boundary", "skactiveml.visualization.plot_stream_decision_boundary", "skactiveml.visualization.plot_stream_training_data", "skactiveml.visualization.plot_utilities", "API Reference", "Examples", "Pool Based AL Strategies", "Stream Based AL Strategies", "Examples", "Pool Based AL Strategies", "Batch Active Learning by Diverse Gradient Embedding (BADGE)", "Batch Bayesian Active Learning by Disagreement (BatchBALD)", "Clustering Uncertainty-weighted Embeddings (CLUE)", "Contrastive Active Learning (CAL)", "Core Set", "Active Learning with Cost Embedding", "Discriminative Active Learning", "Epistemic Uncertainty Sampling", "Expected Model Change", "Expected Model Output Change", "Expected Model Variance Reduction", "Batch Density-Diversity-Distribution-Distance Sampling", "Density-Diversity-Distribution-Distance Sampling", "Bayesian Active Learning by Disagreement (BALD)", "Greedy Sampling on the Target Space (GSy)", "Improved Greedy Sampling (GSi)", "Greedy Sampling on the Feature Space (GSx)", "Regression based Kullback Leibler Divergence Maximization", "Monte-Carlo EER with Log-Loss", "Monte-Carlo EER with Misclassification-Loss", "Parallel Utility Estimation Wrapper", "Probability Coverage (ProbCover)", "Multi-class Probabilistic Active Learning", "Query-by-Committee (QBC) with Empirical Variance", "Query-by-Committee (QBC) with Kullback-Leibler Divergence", "Query-by-Committee (QBC) with Variation Ratios", "Query-by-Committee (QBC) with Vote Entropy", "Querying Informative and Representative Examples", "Random Sampling", "Regression Tree Based Active Learning (RT-AL) with Diversity Selection", "Regression Tree Based Active Learning (RT-AL) with Random Selection", "Regression Tree Based Active Learning (RT-AL) with Representativity Selection", "Sub-sampling Wrapper", "Typical Clustering (TypiClust)", "Density-weighted Uncertainty Sampling", "Dual strategy for Active Learning", "Expected Average Precision", "Uncertainty Sampling with Entropy", "Uncertainty Sampling with Least-Confidence", "Uncertainty Sampling with Margin", "Value of Information", "Value of Information on Labeled Samples", "Value of Information on Unlabeled Samples", "Computation times", "Computation times", "Stream Based AL Strategies", "Cognitive Dual-Query Strategy with Fixed-Uncertainty", "Cognitive Dual-Query Strategy with Random Sampling", "Cognitive Dual-Query Strategy with Randomized-Variable-Uncertainty", "Cognitive Dual-Query Strategy with Variable-Uncertainty", "Fixed-Uncertainty", "Periodic Sampling", "Randomized-Variable-Uncertainty", "Split", "Density Based Active Learning for Data Streams", "Probabilistic Active Learning in Datastreams", "Stream Random Sampling", "Variable-Uncertainty", "Computation times", "Strategy Overview", "Pool-based Active Learning - Getting Started", "Deep Pool-based Active Learning: Scikit-activeml with Skorch", "Pool-based Active Learning for Regression - Getting Started", "Sample Annotating", "Pool-based Active Learning - Simple Evaluation Study", "Active Image Classification via Self-supervised Learning", "Multi-annotator Pool-based Active Learning - Getting Started", "Stream-based Active Learning - Getting Started", "Batch Stream Active Learning with Pool-based Query Strategies", "Stream-based Active Learning with River", "Pool-based Active Learning - Getting Started", "Deep Pool-based Active Learning: Scikit-activeml with Skorch", "Pool-based Active Learning for Regression - Getting Started", "Sample Annotating", "Pool-based Active Learning - Simple Evaluation Study", "Active Image Classification via Self-supervised Learning", "Multi-annotator Pool-based Active Learning - Getting Started", "Stream-based Active Learning - Getting Started", "Batch Stream Active Learning with Pool-based Query Strategies", "Stream-based Active Learning with River", "scikit-activeml: A Library and Toolbox for Active Learning Algorithms", "Computation times", "skactiveml.utils.MISSING_LABEL", "Tutorials"], "terms": {"scikit": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 26, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 205], "activeml": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 205], "i": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 93, 94, 95, 96, 97, 98, 99, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "librari": [0, 182, 187, 191, 192, 197, 201], "implement": [0, 16, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 75, 80, 112, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 181, 182, 183, 185, 192, 193, 195, 202], "most": [0, 11, 23, 30, 35, 57, 61, 62, 63, 64, 65, 66, 68, 73, 75, 77, 79, 81, 182, 184, 192, 194, 202], "import": [0, 37, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "activ": [0, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 100, 102, 107, 108, 111, 112, 113, 114, 115, 116, 120, 121, 124, 126, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 185, 195, 203, 204, 205], "learn": [0, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 19, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 99, 100, 102, 107, 108, 111, 112, 113, 114, 115, 116, 120, 121, 124, 126, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 179, 180, 181, 185, 195, 203, 204, 205], "It": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 33, 34, 35, 44, 55, 71, 74, 97, 105, 106, 112, 182, 185, 187, 192, 195, 197], "built": [0, 182, 184, 192, 194], "upon": [0, 182, 192], "well": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 109, 182, 189, 190, 191, 192, 199, 200, 201, 202], "known": [0, 99, 182, 192], "machin": [0, 19, 41, 49, 140, 141, 146, 155, 156, 157, 176, 181, 182, 185, 187, 192, 195, 197, 202], "framework": [0, 36, 139, 181, 183, 185, 193, 195], "our": [0, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202], "philosophi": 0, "extend": [0, 6, 48, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201], "sklearn": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 26, 28, 29, 30, 34, 35, 39, 40, 41, 42, 44, 46, 54, 61, 62, 63, 64, 65, 70, 71, 99, 104, 112, 113, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "eco": 0, "system": [0, 22, 42, 50, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 123, 143, 149, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181], "relev": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 27, 37, 41, 48, 54, 182, 192], "tool": [0, 116, 185, 195], "partial": [0, 16, 17, 58], "unlabel": [0, 6, 7, 9, 10, 12, 15, 17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 55, 56, 58, 82, 85, 102, 110, 111, 112, 113, 114, 115, 120, 121, 165, 181, 182, 184, 185, 187, 192, 194, 195, 197, 202, 203, 204], "data": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 85, 94, 96, 103, 105, 106, 110, 111, 113, 114, 115, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 185, 195, 202, 203, 204], "repositori": 0, "": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 92, 96, 105, 106, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202], "structur": [0, 105, 106], "given": [0, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 51, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 86, 92, 94, 95, 96, 97, 99, 104, 107, 109, 110, 111, 112, 113, 114, 115, 183, 187, 188, 193, 197, 198, 202], "imag": [0, 41, 48, 59, 147, 164, 181, 183, 185, 193, 195, 202, 205], "below": [0, 39, 181, 182, 184, 187, 188, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 202], "each": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 90, 92, 98, 103, 112, 113, 114, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201], "node": 0, "repres": [0, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 56, 58, 61, 62, 63, 64, 65, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 90, 92, 94, 98, 99, 100, 101, 102, 103, 108, 112, 115, 120, 121, 165, 181, 189, 190, 191, 199, 200, 201, 203, 204], "class": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 89, 90, 91, 98, 99, 100, 101, 102, 103, 104, 108, 112, 114, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204], "interfac": [0, 185, 195], "The": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 93, 94, 95, 96, 97, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202], "arrow": 0, "illustr": [0, 202], "inherit": [0, 61, 185, 195], "hierarchi": 0, "among": [0, 53], "them": [0, 18, 58, 187, 189, 191, 197, 199, 201], "function": [0, 11, 15, 17, 29, 34, 35, 37, 39, 40, 42, 48, 53, 56, 58, 61, 62, 63, 64, 65, 67, 70, 71, 72, 83, 84, 97, 99, 103, 104, 105, 106, 109, 110, 112, 115, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201], "dash": [0, 112], "yet": 0, "avail": [0, 7, 15, 20, 38, 55, 56, 57, 58, 67, 74, 75, 78, 184, 185, 189, 190, 191, 194, 195, 199, 200, 201], "In": [0, 7, 11, 16, 17, 18, 24, 26, 30, 41, 48, 49, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 70, 71, 74, 105, 106, 122, 124, 125, 126, 127, 129, 130, 131, 140, 141, 143, 144, 145, 146, 147, 148, 155, 156, 157, 158, 162, 163, 164, 176, 177, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201], "packag": [0, 84, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204], "skactiveml": [0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "three": [0, 44, 57, 185, 188, 195, 198], "major": [0, 18, 54, 55, 56, 188, 198], "compon": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 186, 187, 196, 197], "e": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 58, 74, 75, 76, 78, 79, 80, 81, 82, 84, 93, 110, 111, 113, 114, 115, 183, 185, 186, 187, 193, 195, 196, 197], "skactivemlclassifi": [0, 6, 16, 17, 18, 19, 21, 22, 23, 24, 27, 33, 37, 41, 47, 48, 55, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 185, 195], "skactivemlregressor": [0, 8, 29, 34, 41, 44], "querystrategi": [0, 11, 110, 185, 195], "modul": [0, 26, 99, 116, 183, 193, 202], "ar": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 89, 90, 92, 93, 95, 99, 103, 107, 110, 115, 116, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202], "necessari": [0, 58, 185, 187, 189, 190, 191, 195, 197, 199, 200, 201], "deal": [0, 16, 55, 188, 198], "specif": [0, 18, 97, 187, 197, 202], "estim": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 99, 102, 112, 115, 120, 121, 140, 141, 165, 181, 183, 191, 193, 201, 203, 204], "thi": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 91, 99, 104, 110, 111, 115, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "wai": [0, 48, 183, 193, 202], "can": [0, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 34, 38, 39, 48, 56, 58, 61, 62, 63, 64, 65, 67, 72, 85, 96, 97, 111, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202], "easili": [0, 202], "zero": [0, 91, 144, 183, 188, 193, 198], "initi": [0, 14, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 183, 193, 202], "label": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 75, 79, 80, 81, 82, 85, 89, 90, 92, 94, 98, 99, 100, 101, 102, 103, 108, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204], "regard": [0, 4, 6, 12, 14, 15, 16, 17, 18, 19, 183, 193], "we": [0, 15, 58, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "current": [0, 37, 48, 58, 111, 114, 202], "differ": [0, 11, 24, 36, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 99, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 197, 198, 202], "between": [0, 19, 20, 23, 24, 25, 32, 36, 39, 50, 57, 82, 86, 184, 185, 191, 194, 195, 201], "larg": [0, 183, 187, 193, 197, 202], "sampl": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 98, 99, 100, 102, 103, 107, 108, 110, 111, 112, 113, 114, 115, 120, 121, 127, 158, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 179, 180, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205], "arriv": [0, 67], "sequenti": 0, "paradigm": 0, "On": 0, "top": [0, 33, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 202], "both": [0, 21, 23, 39, 46, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 182, 192], "also": [0, 7, 10, 11, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 97, 182, 185, 186, 187, 188, 192, 195, 196, 197, 198], "distinguish": 0, "set": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 93, 102, 107, 110, 111, 112, 113, 114, 115, 116, 120, 121, 165, 169, 170, 181, 185, 187, 195, 197, 202, 203, 204], "latter": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "multipl": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 50, 54, 55, 56, 58, 99, 103, 105, 106, 116, 188, 189, 190, 191, 198, 199, 200, 201], "error": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 30, 37, 48, 54, 55, 85, 94, 96, 140, 141, 186, 196], "prone": [0, 55], "provid": [0, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 54, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 184, 185, 187, 188, 189, 190, 191, 194, 195, 197, 198, 199, 200, 201, 202], "As": [0, 19, 48, 67, 72, 182, 184, 185, 186, 192, 194, 195, 196, 202], "result": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 58, 67, 85, 103, 105, 106, 184, 188, 189, 190, 191, 194, 198, 199, 200, 201, 202], "onli": [0, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 26, 27, 28, 34, 38, 39, 41, 44, 47, 53, 54, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 90, 91, 110, 114, 115, 184, 185, 186, 187, 189, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202], "decid": [0, 54, 55, 189, 191, 199, 201], "which": [0, 5, 6, 7, 10, 11, 14, 15, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 94, 110, 111, 112, 113, 114, 115, 116, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 202], "should": [0, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 44, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 104, 113, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "big": [0, 176, 181], "all": [0, 4, 5, 7, 8, 9, 10, 11, 13, 15, 21, 22, 26, 28, 32, 33, 37, 38, 40, 41, 43, 45, 47, 48, 49, 50, 52, 53, 55, 56, 58, 60, 84, 85, 99, 110, 114, 115, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203], "who": [0, 188, 198], "project": [0, 202], "new": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 37, 48, 53, 54, 58, 70, 85, 95, 113, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 186, 187, 189, 190, 191, 192, 196, 197, 199, 200, 201], "enhanc": 0, "fix": [0, 6, 9, 11, 12, 15, 27, 61, 62, 66, 75, 113, 114, 120, 167, 180, 181, 186, 187, 196, 197, 203, 204], "have": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 96, 97, 102, 104, 108, 114, 185, 186, 187, 188, 189, 191, 195, 196, 197, 198, 199, 201], "ani": [0, 15, 17, 18, 34, 35, 40, 42, 67, 71, 72, 85, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 202], "question": [0, 74], "pleas": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 187, 197, 202], "reach": [0, 61, 62, 63, 64, 65, 182, 192], "out": [0, 39, 183, 189, 190, 191, 193, 199, 200, 201], "other": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54, 90, 92, 99, 110, 115, 182, 183, 185, 189, 190, 191, 192, 193, 195, 199, 200, 201, 202], "via": [0, 11, 23, 47, 52, 74, 124, 158, 181, 188, 198, 202, 205], "follow": [0, 37, 48, 56, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "channel": [0, 183, 193], "github": [0, 187, 197, 202], "summar": 0, "upcom": 0, "featur": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 29, 30, 31, 34, 35, 67, 72, 85, 86, 100, 102, 120, 121, 165, 181, 182, 184, 186, 187, 189, 190, 191, 192, 194, 196, 197, 199, 200, 201, 203, 204], "befor": [0, 21, 45, 189, 190, 191, 199, 200, 201], "might": [0, 30, 37, 48, 58, 85, 186, 187, 196, 197], "execut": [0, 165, 166, 180, 182, 183, 185, 192, 193, 195, 202, 203], "step": [0, 18, 19, 37, 48, 76, 77, 78, 79, 80, 81, 113, 183, 185, 187, 193, 195, 197], "There": [0, 6, 14, 15, 57, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 182, 192], "sever": 0, "creat": [0, 87, 100, 101, 107, 183, 184, 186, 187, 189, 190, 191, 193, 194, 196, 197, 199, 200, 201, 202], "local": [0, 61, 62, 63, 64, 65, 70, 185, 195], "python": [0, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 193, 202], "virtualenv": 0, "pipenv": 0, "etc": [0, 30, 31, 36, 85], "One": 0, "possibl": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 97, 110, 115, 183, 193], "workflow": [0, 187, 197], "us": [0, 5, 7, 17, 18, 19, 50, 53, 54, 55, 56, 57, 58, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 95, 99, 110, 136, 137, 138, 156, 157, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202], "name": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 94, 96, 97, 104, 186, 187, 196, 197], "conda": 0, "n": [0, 15, 37, 41, 48, 68, 107, 147, 156, 157, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 194], "To": [0, 11, 55, 61, 68, 74, 182, 185, 186, 187, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202], "sure": [0, 85], "correct": [0, 19, 48, 54, 83, 97, 188, 198], "Then": [0, 40, 47, 56, 182, 188, 192, 198], "pip": [0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "now": [0, 184, 194], "some": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 37, 48, 54, 85, 184, 185, 189, 190, 191, 194, 195, 199, 200, 201], "requir": [0, 34, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 183, 185, 193, 195, 202], "defin": [0, 6, 8, 12, 13, 14, 15, 18, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 42, 44, 47, 48, 55, 57, 61, 71, 110, 115, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 204], "txt": [0, 202], "requirements_extra": 0, "file": [0, 165, 166, 180, 187, 197, 203], "make": [0, 85, 182, 183, 184, 185, 186, 189, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201], "your": [0, 32, 133, 134, 181, 185, 195, 202], "cd": 0, "root": [0, 187, 197], "r": [0, 7, 8, 13, 42, 55, 56, 100, 101, 102, 108, 123, 135, 181, 202], "after": [0, 5, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "wa": [0, 77, 78, 79, 81, 111, 112, 113, 185, 195], "success": 0, "pandoc": 0, "ghostscript": 0, "brew": 0, "conform": 0, "pep": 0, "8": [0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 181, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201], "style": [0, 85], "For": [0, 8, 13, 15, 21, 26, 30, 31, 32, 33, 36, 38, 39, 44, 57, 67, 84, 85, 182, 183, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202], "lint": 0, "flake8": 0, "recommend": [0, 18], "black": [0, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 188, 194, 198, 202], "simpl": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 185, 195, 202, 205], "solut": 0, "format": [0, 85, 187, 197], "concret": 0, "command": 0, "line": [0, 112, 114, 184, 188, 194, 198, 202], "length": [0, 40, 47, 67, 85, 189, 190, 191, 199, 200, 201], "79": [0, 156, 157, 181], "example_fil": 0, "py": [0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 185, 195, 203], "1": [0, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 93, 99, 107, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "fork": 0, "button": [0, 185, 195], "clone": [0, 128, 185, 195], "git": 0, "http": [0, 26, 99, 187, 197, 202], "com": [0, 187, 197, 202], "usernam": 0, "branch": 0, "chang": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30, 54, 68, 85, 100, 102, 120, 121, 158, 165, 183, 193, 203, 204], "from": [0, 5, 6, 8, 10, 11, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 95, 104, 110, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "checkout": 0, "b": [0, 19, 32, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76], "finish": 0, "pass": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 29, 33, 34, 35, 38, 39, 40, 41, 42, 45, 46, 54, 56, 58, 71, 84, 85, 97, 103, 105, 106, 110, 115, 185, 188, 195, 198], "run": [0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "pytest": 0, "cover": [0, 39, 143, 181], "cov": 0, "commit": 0, "push": 0, "add": [0, 19, 189, 190, 191, 199, 200, 201], "modifi": 0, "m": [0, 41, 59, 71, 74, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "messag": [0, 85, 94, 96], "abstract": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 76], "superclass": 0, "default": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 90, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 185, 189, 191, 195, 199, 201, 202], "random_st": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 95, 103, 105, 106, 107, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "paramet": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 185, 195], "enforc": [0, 85], "select": [0, 7, 9, 10, 11, 13, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 56, 75, 78, 79, 80, 99, 100, 102, 105, 106, 107, 120, 121, 133, 134, 162, 165, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 204], "logic": [0, 75], "store": [0, 85, 182, 186, 187, 189, 190, 191, 192, 196, 197, 199, 200, 201, 202], "singleannotatorpoolquerystrategi": [0, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 56, 115], "must": [0, 6, 12, 14, 15, 16, 17, 18, 19, 22, 23, 29, 33, 34, 35, 40, 41, 42, 44, 55, 71, 86, 91, 97, 110, 111, 112, 114, 115], "descript": [0, 15], "whose": [0, 6, 14, 15, 17, 23, 32, 45, 55, 57, 99, 104, 105, 106, 112, 113], "typic": [0, 6, 9, 10, 12, 15, 46, 102, 112, 115, 120, 121, 165, 181, 203, 204], "standard": [0, 8, 25, 47, 85, 183, 186, 187, 193, 196, 197], "number": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 66, 68, 70, 72, 73, 74, 75, 77, 79, 81, 83, 85, 86, 88, 89, 90, 91, 92, 94, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 183, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201], "np": [0, 6, 7, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 58, 59, 60, 75, 78, 79, 80, 82, 85, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 107, 108, 109, 111, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "random": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 95, 100, 102, 103, 105, 106, 107, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 171, 172, 173, 175, 176, 177, 179, 180, 183, 188, 193, 198, 203, 204], "randomst": [0, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 95, 103, 105, 106, 107, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "like": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 93, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 185, 195, 202], "prior": [0, 6, 14, 15, 19, 40, 51, 71, 88, 184, 185, 188, 194, 195, 198], "option": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 91, 95, 96, 97, 100, 101, 102, 103, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 185, 186, 195, 196], "probabl": [0, 6, 9, 10, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 30, 31, 33, 36, 39, 40, 41, 49, 50, 54, 57, 58, 66, 68, 71, 72, 73, 75, 77, 79, 81, 102, 107, 112, 115, 120, 121, 165, 181, 203, 204], "distribut": [0, 6, 8, 9, 10, 12, 14, 15, 19, 30, 31, 32, 40, 54, 55, 56, 75, 79, 102, 111, 112, 115, 120, 121, 165, 181, 203, 204], "probabilist": [0, 6, 8, 9, 10, 11, 12, 15, 47, 52, 57, 71, 74, 102, 112, 113, 114, 115, 120, 121, 142, 165, 167, 180, 181, 186, 188, 190, 196, 198, 200, 203, 204], "string": [0, 7, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 56, 58, 82, 85, 89, 98, 99, 103], "cost_matrix": [0, 6, 12, 14, 15, 16, 17, 18, 19, 26, 37, 47, 48, 57, 90, 91], "cost": [0, 6, 9, 10, 12, 14, 15, 16, 17, 18, 19, 26, 37, 47, 48, 51, 57, 60, 90, 91, 102, 112, 115, 120, 121, 148, 163, 165, 181, 203, 204], "matrix": [0, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 37, 47, 48, 51, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 90, 91, 99], "interchang": 0, "x": [0, 4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 82, 85, 86, 96, 107, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "train": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 55, 56, 58, 60, 110, 111, 113, 114, 115, 133, 134, 148, 181, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202], "usual": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 53, 55, 56, 58, 110, 111, 113, 114, 115, 183, 185, 193, 195], "complet": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 53, 55, 56, 58, 72, 110, 111, 113, 114, 115, 185, 187, 195, 197], "includ": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 55, 56, 58, 85, 110, 111, 113, 114, 115, 116, 183, 185, 187, 193, 195, 197], "y": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 82, 85, 98, 100, 101, 102, 103, 108, 109, 110, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "possibli": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 55, 56, 58, 110, 114, 115, 185, 195], "ones": [0, 7, 10, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 58, 110, 114, 115, 185, 195], "indic": [0, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 93, 97, 99, 100, 101, 102, 105, 106, 107, 108, 110, 114, 115, 184, 185, 187, 188, 194, 195, 197, 198], "missing_label": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 58, 82, 85, 90, 94, 98, 99, 100, 101, 102, 103, 108, 110, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202], "candid": [0, 5, 7, 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 110, 111, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 185, 188, 189, 190, 191, 194, 195, 198, 199, 200, 201, 202], "none": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 143, 144, 146, 147, 148, 149, 150, 155, 156, 157, 159, 160, 161, 162, 163, 164, 183, 185, 187, 193, 195, 197], "consid": [0, 7, 10, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 93, 110, 115], "shape": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 93, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 185, 186, 187, 188, 190, 192, 195, 196, 197, 198, 200, 202], "n_candid": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 55, 56, 85, 110, 115], "type": [0, 7, 10, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 85, 94, 96, 97, 110, 115, 183, 185, 193, 195], "int": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 86, 88, 91, 93, 95, 96, 103, 105, 106, 107, 109, 110, 111, 112, 113, 115, 183, 185, 187, 188, 193, 195, 197, 198], "n_featur": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 110, 111, 115, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 185, 186, 192, 195, 196], "directli": [0, 7, 10, 15, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 71, 110, 115], "necessarili": [0, 7, 10, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 55, 56, 110, 115], "contain": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 91, 99, 110, 111, 112, 113, 115, 183, 193], "support": [0, 5, 7, 10, 11, 15, 19, 21, 22, 26, 28, 32, 33, 37, 38, 40, 41, 42, 43, 45, 47, 48, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 110, 114, 115, 185, 195], "batch_siz": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 107, 122, 123, 124, 133, 151, 152, 153, 182, 183, 185, 186, 187, 188, 190, 192, 193, 195, 196, 197, 198, 200], "one": [0, 7, 10, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 58, 97, 107, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202], "al": [0, 7, 9, 10, 13, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 61, 62, 63, 64, 65, 70, 100, 102, 107, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 162, 164, 165, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 181, 185, 187, 195, 197, 203, 204], "return_util": [0, 7, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 81, 107, 122, 123, 124, 130, 131, 132, 133, 136, 137, 138, 139, 145, 151, 152, 153, 157, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 189, 191, 194, 199, 201], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 91, 93, 96, 97, 99, 107, 110, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201], "addition": [0, 53, 189, 191, 199, 201], "return": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 91, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201], "util": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 110, 111, 112, 114, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "query_indic": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56], "g": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 74, 76, 93, 156, 157, 181], "0": [0, 5, 6, 7, 8, 10, 11, 13, 14, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 93, 99, 110, 111, 112, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "first": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 85, 93, 182, 183, 184, 185, 188, 191, 192, 193, 194, 195, 198, 201, 202], "index": [0, 7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 56, 93, 99, 102, 105, 106, 107, 108, 182, 188, 192, 198, 202], "refer": [0, 7, 10, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 74, 76, 84, 99, 104, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 187, 197, 202], "batch": [0, 6, 7, 9, 10, 12, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 102, 107, 111, 112, 120, 121, 124, 165, 181, 183, 185, 187, 188, 193, 195, 197, 198, 202, 203, 204, 205], "nan": [0, 6, 7, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 58, 82, 85, 90, 92, 94, 98, 99, 100, 101, 102, 103, 107, 108, 111, 182, 184, 185, 186, 187, 192, 194, 195, 196, 197], "self": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 110, 114, 115, 183, 185, 193, 195, 202, 205], "_validate_data": 0, "input": [0, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 33, 39, 41, 46, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 82, 85, 185, 187, 195, 197], "onc": [0, 58, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "mai": [0, 5, 6, 8, 11, 12, 13, 18, 19, 22, 33, 41, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 99, 111, 169, 170], "fit_if_not_fit": 0, "calcul": [0, 4, 15, 19, 30, 31, 34, 35, 36, 38, 40, 41, 47, 49, 51, 52, 54, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 189, 190, 191, 197, 199, 200, 201], "extra": 0, "public": 0, "simple_batch": [0, 157], "determin": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 55, 56, 61, 62, 63, 64, 65, 67, 70, 74, 75, 76, 77, 78, 79, 80, 81, 91, 103, 105, 106, 107, 110, 111, 112, 114, 115, 182, 184, 192, 194], "naiv": 0, "testquerystrategi": 0, "need": [0, 20, 61, 62, 63, 64, 65, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "templat": 0, "template_query_strategi": 0, "templatesingleannotatorpoolquerystrategi": 0, "mani": [0, 15, 41, 56, 76, 78, 79, 80, 81, 182, 192], "automat": 0, "specifi": [0, 5, 7, 11, 19, 26, 34, 55, 56, 58, 67, 72, 74, 75, 76, 77, 78, 79, 80, 81, 86, 109, 182, 185, 188, 189, 190, 191, 192, 195, 198, 199, 200, 201], "qs_class": 0, "init_default_param": 0, "accordingli": 0, "whether": [0, 5, 8, 14, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 44, 47, 48, 55, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 89, 90, 91, 92, 94, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 188, 189, 190, 191, 197, 198, 199, 200, 201], "handl": [0, 12, 16, 58, 186, 187, 196, 197, 202], "regress": [0, 2, 8, 9, 10, 13, 19, 28, 29, 30, 34, 35, 36, 41, 44, 85, 100, 102, 118, 120, 121, 130, 131, 136, 137, 138, 145, 165, 181, 182, 192, 202, 203, 204, 205], "classif": [0, 2, 3, 12, 19, 22, 27, 33, 41, 47, 48, 49, 50, 57, 59, 99, 118, 119, 120, 121, 123, 135, 146, 147, 164, 167, 181, 202, 205], "query_default_params_reg": 0, "query_default_params_clf": 0, "adjust": 0, "until": [0, 182, 192], "resolv": 0, "particular": 0, "test_queri": 0, "more": [0, 19, 32, 57, 183, 193, 202], "detail": [0, 30, 31, 36, 38, 182, 192], "inform": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 102, 112, 115, 120, 121, 123, 133, 134, 136, 137, 138, 143, 165, 181, 183, 193, 203, 204], "skactivml": 0, "everi": [0, 19, 21, 67, 93], "singleannotatorstreamquerystrategi": [0, 61, 67, 70, 71, 72], "ha": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 26, 33, 39, 41, 54, 55, 56, 58, 74, 75, 76, 77, 78, 79, 80, 81, 85, 91, 102, 105, 106, 108, 112, 113, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 194, 202], "either": [0, 56, 67, 97], "intern": [0, 11, 15, 26, 27, 28, 29, 41, 47, 49, 52, 54, 55, 58, 122, 126, 127, 129, 130, 140, 141, 145, 146, 155, 156, 157, 158, 163, 176, 177, 181], "budget": [0, 5, 11, 46, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 116, 155, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 189, 191, 199, 201, 202], "outsourc": 0, "integ": [0, 45], "act": [0, 182, 186, 187, 192, 196, 197], "seed": [0, 95, 183, 188, 193, 198], "share": [0, 184, 194], "thestrategi": 0, "allow": [0, 5, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54, 61, 62, 63, 64, 65, 70, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 97, 99], "constraint": [0, 5, 11, 39, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 116], "identifi": [0, 41, 183, 193], "instanc": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 95, 103, 105, 106, 107, 109, 110, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201, 202], "without": [0, 187, 197], "adapt": [0, 11, 23, 55, 68, 93, 124, 181, 185, 195], "state": [0, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 54, 55, 75, 78, 79, 80, 95, 107, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "monitor": [0, 61, 62, 63, 64, 65], "accord": [0, 6, 12, 14, 15, 17, 18, 19, 50, 55, 56, 58, 69, 80, 183, 193], "singleannotatorstreambasedquerystrategi": 0, "clf": [0, 21, 23, 24, 28, 32, 37, 40, 47, 48, 55, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 112, 113, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202], "unknown": 0, "sample_weight": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 44, 47, 48, 54, 55, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 85], "weight": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 44, 47, 48, 54, 55, 57, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 85, 98, 102, 103, 108, 111, 112, 115, 120, 121, 165, 181, 203, 204], "equal": [0, 7, 29, 55, 56, 92, 93, 97, 99], "fit_clf": [0, 21, 23, 24, 28, 32, 37, 40, 47, 48, 55, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 183, 189, 190, 191, 193, 199, 200, 201], "queried_indic": [0, 5, 11, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 114, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 191, 199, 201, 202], "best": [0, 8, 13, 39, 112], "x_cand": [0, 36, 85, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201, 202], "assess": [0, 66, 68, 70, 71, 73, 74, 77, 78, 79, 81], "same": [0, 6, 12, 14, 15, 16, 17, 18, 19, 55, 58, 61, 62, 63, 64, 65, 75, 105, 106, 184, 194], "attribut": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 33, 41, 42, 54, 58, 82], "valu": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 92, 96, 97, 98, 99, 102, 103, 105, 106, 107, 110, 111, 112, 114, 115, 120, 121, 165, 181, 184, 185, 194, 195, 202, 203, 204], "budget_manager_param_dict": [0, 11, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 191, 199, 201], "addit": [0, 18, 19, 58, 61, 63, 64, 65, 70, 110, 111, 112, 115, 185, 187, 195, 197], "case": [0, 7, 11, 16, 17, 21, 22, 33, 37, 40, 41, 47, 48, 53, 54, 55, 56, 57, 69, 80, 105, 106, 183, 193, 202], "forward": [0, 183, 193], "call": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 39, 84, 103, 105, 106, 185, 195], "unittest": 0, "test_stream": 0, "examplequerystrategi": 0, "_exampl": 0, "test_exampl": 0, "filenam": 0, "moreov": [0, 58, 187, 197], "testexamplequerystrategi": 0, "testcas": 0, "written": 0, "variabl": [0, 6, 8, 9, 11, 12, 13, 15, 18, 19, 61, 64, 65, 68, 73, 94, 97, 113, 114, 120, 167, 180, 181, 189, 190, 191, 199, 200, 201, 203, 204], "arg": [0, 5, 7, 9, 10, 11, 20, 76], "evalu": [0, 30, 31, 37, 48, 67, 71, 99, 183, 184, 185, 189, 190, 191, 193, 194, 195, 199, 200, 201, 202, 205], "testclass": 0, "test_init_param_arg": 0, "test_query_param_arg": 0, "unchang": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "manag": [0, 5, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 116, 185, 195], "budgetmanag": [0, 11, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 87], "throw": 0, "test_budget_manag": 0, "examplebudgetmanag": 0, "testexamplebudgetmanag": 0, "test_query_by_util": 0, "_param_arg": 0, "multiannotatorpoolquerystrategi": [0, 55, 56], "pair": [0, 7, 37, 39, 48, 55, 56, 58, 188, 198], "mean": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 25, 39, 40, 46, 54, 55, 56, 71, 85, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201], "j": [0, 6, 7, 12, 14, 15, 16, 17, 18, 19, 21, 26, 37, 41, 42, 47, 48, 55, 56, 57, 59, 61, 62, 63, 64, 65, 98, 99, 122, 123, 124, 133, 145, 164, 181, 183, 185, 193, 195], "n_avl_annot": [0, 7, 55, 56], "boolean": [0, 7, 28, 39, 55, 56, 58, 84, 85, 97, 100, 101, 187, 197], "arrai": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 93, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 183, 185, 188, 189, 190, 191, 193, 195, 198, 199, 200, 201, 202], "entri": [0, 6, 7, 14, 15, 55, 56, 91, 99, 112, 113], "form": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "combin": [0, 183, 186, 193, 196], "perform": [0, 4, 19, 22, 33, 41, 54, 55, 56, 85, 182, 183, 185, 189, 190, 191, 192, 193, 195, 199, 200, 201, 202], "aggreg": [0, 56], "singleannotatorwrapp": [0, 188, 198], "greedi": [0, 8, 9, 10, 13, 25, 33, 34, 35, 100, 102, 120, 121, 165, 181, 203, 204], "multiannot": [0, 188, 198], "test_init_param_a": 0, "appli": [0, 15, 33, 85, 187, 197], "test_query_param_a": 0, "main": [0, 38, 67, 182, 186, 187, 192, 196, 197, 202], "part": [0, 182, 183, 189, 190, 191, 192, 193, 199, 200, 201], "subpackag": 0, "its": [0, 17, 22, 24, 25, 33, 37, 41, 48, 75, 76, 78, 79, 80, 81, 85, 202], "membership": [0, 24, 57], "super": [0, 183, 185, 193, 195], "hold": [0, 6, 12, 14, 15, 16, 17, 18, 19, 52, 54, 82, 98, 103, 114, 189, 190, 191, 199, 200, 201], "dure": [0, 6, 12, 14, 15, 16, 17, 18, 19, 56], "miss": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 56, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 82, 85, 90, 92, 94, 98, 99, 100, 101, 102, 103, 108, 182, 183, 192, 193, 204], "ensur": [0, 6, 14, 15, 44, 85, 187, 197], "reproduc": [0, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 103, 105, 106, 186, 187, 196, 197], "cf": 0, "through": [0, 37, 39, 140, 141, 143, 181, 185, 187, 188, 189, 190, 191, 195, 197, 198, 199, 200, 201], "column": [0, 85, 99], "except": [0, 8, 13, 40, 47, 71, 75, 93, 110, 115, 185, 195], "expect": [0, 6, 8, 9, 10, 12, 13, 15, 19, 21, 22, 23, 24, 29, 30, 31, 33, 36, 37, 41, 47, 48, 51, 52, 57, 58, 100, 102, 112, 115, 120, 121, 165, 185, 195, 203, 204], "object": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 96, 97, 104, 187, 189, 190, 191, 197, 199, 200, 201], "assign": [0, 19, 56, 103, 182, 184, 185, 188, 192, 194, 195, 198], "output": [0, 8, 9, 10, 13, 14, 21, 22, 23, 24, 29, 30, 31, 33, 41, 100, 102, 120, 121, 165, 181, 185, 195, 203, 204], "uniform": [0, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "when": [0, 6, 8, 11, 13, 14, 15, 34, 37, 40, 47, 55, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 80, 81, 84, 85, 104, 185, 195], "p": [0, 6, 12, 14, 15, 16, 17, 18, 19, 48, 58, 60, 148, 181, 183, 187, 188, 193, 197, 198], "per": [0, 6, 14, 15, 16, 17, 18, 54, 98, 183, 188, 193, 198], "_check_n_featur": 0, "been": [0, 5, 11, 18, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 114, 202], "classfrequencyestim": [0, 14, 15, 22, 33, 40, 41], "y_pred": [0, 8, 13, 99, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "overwritten": [0, 17], "imbalanc": 0, "comput": [0, 14, 22, 24, 33, 34, 38, 39, 41, 45, 46, 47, 49, 50, 54, 57, 58, 59, 60, 74, 99, 145, 146, 147, 148, 159, 160, 161, 164, 181, 187, 197], "accuraci": [0, 6, 12, 14, 15, 16, 17, 18, 19, 54, 55, 99, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202], "test_classifi": 0, "exampleclassifi": 0, "_example_classifi": 0, "test_example_classifi": 0, "testexampleclassifi": 0, "test_methodname_parameternam": 0, "invalid": 0, "correctli": 0, "test_methodnam": 0, "intend": 0, "target": [0, 7, 8, 9, 10, 13, 30, 34, 36, 55, 56, 82, 85, 94, 99, 100, 102, 120, 121, 165, 181, 184, 194, 203, 204], "probabilisticregressor": [0, 30, 31, 36], "r2": 0, "exampleregressor": 0, "_example_regressor": 0, "testexampleregressor": 0, "test_example_regressor": 0, "mark": 0, "annotatormodelmixin": [0, 19, 54], "These": [0, 19, 189, 190, 191, 199, 200, 201], "proxi": [0, 14], "qualiti": 0, "p_annot": [0, 4, 19, 54], "were": [0, 15, 76, 78, 79, 80, 81, 110, 114, 115], "previou": [0, 185, 189, 190, 191, 195, 199, 200, 201], "maximum": [0, 19, 38, 39, 40, 44, 45, 51, 53, 96, 105, 107, 185, 195, 202], "two": [0, 19, 21, 23, 24, 28, 37, 48, 92, 182, 186, 188, 192, 196, 198, 202], "goal": [0, 182, 192, 202], "understand": [0, 182, 192], "improv": [0, 8, 9, 10, 13, 34, 100, 102, 120, 121, 165, 181, 182, 192, 202, 203, 204], "usabl": 0, "therefor": [0, 16, 37, 38, 48, 54, 169, 170], "do": [0, 182, 184, 185, 186, 192, 194, 195, 196], "so": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 182, 184, 185, 192, 194, 195], "doc": [0, 169, 170], "query_strategi": [0, 38, 45, 56, 142, 154, 185, 189, 190, 191, 195, 199, 200, 201], "json": 0, "sub": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 45, 47, 54, 102, 112, 115, 120, 121, 165, 181, 203, 204], "offici": 0, "categori": 0, "methodolog": 0, "reduct": [0, 8, 9, 10, 13, 31, 37, 51, 100, 102, 120, 121, 140, 141, 165, 203, 204], "committe": [0, 6, 9, 10, 12, 13, 15, 22, 33, 41, 100, 102, 112, 115, 120, 121, 165, 183, 193, 203, 204], "uncertainti": [0, 6, 9, 10, 11, 12, 15, 16, 21, 22, 23, 26, 28, 33, 47, 52, 55, 57, 61, 62, 63, 64, 65, 66, 68, 70, 73, 102, 108, 111, 112, 113, 114, 115, 120, 121, 127, 158, 165, 167, 176, 180, 182, 183, 187, 188, 192, 193, 197, 198, 202, 203, 204], "template_pool": 0, "template_pool_regress": 0, "template_stream": 0, "template_pool_batch": 0, "tag": [0, 181], "search": [0, 202], "titl": [0, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 184, 186, 187, 189, 190, 191, 192, 194, 196, 197, 199, 200, 201, 202], "text_0": 0, "placehold": 0, "explan": 0, "ref": 0, "bibtex": 0, "kei": [0, 18, 183, 186, 187, 193, 196, 197], "paper": [0, 30, 61, 62, 63, 64, 65, 202], "sequenc": [0, 58], "order": [0, 6, 12, 14, 15, 16, 17, 18, 19, 58, 61, 62, 63, 64, 65, 85, 99], "content": 0, "displai": [0, 184, 185, 188, 189, 190, 191, 194, 195, 198, 199, 200, 201], "plot": [0, 2, 3, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 203], "import_misc": 0, "randomsampl": [0, 72, 150, 165, 181, 183, 186, 187, 189, 190, 191, 193, 196, 197, 199, 200, 201, 203], "n_sampl": [0, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 98, 99, 100, 101, 102, 103, 108, 110, 111, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 185, 186, 188, 189, 190, 191, 193, 195, 196, 198, 199, 200, 201, 202], "init_q": 0, "query_param": 0, "preproc": 0, "preprocess": [0, 29, 183, 185, 193, 195], "min": [0, 32, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 185, 186, 188, 192, 195, 196, 198], "max": [0, 107, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 186, 188, 192, 196, 198], "n_cycl": [0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 183, 185, 186, 187, 188, 192, 193, 195, 196, 197, 198, 202], "init_clf": 0, "parzenwindowclassifi": [0, 28, 122, 124, 125, 126, 127, 128, 129, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 186, 188, 189, 190, 196, 198, 199, 200, 202], "init_reg": 0, "nickernelregressor": [0, 130, 131, 132, 136, 137, 138, 139, 184, 194], "close": 0, "100": [0, 19, 69, 70, 74, 76, 77, 78, 79, 80, 81, 130, 131, 132, 136, 137, 138, 139, 145, 146, 147, 148, 151, 152, 153, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 198], "view": [0, 19, 183, 193], "here": [0, 21, 24, 25, 39, 46, 58, 182, 184, 187, 189, 190, 191, 192, 194, 197, 199, 200, 201], "adopt": 0, "sphinx": [0, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "html": [0, 26, 99, 185, 195], "_build": 0, "tracker": 0, "think": 0, "found": [0, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 195, 202], "see": [0, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 26, 30, 31, 36, 54, 55, 56, 57, 71, 74, 75, 76, 77, 78, 79, 80, 81, 84, 111, 182, 192], "problem": [0, 19, 25, 28, 188, 198, 202], "next": [0, 21, 23, 24, 25, 26, 39, 40, 46, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 184, 185, 189, 190, 191, 193, 194, 195, 199, 200, 201], "releas": [0, 202], "save": [0, 17, 187, 191, 197, 201], "time": [0, 19, 39, 58, 67, 68, 73, 75, 76, 78, 79, 80, 81, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201, 202], "what": 0, "done": [0, 48, 183, 193], "how": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 107, 184, 185, 186, 187, 189, 190, 191, 194, 195, 196, 197, 199, 200, 201], "replic": 0, "databas": 0, "box": 0, "page": [0, 29, 30, 31, 34, 35, 36, 40, 41, 49, 59, 60, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 202], "usecas": 0, "someth": [0, 58], "isn": 0, "t": [0, 7, 8, 13, 21, 32, 41, 54, 55, 56, 59, 61, 62, 63, 64, 65, 74, 75, 76, 78, 79, 80, 81, 100, 101, 102, 108, 122, 123, 135, 156, 157, 181, 189, 190, 199, 200, 202], "legend": [2, 3, 118, 119, 120, 121, 167, 183, 186, 187, 189, 190, 191, 193, 196, 197, 199, 200, 201], "sourc": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181], "abc": [4, 5, 9, 12, 13], "annot": [4, 7, 10, 18, 19, 26, 38, 45, 54, 55, 56, 60, 99, 110, 114, 115, 116, 148, 181, 202, 205], "model": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 27, 29, 30, 31, 37, 40, 47, 48, 50, 54, 55, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 100, 102, 116, 120, 121, 165, 176, 183, 184, 185, 189, 190, 191, 193, 194, 195, 199, 200, 201, 202, 203, 204], "method": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 104, 107, 125, 131, 136, 137, 139, 140, 141, 146, 147, 148, 151, 153, 156, 157, 158, 159, 160, 161, 181, 182, 184, 185, 186, 189, 191, 192, 194, 195, 196, 199, 201, 202], "predict_annotator_perf": [4, 19, 54], "an": [4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30, 41, 45, 50, 53, 54, 55, 56, 58, 61, 62, 63, 64, 65, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 93, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 110, 112, 113, 115, 116, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "test": [4, 6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 39, 54, 183, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202], "numpi": [4, 6, 7, 8, 10, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 82, 88, 91, 99, 100, 101, 102, 105, 106, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "ndarrai": [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 88, 91, 93, 99, 100, 101, 102, 105, 106, 107, 108, 109, 187, 197], "n_annot": [4, 7, 19, 54, 55, 56, 98, 99, 103, 110, 115, 188, 198], "l": [4, 15, 19, 54, 151, 152, 153, 181, 202], "baseestim": [5, 9, 12, 13, 54, 82], "stream": [5, 6, 9, 11, 12, 15, 113, 114, 168, 169, 170, 171, 172, 173, 174, 175, 177, 179, 180, 203, 204, 205], "float": [5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 29, 32, 33, 39, 40, 41, 42, 45, 49, 50, 51, 54, 55, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 96, 114, 189, 190, 191, 199, 200, 201], "ratio": [5, 6, 9, 10, 12, 15, 41, 59, 74, 75, 76, 77, 78, 79, 80, 81, 102, 112, 115, 120, 121, 165, 181, 203, 204], "If": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 92, 93, 95, 96, 99, 102, 107, 108, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "replac": [5, 58, 111], "get_metadata_rout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "get": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 109, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 202, 205], "metadata": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "rout": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "check": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 108, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 189, 190, 191, 195, 199, 200, 201], "user": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 182, 185, 192, 195], "guid": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 162, 181, 187, 197], "mechan": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "work": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 169, 170, 182, 192], "metadatarequest": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "A": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 93, 104, 126, 127, 132, 139, 166, 181, 185, 187, 188, 195, 197, 198], "encapsul": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "get_param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "deep": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 122, 123, 181, 202, 205], "bool": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 85, 86, 91, 93, 96, 107, 110, 114, 115, 187, 197], "subobject": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "dict": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 105, 106, 110, 111, 112, 115, 185, 195], "map": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "query_by_util": [5, 74, 75, 76, 77, 78, 79, 80, 81], "kwarg": [5, 7, 9, 10, 11, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 76, 84, 110, 115, 185, 195], "ask": [5, 11, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 182, 186, 192, 196], "suffici": [5, 61, 62, 63, 64, 65, 70, 74, 75, 76, 77, 78, 79, 80, 81, 202], "queri": [5, 6, 7, 9, 10, 11, 12, 13, 15, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 100, 102, 110, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 188, 193, 194, 195, 198, 203, 204, 205], "correspond": [5, 19, 58, 61, 62, 63, 64, 65, 74, 75, 76, 77, 78, 79, 80, 81, 93, 202], "strategi": [5, 6, 7, 9, 10, 11, 12, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 100, 107, 110, 111, 112, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 172, 173, 174, 175, 176, 177, 178, 179, 180, 183, 184, 185, 188, 193, 194, 195, 198, 203, 204, 205], "worth": [5, 74, 75, 76, 77, 78, 79, 80, 81], "n_queried_inst": [5, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "set_param": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "nest": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "pipelin": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 185, 195], "__": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "updat": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 189, 191, 193, 199, 201, 202], "spars": [5, 11, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85], "matric": [5, 11, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "accept": [5, 11, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 94, 96, 97, 185, 195], "thei": [5, 11, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84], "itself": [5, 11, 19, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "class_prior": [6, 14, 15, 88, 146, 147, 148, 188, 198], "classifi": [6, 12, 21, 23, 24, 27, 28, 32, 37, 40, 47, 48, 55, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 112, 113, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202], "abl": [6, 16, 183, 188, 193, 198], "frequenc": [6, 14, 15, 17, 40, 58, 71], "predict_freq": [6, 14, 15, 17, 40, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 144], "n_class": [6, 12, 14, 15, 16, 17, 18, 19, 22, 26, 33, 37, 39, 41, 42, 47, 48, 49, 50, 51, 52, 54, 57, 60, 82, 88, 89, 90, 91, 98, 99, 103, 114, 143, 183, 186, 190, 193, 196, 200], "fit": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 44, 47, 48, 54, 55, 58, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 82, 93, 112, 113, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "scalar": [6, 7, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 54, 56, 58, 82, 85, 96, 98, 99, 103, 112, 114], "str": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 33, 34, 35, 40, 41, 42, 44, 54, 71, 83, 85, 90, 92, 94, 96, 97, 100, 101, 102, 104, 107, 108, 112, 113, 114, 185, 187, 195, 197], "predict": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 29, 30, 31, 33, 34, 36, 37, 41, 44, 47, 48, 57, 58, 59, 60, 66, 68, 73, 99, 113, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 189, 190, 191, 194, 199, 200, 201, 202], "observ": [6, 14, 15, 51, 68, 73, 74, 75, 79, 81, 99, 184, 188, 194, 198], "non": [6, 14, 15, 85, 91], "neg": [6, 8, 13, 14, 15, 91, 99], "belong": [6, 14, 15, 19, 188, 198], "classes_": [6, 12, 14, 15, 16, 17, 18, 19, 58, 82], "across": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 103, 105, 106, 184, 186, 187, 194, 196, 197], "class_prior_": [6, 14, 15], "cost_matrix_": [6, 12, 14, 15, 16, 18, 19], "n_output": [6, 8, 12, 13, 16, 17, 19, 82, 100, 101, 102, 108], "where": [6, 8, 12, 13, 18, 19, 21, 30, 36, 37, 39, 48, 54, 56, 61, 62, 63, 64, 65, 93, 184, 187, 188, 194, 197, 198], "f": [6, 14, 15, 17, 36, 48, 58, 85, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 190, 192, 193, 195, 196, 197, 198, 200], "predict_proba": [6, 12, 14, 15, 16, 17, 18, 19, 21, 23, 24, 27, 37, 47, 48, 55, 58, 71, 112], "m_sampl": [6, 14, 15], "metric": [6, 14, 15, 30, 34, 35, 39, 40, 42, 61, 62, 63, 64, 65, 70, 71, 99, 149, 186, 188, 191, 196, 198, 201], "precomput": [6, 8, 13, 14, 15, 28, 39, 42, 58], "sample_proba": [6, 14, 15, 22, 33, 41, 146, 147, 148], "10": [6, 14, 15, 61, 62, 63, 64, 65, 72, 122, 127, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 165, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203], "vector": [6, 14, 15, 19, 56, 85, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 182, 192, 202], "dirichlet": [6, 14, 15, 19, 40], "alpha": [6, 14, 15, 39, 54, 55, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 186, 187, 196, 197], "sum": [6, 8, 13, 14, 15, 18, 21, 48, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 195], "n_test_sampl": [6, 14, 15], "score": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 37, 48, 49, 50, 52, 57, 59, 182, 183, 185, 186, 187, 192, 193, 195, 196, 197], "set_fit_request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "union": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54, 185, 195], "note": [6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 38, 54, 61, 62, 63, 64, 65, 67, 72, 74, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "enable_metadata_rout": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "set_config": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "ignor": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 37, 41, 48, 54, 110, 111, 115, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197], "fals": [6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 81, 84, 85, 86, 91, 99, 107, 110, 115, 157, 163, 164, 169, 170, 183, 187, 188, 189, 190, 191, 193, 197, 198, 199, 200, 201], "meta": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "rais": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 39, 40, 54, 71, 85, 92, 93, 95, 96, 110, 115, 185, 195], "alia": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "instead": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 30, 37, 40, 48, 54, 58, 71, 111], "origin": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 44, 45, 54, 82, 85, 183, 193], "metadata_rout": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "retain": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "exist": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54, 84, 183, 184, 193, 194], "you": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54, 181, 185, 187, 195, 197, 202], "version": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54, 85, 183, 193, 202], "3": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 29, 41, 47, 48, 54, 56, 61, 62, 63, 64, 65, 71, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "insid": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54], "otherwis": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 22, 27, 33, 37, 41, 54, 55, 95, 96, 102, 108, 110, 111, 114, 115], "effect": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19, 54, 85], "set_score_request": [6, 8, 12, 13, 14, 15, 16, 17, 18, 19], "core": [6, 9, 10, 12, 15, 25, 38, 102, 112, 115, 120, 121, 165, 181, 203, 204], "embed": [6, 9, 10, 12, 15, 21, 23, 24, 26, 39, 102, 111, 112, 115, 120, 121, 165, 181, 187, 197, 203, 204], "cluster": [6, 9, 10, 12, 15, 23, 39, 46, 53, 102, 111, 112, 115, 120, 121, 156, 157, 165, 181, 182, 186, 192, 196, 203, 204], "clue": [6, 9, 10, 12, 15, 102, 111, 112, 120, 121, 165, 181, 203, 204], "contrast": [6, 9, 10, 12, 15, 24, 102, 112, 115, 120, 121, 165, 181, 183, 193, 203, 204], "cal": [6, 9, 10, 12, 15, 24, 102, 112, 115, 120, 121, 165, 181, 203, 204], "divers": [6, 9, 10, 12, 13, 14, 15, 21, 22, 23, 32, 34, 35, 44, 46, 50, 100, 102, 111, 112, 115, 120, 121, 123, 165, 181, 184, 194, 203, 204], "gradient": [6, 9, 10, 12, 15, 21, 29, 102, 111, 112, 120, 121, 165, 181, 203, 204], "badg": [6, 9, 10, 12, 15, 102, 111, 112, 120, 121, 165, 181, 187, 197, 203, 204], "typiclust": [6, 9, 10, 12, 15, 102, 112, 115, 120, 121, 165, 181, 187, 197, 203, 204], "entropi": [6, 8, 9, 10, 12, 15, 22, 23, 33, 36, 41, 47, 57, 60, 102, 112, 115, 120, 121, 139, 165, 181, 182, 192, 202, 203, 204], "epistem": [6, 9, 10, 12, 15, 28, 102, 112, 115, 120, 121, 165, 181, 203, 204], "least": [6, 9, 10, 12, 15, 26, 47, 57, 91, 99, 102, 112, 115, 120, 121, 165, 181, 185, 189, 190, 191, 195, 199, 200, 201, 203, 204], "confid": [6, 9, 10, 12, 15, 26, 47, 54, 55, 57, 102, 112, 114, 115, 120, 121, 165, 181, 203, 204], "margin": [6, 9, 10, 12, 15, 47, 57, 102, 112, 115, 120, 121, 165, 181, 203, 204], "coverag": [6, 9, 10, 12, 15, 39, 102, 112, 115, 120, 121, 165, 181, 203, 204], "probcov": [6, 9, 10, 12, 15, 102, 112, 115, 120, 121, 165, 181, 203, 204], "averag": [6, 9, 10, 12, 15, 47, 48, 49, 52, 72, 102, 112, 115, 120, 121, 165, 181, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201, 203, 204], "precis": [6, 9, 10, 12, 15, 47, 52, 102, 112, 115, 120, 121, 165, 181, 203, 204], "densiti": [6, 9, 10, 11, 12, 14, 15, 16, 32, 40, 47, 61, 62, 63, 64, 65, 70, 71, 102, 108, 111, 112, 113, 114, 115, 120, 121, 157, 165, 167, 180, 184, 191, 194, 201, 203, 204], "distanc": [6, 9, 10, 12, 14, 25, 32, 34, 35, 39, 53, 61, 62, 63, 64, 65, 70, 86, 102, 111, 112, 115, 120, 121, 165, 181, 203, 204], "mont": [6, 9, 10, 12, 15, 22, 33, 37, 50, 102, 112, 115, 120, 121, 165, 181, 203, 204], "carlo": [6, 9, 10, 12, 15, 22, 33, 37, 50, 102, 112, 115, 120, 121, 165, 181, 203, 204], "eer": [6, 9, 10, 12, 15, 37, 102, 112, 115, 120, 121, 165, 181, 203, 204], "log": [6, 9, 10, 12, 15, 22, 24, 33, 37, 41, 48, 49, 50, 102, 112, 115, 120, 121, 165, 181, 203, 204], "loss": [6, 9, 10, 12, 15, 30, 37, 48, 102, 112, 115, 120, 121, 165, 181, 203, 204], "misclassif": [6, 9, 10, 12, 15, 37, 48, 102, 112, 115, 120, 121, 165, 181, 203, 204], "wrapper": [6, 9, 10, 11, 12, 15, 16, 17, 38, 40, 45, 47, 56, 58, 67, 72, 102, 104, 112, 115, 120, 121, 165, 181, 183, 188, 193, 198, 203, 204], "discrimin": [6, 9, 10, 12, 15, 27, 102, 112, 115, 120, 121, 165, 181, 187, 197, 203, 204], "parallel": [6, 9, 10, 12, 15, 38, 40, 102, 112, 115, 120, 121, 165, 181, 203, 204], "multi": [6, 9, 10, 12, 15, 26, 40, 71, 85, 102, 110, 112, 115, 116, 120, 121, 164, 165, 181, 202, 203, 204, 205], "qbc": [6, 9, 10, 12, 13, 15, 41, 100, 102, 112, 115, 120, 121, 165, 181, 203, 204], "vote": [6, 9, 10, 12, 15, 18, 41, 54, 55, 56, 59, 60, 98, 102, 103, 112, 115, 120, 121, 165, 181, 183, 188, 193, 198, 203, 204], "variat": [6, 9, 10, 12, 15, 41, 59, 102, 112, 115, 120, 121, 165, 181, 203, 204], "kullback": [6, 8, 9, 10, 12, 13, 15, 24, 36, 41, 49, 100, 102, 112, 115, 120, 121, 165, 181, 203, 204], "leibler": [6, 8, 9, 10, 12, 13, 15, 24, 36, 41, 49, 100, 102, 112, 115, 120, 121, 165, 181, 203, 204], "diverg": [6, 8, 9, 10, 12, 13, 15, 24, 36, 41, 49, 100, 102, 112, 115, 120, 121, 165, 181, 203, 204], "split": [6, 9, 11, 12, 15, 113, 114, 120, 167, 180, 181, 183, 186, 187, 189, 191, 193, 196, 197, 199, 201, 202, 203, 204], "period": [6, 9, 11, 12, 15, 67, 113, 114, 120, 167, 180, 181, 203, 204], "cognit": [6, 9, 11, 12, 15, 61, 62, 63, 64, 65, 113, 114, 120, 167, 180, 181, 203, 204], "dual": [6, 9, 10, 11, 12, 15, 16, 47, 61, 62, 63, 64, 65, 100, 107, 111, 112, 113, 114, 120, 121, 156, 165, 167, 180, 181, 203, 204], "datastream": [6, 9, 11, 12, 15, 71, 72, 74, 113, 114, 120, 167, 180, 181, 203, 204], "poolquerystrategi": [7, 10], "pool": [7, 10, 71, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 185, 187, 195, 197, 203, 205], "control": [7, 9, 11, 42, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 185, 195], "dtype": [7, 10, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 85, 110, 115, 183, 188, 189, 190, 191, 193, 198, 199, 200, 201], "len": [7, 39, 55, 56, 107, 143, 144, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202], "cycl": [7, 10, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 53, 55, 56, 107, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 185, 186, 187, 188, 193, 195, 196, 197, 198, 202], "batchsiz": [7, 56], "2": [7, 8, 13, 15, 19, 29, 39, 40, 41, 44, 47, 48, 50, 51, 54, 55, 56, 57, 61, 62, 63, 64, 65, 70, 71, 77, 85, 86, 99, 102, 108, 110, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "respect": [7, 29, 55, 56], "w": [7, 8, 13, 41, 55, 56, 59, 74, 76, 77, 78, 79, 80, 81, 98, 100, 101, 102, 103, 108], "regressor": [8, 13, 26, 29, 30, 31, 34, 36, 44, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "numer": [8, 13, 19, 26, 40, 41, 85, 88, 110, 111, 115], "n_target": [8, 13], "return_std": [8, 184, 194], "return_entropi": 8, "std": [8, 184, 186, 187, 194, 196, 197], "differenti": 8, "condit": [8, 31, 36, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 99], "deviat": [8, 75, 79, 186, 196], "mu": 8, "predict_target_distribut": 8, "dist": 8, "scipi": [8, 19, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 189, 190, 191, 194, 199, 200, 201], "stat": [8, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "_distn_infrastructur": 8, "rv_frozen": 8, "sample_i": [8, 41, 145], "n_samples_x": 8, "drawn": 8, "gener": [8, 13, 14, 26, 32, 68, 99, 103, 105, 106, 107, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 185, 187, 193, 195, 197, 202, 203], "randomli": [8, 21, 45, 56, 69, 72, 78, 80, 105, 106, 107], "draw": [8, 95], "y_sampl": 8, "coeffici": [8, 13], "frac": [8, 13], "u": [8, 13, 32, 55, 75, 76, 78, 79, 80, 81, 133, 134, 157, 181, 202], "v": [8, 13, 15, 19, 55, 69, 80, 98], "residu": [8, 13], "squar": [8, 13], "y_true": [8, 13, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 187, 188, 192, 193, 194, 196, 197, 198, 202], "total": [8, 13, 29, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 187, 188, 197, 198, 203], "becaus": [8, 13, 39, 112, 184, 194], "arbitrarili": [8, 13], "wors": [8, 13], "constant": [8, 13, 19, 204], "alwai": [8, 13], "disregard": [8, 13, 67, 72], "would": [8, 13, 67], "kernel": [8, 13, 15, 40, 42, 58, 71, 191, 201], "list": [8, 13, 18, 22, 24, 25, 33, 39, 41, 46, 60, 85, 99, 112, 113, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 185, 189, 190, 191, 193, 195, 199, 200, 201, 202], "n_samples_fit": [8, 13], "multioutput": [8, 13], "uniform_averag": [8, 13], "23": [8, 13, 42, 85, 129, 165, 181, 187, 197, 203], "keep": [8, 13, 186, 196], "consist": [8, 13, 18, 58, 85, 183, 187, 189, 190, 191, 193, 197, 199, 200, 201], "r2_score": [8, 13], "influenc": [8, 13, 32, 85], "multioutputregressor": [8, 13], "set_predict_request": 8, "space": [8, 9, 10, 13, 24, 30, 31, 34, 35, 39, 67, 72, 100, 102, 120, 121, 165, 181, 184, 185, 189, 190, 191, 194, 195, 199, 200, 201, 203, 204], "gsx": [8, 9, 10, 13, 34, 35, 100, 102, 120, 121, 165, 181, 203, 204], "gsy": [8, 9, 10, 13, 34, 100, 102, 120, 121, 165, 181, 203, 204], "gsi": [8, 9, 10, 13, 34, 100, 102, 120, 121, 165, 181, 203, 204], "varianc": [8, 9, 10, 13, 15, 31, 41, 100, 102, 120, 121, 165, 181, 184, 194, 203, 204], "maxim": [8, 9, 10, 13, 22, 23, 24, 29, 33, 34, 36, 39, 47, 51, 52, 57, 100, 102, 120, 121, 130, 158, 165, 181, 203, 204], "argument": [9, 18, 29, 30, 31, 34, 35, 36, 38, 45, 105, 106, 110, 115, 185, 188, 195, 198], "bayesian": [9, 10, 12, 14, 16, 19, 22, 33, 41, 50, 102, 108, 111, 112, 115, 120, 121, 165, 181, 203, 204], "disagr": [9, 10, 12, 16, 22, 33, 41, 49, 50, 59, 60, 102, 108, 111, 112, 115, 120, 121, 165, 181, 203, 204], "batchbald": [9, 10, 12, 16, 41, 50, 102, 111, 112, 120, 121, 165, 181, 183, 193, 203, 204], "bald": [9, 10, 12, 16, 33, 41, 50, 102, 108, 112, 115, 120, 121, 165, 181, 183, 193, 203, 204], "tree": [9, 10, 13, 44, 100, 102, 120, 121, 165, 181, 203, 204], "rt": [9, 10, 13, 44, 100, 102, 120, 121, 165, 181, 203, 204], "empir": [9, 10, 13, 41, 100, 102, 120, 121, 125, 165, 181, 203, 204], "singl": [10, 38, 45, 56, 114, 115, 181, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201], "acquir": [11, 24, 40, 51, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 81, 125, 181, 182, 192], "startegi": 11, "within": [11, 18, 27, 32, 61, 62, 63, 64, 65, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 186, 189, 190, 191, 196, 199, 200, 201], "doe": [11, 85, 96, 104], "alter": 11, "n_sampled_inst": 11, "decis": [11, 19, 32, 48, 61, 62, 63, 64, 65, 67, 72, 112, 113, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 188, 192, 198, 202], "taken": [11, 76, 77, 78, 79, 80, 81], "conjunct": 11, "end": [11, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 197], "simul": [11, 37, 48, 58, 67, 72], "final": [11, 61, 62, 63, 64, 65, 67, 72, 182, 192, 202], "especi": [11, 67, 72, 104], "help": [11, 37, 48, 67, 72, 104, 202], "develop": [11, 44, 67, 72, 202], "could": [11, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84], "streambasedquerystrategi": 11, "classifiermixin": [12, 16], "sensit": [12, 26, 47, 48, 57, 127, 163, 181], "regressormixin": 13, "mixture_model": [14, 133, 134], "weight_mod": 14, "respons": 14, "base": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 100, 102, 103, 110, 111, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 148, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 174, 175, 177, 179, 180, 181, 185, 187, 195, 197, 203, 204, 205], "mixtur": [14, 133, 134, 156, 157], "gaussian": [14, 202], "gmm": [14, 32, 156, 157], "gaussianmixtur": [14, 133, 134, 156, 157], "bayesiangaussianmixtur": 14, "unsupervis": 14, "algorithm": [14, 19, 21, 23, 24, 25, 26, 39, 46, 85, 127, 176, 181, 182, 185, 192, 195], "refit": [14, 27, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 189, 191, 199, 201], "bayesianmixturemodel": 14, "n_compon": [14, 133, 134, 156, 157], "similar": [14, 24], "exponenti": 14, "mahalanobi": 14, "f_components_": 14, "c": [14, 15, 19, 51, 57, 61, 62, 63, 64, 65, 85, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202], "mixture_model_": 14, "n_neighbor": 15, "rbf": [15, 40, 42, 71, 149, 186, 188, 191, 196, 198, 201], "metric_dict": [15, 35, 40, 42, 71, 130, 131, 132, 136, 137, 138, 139, 149, 184, 186, 188, 194, 196, 198], "parzen": [15, 28, 58, 202], "window": [15, 17, 28, 58, 61, 62, 63, 64, 65, 70, 74, 76, 77, 78, 79, 80, 81, 189, 190, 191, 199, 200, 201, 202], "pwc": [15, 202], "parametr": 15, "obtain": [15, 74, 183, 188, 193, 198, 202], "callabl": [15, 19, 29, 30, 39, 40, 42, 56, 61, 62, 63, 64, 65, 70, 71, 83, 84, 185, 195], "valid": [15, 18, 34, 35, 40, 42, 71, 83, 85, 86, 87, 88, 93, 95, 96, 185, 186, 187, 195, 196, 197], "pairwis": [15, 40, 42, 61, 62, 63, 64, 65, 70, 71], "pairwise_kernel": [15, 40, 42, 71], "nearest": [15, 24, 25, 46, 70], "neighbour": 15, "further": [15, 16, 17, 26, 34, 35, 38, 40, 42, 45, 71, 84, 97, 188, 198], "gamma": [15, 19, 40, 71, 130, 131, 132, 136, 137, 138, 139, 149, 184, 186, 188, 194, 196, 198], "while": [15, 24, 185, 189, 190, 191, 195, 199, 200, 201], "over": [15, 19, 56, 61, 62, 63, 64, 65, 70, 99, 109, 176, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201], "o": [15, 25, 151, 152, 153, 181], "chapel": 15, "proceed": [15, 26, 127, 129, 140, 141, 144, 145, 146, 147, 148, 158, 163, 164, 176, 181], "tenth": 15, "workshop": [15, 41, 145, 146, 147, 148, 176, 181], "artifici": [15, 40, 47, 52, 57, 132, 144, 158, 163, 181, 183, 191, 193, 201], "intellig": [15, 40, 41, 47, 52, 57, 71, 74, 132, 144, 145, 158, 163, 177, 181, 187, 197], "statist": [15, 31, 132, 181], "2005": [15, 48, 163, 181], "chaudhuri": 15, "kakd": 15, "d": [15, 27, 41, 46, 48, 61, 62, 63, 64, 65, 70, 74, 107, 145, 163, 181], "sadek": 15, "gonzalez": 15, "kong": 15, "median": 15, "criteria": 15, "bandwidth": 15, "ieee": [15, 26, 29, 47, 48, 57, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 127, 130, 147, 164, 168, 169, 170, 171, 172, 174, 175, 179, 181], "confer": [15, 26, 28, 29, 41, 47, 49, 52, 54, 55, 57, 59, 122, 125, 126, 127, 129, 130, 140, 141, 144, 145, 146, 147, 155, 156, 157, 158, 163, 164, 181, 187, 197], "mine": [15, 26, 29, 44, 54, 55, 127, 130, 151, 152, 153, 176, 181], "icdmw": 15, "2017": [15, 126, 181], "x_": [15, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "v_": 15, "count": [15, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 98, 99, 189, 190, 191, 199, 200, 201], "additive_chi2": [15, 42], "chi2": [15, 42], "cosin": [15, 42], "linear": [15, 29, 42, 183, 187, 193, 197], "poli": [15, 42], "polynomi": [15, 42], "laplacian": [15, 42], "sigmoid": [15, 42], "metaestimatormixin": [16, 17], "filter": [16, 71, 74, 181], "estimator_": 16, "fit_kwarg": [16, 17], "duplic": [16, 17], "partial_fit": [16, 17, 37, 48, 58, 191, 201], "predict_kwarg": [16, 17], "predict_proba_kwarg": [16, 17], "lexicograph": [16, 17, 58], "set_partial_fit_request": [16, 17], "window_s": [17, 70], "only_label": 17, "limit": [17, 189, 190, 199, 200], "latest": 17, "furthermor": [17, 186, 196], "enabl": [17, 22, 33, 41, 185, 195], "wrap": [17, 28, 104, 182, 192, 202], "alreadi": [17, 53, 75, 76, 77, 78, 79, 80, 81, 95, 184, 187, 188, 194, 197, 198], "slide": [17, 70, 189, 190, 191, 199, 200, 201], "approach": [17, 25, 30, 37, 126, 181], "size": [17, 29, 44, 61, 62, 63, 64, 65, 70, 76, 77, 78, 79, 80, 81, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 185, 187, 188, 189, 190, 191, 193, 195, 197, 198, 199, 200, 201], "unrestrict": 17, "discard": 17, "base_estim": 17, "predict_freq_kwarg": 17, "hard": 18, "_baseheterogeneousensembl": 18, "tupl": [18, 93, 94, 96, 184, 185, 194, 195], "ensembl": [18, 22, 33, 41, 59, 123, 135, 145, 146, 147, 148, 181, 184, 185, 194, 195], "element": [18, 22, 33, 41, 105, 106], "soft": [18, 183, 193], "rule": 18, "els": [18, 107, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 157, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 199, 201, 202], "argmax": [18, 105], "calibr": 18, "estimators_": [18, 22, 33, 41], "drop": [18, 187, 197], "appear": [18, 58, 99, 104], "n_estim": [18, 22, 33, 41, 49, 50, 59, 60, 184, 194], "constructor": [18, 185, 195], "variou": [18, 47, 116, 187, 197], "properti": 18, "named_estim": 18, "dictionari": [18, 19, 30, 31, 36, 56, 185, 186, 187, 195, 196, 197], "access": [18, 58, 182, 192], "bunch": 18, "keyword": [18, 38, 45, 105, 106, 110, 115], "parameter_nam": 18, "new_valu": 18, "individu": 18, "remov": [18, 105, 106], "tol": 19, "01": [19, 75, 79, 80, 81, 165, 183, 187, 193, 197, 203], "max_it": 19, "fit_intercept": 19, "annot_prior_ful": 19, "annot_prior_diag": 19, "weights_prior": 19, "solver": [19, 185, 195], "newton": 19, "cg": 19, "solver_dict": 19, "logist": [19, 28, 182, 192], "raykar": 19, "besid": [19, 56], "build": [19, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "task": [19, 27, 30, 131, 181, 183, 193], "assum": [19, 26, 29, 36, 55], "depend": [19, 56, 68, 72, 73, 75, 79, 81, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "confus": [19, 99], "row": [19, 59, 60, 85, 99, 107], "normal": [19, 48, 82, 99, 164, 187, 197], "bia": [19, 187, 197], "bias": 19, "refin": 19, "regular": 19, "threshold": [19, 22, 24, 33, 41, 49, 50, 55, 66, 68, 73, 74, 75, 77, 79, 80, 81], "stop": [19, 37, 48], "em": [19, 49, 146, 181], "smaller": [19, 75, 76, 78, 79, 80, 81], "than": [19, 32, 34, 42, 44, 55, 74, 75, 76, 77, 78, 79, 80, 81], "iter": [19, 44, 97, 182, 183, 185, 187, 188, 192, 193, 195, 197, 198, 202], "k": [19, 25, 33, 44, 46, 49, 56, 113, 131, 147, 181, 186, 196], "intercept": 19, "ad": [19, 48, 53, 58, 183, 193], "diagon": [19, 91], "being": [19, 21, 99], "ey": 19, "invers": 19, "covari": 19, "ident": [19, 29, 187, 197], "nelder": 19, "mead": 19, "powel": 19, "bfg": 19, "tnc": 19, "cobyla": 19, "slsqp": 19, "trust": 19, "constr": 19, "dogleg": 19, "ncg": 19, "exact": 19, "krylov": 19, "custom": [19, 97], "optim": [19, 37, 47, 58, 77, 140, 141, 181, 183, 193], "minim": [19, 22, 23, 31, 33, 53, 57, 60, 86, 148, 181], "maxit": 19, "5": [19, 29, 32, 44, 46, 48, 112, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "yu": 19, "zhao": [19, 168, 169, 170, 171, 181], "h": [19, 41, 42, 59, 145, 146, 147, 148, 181], "valadez": 19, "florin": 19, "bogoni": 19, "moi": 19, "2010": [19, 42, 149, 181], "crowd": 19, "journal": [19, 132, 181, 202], "research": [19, 132, 176, 181, 187, 197, 202], "11": [19, 48, 124, 131, 133, 135, 165, 181, 187, 197, 203], "4": [19, 41, 122, 123, 124, 132, 133, 142, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "_": [19, 99, 130, 131, 132, 136, 137, 138, 139, 145, 184, 194], "n_annotators_": [19, 54], "w_": 19, "alpha_": 19, "describ": [19, 48, 58], "herebi": 19, "hi": 19, "her": 19, "with_traceback": 20, "tb": 20, "__traceback__": 20, "clf_embedding_flag_nam": [21, 23, 24], "design": 21, "incorpor": 21, "flag": [21, 23, 24, 39, 48], "represent": [21, 23, 24, 122, 126, 181, 187, 197], "clf_embedding_nam": [21, 23, 24], "proba": [21, 23, 24, 49, 50, 52, 57], "ash": [21, 122, 181], "jordan": [21, 31, 122, 132, 181], "chicheng": [21, 122, 181], "zhang": [21, 29, 122, 130, 181], "akshai": [21, 122, 181], "krishnamurthi": [21, 122, 181], "john": [21, 122, 181], "langford": [21, 122, 181], "alekh": [21, 122, 181], "agarw": [21, 122, 181], "uncertain": [21, 122, 181, 182, 192], "lower": [21, 54, 96, 122, 181, 183, 186, 187, 193, 196, 197], "bound": [21, 54, 86, 92, 96, 109, 110, 111, 114, 115, 122, 181, 182, 186, 188, 192, 196, 198], "iclr": [21, 25], "2019": [21, 22, 27, 28, 34, 35, 36, 50, 123, 128, 129, 136, 137, 138, 139, 181], "uniformli": [21, 89, 184, 194], "chosen": [21, 56], "n_mc_sampl": [22, 33, 50], "ep": [22, 24, 33, 41, 49, 50, 187, 197], "1e": [22, 24, 33, 41, 49, 50, 187, 197], "07": [22, 24, 33, 41, 49, 50, 165, 203], "sample_predictions_method_nam": [22, 33, 41, 145, 146, 147, 148], "sample_predictions_dict": [22, 33, 41, 145, 146, 147, 148], "_generalbald": [22, 33], "reduc": [22, 33], "hypothes": [22, 33], "fast": [22, 33], "about": [22, 33, 67, 72], "shannon": [22, 33], "seek": [22, 33], "point": [22, 25, 33, 50, 114, 182, 183, 186, 192, 193, 196, 202], "maximis": [22, 33], "decreas": [22, 33, 74], "posterior": [22, 23, 33, 57], "7": [22, 24, 33, 41, 48, 49, 50, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201], "minimum": [22, 24, 33, 39, 41, 49, 50, 57, 85, 96, 106, 202], "certain": [22, 33, 41, 44], "offer": [22, 33, 41, 202], "construct": [22, 33, 41, 189, 190, 191, 199, 200, 201], "member": [22, 33, 41], "take": [22, 23, 29, 30, 33, 39, 41, 96, 183, 193], "n_member": [22, 33, 41], "exclud": [22, 23, 33, 39, 41, 46], "kirsch": [22, 50, 123, 181], "andrea": [22, 50, 123, 147, 181], "joost": [22, 50, 123, 181], "van": [22, 50, 74, 123, 181], "amersfoort": [22, 50, 123, 181], "yarin": [22, 50, 123, 181], "gal": [22, 50, 123, 181], "effici": [22, 50, 54, 55, 123, 181], "acquisit": [22, 50, 74, 123, 181, 189, 190, 199, 200], "advanc": [22, 42, 50, 71, 74, 123, 143, 149, 177, 181, 185, 195], "neural": [22, 25, 42, 50, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 123, 126, 143, 149, 168, 169, 170, 171, 172, 174, 175, 179, 181], "process": [22, 42, 50, 56, 123, 125, 143, 149, 181, 187, 188, 190, 197, 198, 200, 202], "32": [22, 50, 85, 181, 183, 193], "fit_ensembl": [22, 33, 41, 183, 193], "plu": [22, 33, 41], "cluster_algo": [23, 39, 46], "_kmean": [23, 39, 46], "kmean": [23, 39, 46, 156, 157], "cluster_algo_dict": [23, 39, 46, 143, 155], "n_cluster_param_nam": [23, 39, 46], "n_cluster": [23, 39, 46], "clustermixin": [23, 39, 46], "__class__": [23, 39, 46, 184, 194], "fit_transform": [23, 29, 82, 183, 193], "minibatchkmean": 23, "least_confid": [23, 47, 57, 156, 157, 160], "margin_sampl": [23, 47, 57, 161], "gap": [23, 57], "second": [23, 57, 112, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 187, 192, 197], "prabhu": [23, 124, 181], "viraj": [23, 124, 181], "arjun": [23, 124, 181], "chandrasekaran": [23, 124, 181], "kate": [23, 124, 181], "saenko": [23, 124, 181], "judi": [23, 124, 181], "hoffman": [23, 124, 181], "domain": [23, 124, 181], "iccv": [23, 124, 181], "2022": [23, 39, 46, 143, 155, 181], "nearest_neighbors_dict": 24, "neighbor": [24, 26, 46, 70], "nearestneighbor": [24, 26], "margatina": [24, 125, 181], "katerina": [24, 125, 181], "giorgo": [24, 125, 181], "verniko": [24, 125, 181], "lo\u00efc": 24, "barrault": [24, 125, 181], "nikolao": [24, 125, 164, 181], "aletra": [24, 125, 181], "emnlp": 24, "pp": [24, 37, 48, 54, 55, 61, 62, 63, 64, 65, 70, 71], "650": [24, 125, 181], "663": [24, 125, 181], "2021": [24, 61, 62, 63, 64, 65, 124, 125, 181, 202], "own": 24, "center": [25, 53, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 186, 188, 189, 190, 191, 196, 198, 199, 200, 201, 202], "sener": [25, 126, 181], "und": [25, 46], "savares": [25, 126, 181], "convolut": [25, 126, 181], "network": [25, 61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 126, 168, 169, 170, 171, 172, 174, 175, 179, 181], "2018": [25, 30, 41, 47, 52, 59, 131, 147, 158, 181], "base_regressor": 26, "embed_dim": 26, "mds_param": 26, "nn_param": 26, "alc": [26, 127, 165, 181, 203], "libact": 26, "actual": [26, 37, 47, 48, 57, 186, 187, 196, 197], "variant": [26, 47, 57, 184, 194], "symbol": [26, 90, 92, 94, 100, 101, 102, 108], "org": [26, 99], "stabl": [26, 99], "manifold": 26, "md": 26, "kuan": [26, 127, 181], "hao": [26, 127, 181], "hsuan": [26, 47, 57, 127, 181], "tien": [26, 47, 57, 127, 181], "lin": [26, 34, 35, 47, 57, 127, 136, 137, 138, 181], "novel": [26, 36, 127, 139, 181], "multiclass": [26, 47, 48, 57, 127, 181], "icdm": 26, "2016": [26, 40, 127, 144, 181], "greedy_select": 27, "dal": [27, 128, 165, 181, 203], "Its": 27, "idea": [27, 58, 61, 62, 63, 64, 65, 67], "solv": [27, 202], "binari": [27, 99], "choos": [27, 56, 107], "indistinguish": 27, "kept": 27, "gissin": [27, 128, 181], "shalev": [27, 128, 181], "shwartz": [27, 128, 181], "arxiv": [27, 33, 50, 123, 128, 135, 181], "1907": 27, "06347": 27, "redefin": 27, "signific": [28, 182, 192], "nguyen": [28, 129, 156, 157, 181], "vu": [28, 129, 181], "linh": [28, 129, 181], "s\u00e9bastien": [28, 129, 181], "desterck": [28, 129, 181], "eyk": [28, 129, 181], "h\u00fcllermeier": [28, 129, 181], "discoveri": [28, 44, 54, 55, 129, 151, 152, 153, 181], "scienc": [28, 32, 34, 35, 47, 57, 74, 129, 133, 134, 136, 137, 138, 159, 160, 161, 181], "springer": [28, 71, 74, 129, 156, 157, 177, 181], "cham": [28, 74, 177, 181], "linear_model": [28, 156, 157, 182, 187, 192, 197], "logisticregress": [28, 156, 157, 182, 187, 192, 197], "bootstrap_s": 29, "n_train": 29, "ord": 29, "feature_map": 29, "bootstrap": 29, "compar": [29, 74, 75, 76, 78, 79, 80, 81, 182, 186, 187, 189, 190, 191, 192, 196, 197, 199, 200, 201], "lie": 29, "rang": [29, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 200, 202], "greater": [29, 42, 44, 55, 56], "norm": [29, 184, 187, 194, 197], "measur": [29, 32, 47, 49, 59, 60, 70, 182, 192], "linalg": 29, "dimens": [29, 85, 86, 93, 105, 106, 187, 197], "polynomialfeatur": 29, "cai": [29, 130, 181], "wenbin": [29, 130, 181], "ya": [29, 130, 181], "jun": [29, 130, 149, 181], "zhou": [29, 42, 61, 62, 63, 64, 65, 130, 149, 168, 169, 170, 171, 181], "2013": [29, 32, 47, 57, 130, 133, 134, 181], "13th": [29, 130, 181], "51": [29, 130, 181], "60": [29, 130, 181, 184, 194], "reg": [29, 30, 31, 34, 36, 44, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 185, 194, 195], "fit_reg": [29, 30, 31, 34, 36, 44, 184, 194], "integration_dict": [30, 31, 131], "integr": [30, 31, 36], "integration_method": 30, "_conditional_expect": [30, 31, 36], "assume_linear": [30, 184, 194], "mean_squared_error": 30, "altern": 30, "mean_absolute_error": 30, "christoph": [30, 131, 181, 202], "kaed": 30, "erik": [30, 131, 181], "rodner": [30, 131, 181], "alexand": [30, 131, 181, 202], "freytag": [30, 131, 181], "oliv": [30, 131, 181], "moth": [30, 131, 181], "bjoern": 30, "barz": [30, 131, 181], "joachim": [30, 131, 181], "denzler": [30, 131, 181], "bmvc": [30, 131, 181], "15": [30, 61, 62, 63, 64, 65, 130, 131, 132, 136, 137, 138, 139, 181, 183, 184, 193, 194], "x_eval": [30, 31, 37, 185, 195], "n_eval_sampl": [30, 31, 37, 185, 195], "referenc": 30, "propos": [30, 61, 62, 63, 64, 65, 70, 74], "is_unlabel": [30, 100], "tri": [31, 35, 61, 62, 63, 64, 65], "cohn": [31, 132, 181], "david": [31, 132, 181], "ghahramani": [31, 33, 50, 123, 132, 135, 181], "zoubin": [31, 33, 50, 123, 132, 135, 181], "michael": [31, 132, 181], "129": [31, 132, 181], "145": [31, 71, 132, 177, 181], "1996": [31, 60, 132, 148, 181], "lmbda": [32, 42, 149], "4d": [32, 133, 134, 165, 181, 203], "mixturemodelclassifi": [32, 133, 134], "05": [32, 54, 55, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 187, 193, 197], "round": [32, 183, 193], "avoid": [32, 202], "redund": 32, "regul": 32, "factor": [32, 61, 62, 63, 64, 65], "reitmaier": [32, 133, 134, 181], "sick": [32, 133, 134, 181, 202], "let": [32, 133, 134, 181, 182, 192], "know": [32, 133, 134, 181, 182, 186, 192, 196], "230": [32, 133, 134, 181], "106": [32, 133, 134, 145, 165, 181, 203], "131": [32, 133, 134, 181], "houlsbi": [33, 50, 123, 135, 181], "neil": [33, 50, 123, 135, 181], "ferenc": [33, 50, 123, 135, 181], "husz\u00e1r": [33, 50], "m\u00e1t\u00e9": [33, 50], "lengyel": [33, 50, 123, 135, 181], "prefer": [33, 50, 56, 123, 135, 181], "preprint": [33, 50, 123, 135, 181, 202], "1112": [33, 50, 123, 135, 181], "5745": [33, 50, 123, 135, 181], "2011": [33, 50, 123, 135, 181], "x_metric": 34, "y_metric": 34, "x_metric_dict": 34, "y_metric_dict": 34, "n_gsx_sampl": 34, "pairwise_dist": [34, 35, 39, 61, 62, 63, 64, 65, 70], "till": 34, "switch": 34, "exce": [34, 66, 68, 72, 73, 75, 77, 79, 81], "wu": [34, 35, 61, 62, 63, 64, 65, 136, 137, 138, 168, 169, 170, 171, 181], "dongrui": [34, 35, 136, 137, 138, 181], "chin": [34, 35, 136, 137, 138, 181], "teng": [34, 35, 136, 137, 138, 181], "jian": [34, 35, 136, 137, 138, 168, 169, 170, 171, 181], "huang": [34, 35, 42, 127, 136, 137, 138, 149, 181], "90": [34, 35, 136, 137, 138, 181], "105": [34, 35, 136, 137, 138, 181], "those": [35, 36, 99, 188, 198, 202], "increas": [35, 74, 75, 79, 80, 81], "euclidean": 35, "integration_dict_target_v": [36, 139, 184, 194], "integration_dict_cross_entropi": [36, 184, 194], "independ": [36, 38, 48], "cross": [36, 185, 186, 188, 195, 196, 198], "old": 36, "conditional_expect": 36, "elreedi": [36, 139, 181], "dina": [36, 139, 181], "atiya": [36, 139, 181], "amir": [36, 139, 181], "shaheen": [36, 139, 181], "samir": [36, 139, 181], "balanc": [36, 71, 74, 139, 181], "explor": [36, 55, 139, 181], "exploit": [36, 55, 139, 181], "trade": [36, 55, 139, 181], "off": [36, 55, 139, 181], "651": [36, 139, 181], "subsequ": [36, 187, 197], "potenti": [36, 58, 202], "misclassification_loss": [37, 141], "subtract_curr": [37, 48, 162, 163, 164], "expectederrorreduct": [37, 48], "ever": [37, 48], "outcom": [37, 48], "kind": [37, 48, 84], "risk": [37, 48], "log_loss": [37, 140], "subtract": [37, 48], "criterion": [37, 48], "roi": [37, 140, 141, 181], "mccallum": [37, 49, 140, 141, 146, 181], "2001": [37, 140, 141, 181], "toward": [37, 140, 141, 181], "icml": [37, 46], "441": [37, 140, 141, 181], "448": [37, 140, 141, 181], "ignore_partial_fit": [37, 48, 58, 140, 141, 162, 163, 164], "sample_weight_candid": 37, "sample_weight_ev": 37, "ndim": [37, 40, 47, 85, 86, 107, 110, 114, 115], "Not": [37, 185, 195], "applic": [37, 40, 47, 57, 176, 181, 202], "n_job": [38, 142], "parallel_dict": 38, "assumpt": 38, "anoth": [38, 184, 186, 187, 189, 191, 194, 196, 197, 199, 201], "cpu": [38, 183, 187, 193, 197], "joblib": 38, "query_kwarg": [38, 45, 56], "delta": [39, 68, 75, 79, 157], "95": [39, 182, 192], "distance_func": 39, "aim": [39, 187, 197], "meaning": [39, 187, 197], "extract": [39, 187, 197], "fallback": 39, "n_delta": 39, "ball": 39, "radii": 39, "find": [39, 202], "satisfi": 39, "warn": [39, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 85, 169, 170, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197], "arang": [39, 183, 186, 187, 190, 193, 196, 197, 200], "speedup": 39, "yehuda": [39, 143, 181], "ofer": [39, 143, 181], "avihu": [39, 143, 155, 181], "dekel": [39, 46, 143, 155, 181], "gui": [39, 143, 155, 181], "hacohen": [39, 46, 143, 155, 181], "daphna": [39, 143, 155, 181], "weinshal": [39, 46, 143, 155, 181], "neurip": 39, "delta_max_": 39, "distances_": 39, "shall": 39, "impact": 39, "quantiti": 39, "degre": [39, 183, 193], "m_max": [40, 51, 71], "mcpal": [40, 71, 144, 165, 181, 203], "hypothet": [40, 51], "multipli": [40, 47, 68, 71, 95], "typeerror": [40, 96], "daniel": [40, 128, 144, 177, 181, 202], "kottk": [40, 71, 74, 144, 177, 181, 202], "georg": [40, 144, 177, 181], "krempl": [40, 74, 144, 177, 181], "dominik": [40, 144, 181], "lang": [40, 144, 181], "johann": [40, 144, 181], "teschner": [40, 144, 181], "myra": [40, 144, 177, 181], "spiliopoul": [40, 74, 144, 177, 181], "vol": [40, 48, 74], "285": [40, 144, 181], "frontier": 40, "586": [40, 144, 181], "594": [40, 144, 181], "io": [40, 144, 181], "press": [40, 144, 181, 185, 195], "utility_weight": [40, 47, 71, 144, 156, 157], "kl_diverg": [41, 146], "disagre": 41, "vote_entropi": [41, 148], "variation_ratio": [41, 147], "gaussian_process": [41, 123, 135, 145, 186, 196, 202], "gaussianprocessregressor": [41, 145], "seung": [41, 145, 146, 147, 148, 181], "opper": [41, 145, 146, 147, 148, 181], "sompolinski": [41, 145, 146, 147, 148, 181], "acm": [41, 54, 55, 145, 146, 147, 148, 181], "theori": [41, 145, 146, 147, 148, 181], "287": [41, 145, 146, 147, 148, 181], "294": [41, 145, 146, 147, 148, 181], "1992": [41, 145, 146, 147, 148, 181], "ab": 41, "mamitsuka": 41, "boost": 41, "bag": 41, "9": [41, 55, 72, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 181, 183, 185, 187, 193, 195, 197], "1998": [41, 49, 146, 181], "burbidg": [41, 145, 181], "robert": [41, 145, 181], "rowland": [41, 145, 181], "jem": [41, 145, 181], "king": [41, 145, 181], "ross": [41, 145, 181], "engin": [41, 145, 181], "autom": [41, 145, 181, 187, 197], "209": [41, 145, 181], "218": [41, 145, 181], "2007": [41, 48, 145, 156, 157, 162, 181], "beluch": [41, 59, 147, 181], "genewein": [41, 59, 147, 181], "n\u00fcrnberger": [41, 59], "k\u00f6hler": [41, 59], "power": [41, 59, 147, 181], "vision": [41, 59, 147, 164, 181, 187, 197], "pattern": [41, 59, 147, 164, 181], "recognit": [41, 47, 52, 59, 147, 158, 164, 181], "9368": [41, 59, 147, 181], "9377": [41, 59, 147, 181], "short": [42, 187, 197], "high": [42, 46, 61, 62, 63, 64, 65, 70, 155, 176, 181], "low": [42, 46, 155, 181], "jin": [42, 149, 181], "z": [42, 61, 62, 63, 64, 65], "max_iter_repres": 44, "n_k": 44, "leaf": 44, "optimis": 44, "jose": [44, 151, 152, 153, 181], "ashna": [44, 151, 152, 153, 181], "jo\u00e3o": 44, "paulo": [44, 151, 152, 153, 181], "almeida": [44, 151, 152, 153, 181], "de": [44, 74, 151, 152, 153, 181], "mendon\u00e7a": 44, "emili": [44, 151, 152, 153, 181], "devijv": [44, 151, 152, 153, 181], "no\u00ebl": 44, "jaks": [44, 151, 152, 153, 181], "val\u00e9ri": 44, "monbet": [44, 151, 152, 153, 181], "roberta": [44, 151, 152, 153, 181], "poloni": [44, 151, 152, 153, 181], "knowledg": [44, 54, 55, 151, 152, 153, 181, 185, 195], "2023": [44, 151, 152, 153, 168, 169, 170, 171, 181], "420": [44, 151, 152, 153, 181], "460": [44, 151, 152, 153, 181], "decisiontreeregressor": [44, 151, 152, 153], "min_samples_leaf": [44, 151, 152, 153], "restrict": 44, "depth": 44, "max_candid": [45, 154], "fraction": 45, "opposit": [46, 155, 181], "suit": [46, 155, 181], "expected_average_precis": [47, 158, 165, 203], "settl": [47, 57, 159, 160, 161, 181], "burr": [47, 57, 159, 160, 161, 181], "literatur": [47, 57, 159, 160, 161, 181], "survei": [47, 57, 159, 160, 161, 181], "univers": [47, 57, 159, 160, 161, 181], "wisconsin": [47, 57, 159, 160, 161, 181], "madison": [47, 57], "depart": [47, 57, 159, 160, 161, 181], "2009": [47, 54, 55, 57, 159, 160, 161, 164, 181], "chen": [47, 57], "po": [47, 57], "lung": [47, 57], "technologi": [47, 57], "wang": [47, 52, 158, 181], "hanmo": [47, 52, 158, 181], "et": [47, 52, 61, 62, 63, 64, 65, 70, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 162, 164, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 181, 187, 197], "action": [47, 52, 158, 181], "ijcai": [47, 48, 52, 162, 181], "joint": [47, 50, 52, 158, 163, 181], "consider_unlabel": [48, 162, 163, 164], "consider_label": [48, 162, 163, 164], "candidate_to_label": [48, 162, 163, 164], "under": [48, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "term": 48, "kapoor": [48, 162, 181], "ashish": [48, 162, 181], "eric": [48, 162, 181], "horvitz": [48, 162, 181], "sumit": [48, 162, 181], "basu": [48, 162, 181], "supervis": [48, 60, 148, 162, 181, 185, 195, 202, 205], "theoret": [48, 162, 181], "joshi": [48, 164, 181], "porikli": [48, 164, 181], "papanikolopoulo": [48, 164, 181], "2012": 48, "scalabl": 48, "trpami": 48, "34": [48, 140, 165, 168, 169, 170, 171, 181, 183, 187, 193, 197, 203], "2259": 48, "2273": 48, "margineantu": [48, 163, 181], "1622": [48, 163, 181], "1623": [48, 163, 181], "kl": 49, "level": [49, 54, 55, 59, 60, 112, 114], "querybycommitte": [49, 59, 60, 145, 146, 147, 148, 165, 181, 183, 184, 193, 194, 203], "nigam": 49, "emploi": [49, 146, 181, 187, 197], "text": [49, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181], "359": [49, 146, 181], "367": [49, 146, 181], "extens": [50, 61, 62, 63, 64, 65, 70, 71, 99], "wherebi": 50, "jointli": 50, "mutual": 50, "k_vec_list": 51, "001": [51, 71, 169, 180, 188, 198, 203], "expected_cost_reduct": 51, "n_x_cand": 52, "n_new_cand": 53, "greedili": 53, "datapoint": 53, "n_selected_sampl": 53, "mode": 54, "upper": [54, 96], "reli": [54, 55, 184, 194], "interv": [54, 55, 112, 113, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "ielearn": 54, "ground": 54, "truth": 54, "half": [54, 55], "student": [54, 55], "ti": [54, 55, 105, 106], "donmez": [54, 55, 156, 157, 181], "pinar": [54, 55, 156, 157, 181], "jaim": [54, 55, 156, 157, 181], "carbonel": [54, 55, 156, 157, 181], "jeff": [54, 55], "schneider": [54, 55], "15th": [54, 55], "sigkdd": [54, 55], "259": [54, 55], "268": [54, 55], "a_perf_": 54, "a_cand": 54, "epsilon": [55, 86], "iethresh": 55, "address": 55, "intervalestimationannotmodel": 55, "nonetheless": 55, "rank": [55, 56], "amount": [55, 202], "n_cand_sampl": 55, "y_aggreg": [56, 103], "transform": [56, 82, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 187, 193, 197], "a_pef": 56, "majority_vot": [56, 188, 198], "n_annotators_per_sampl": [56, 188, 198], "a_perf": 56, "primarili": 56, "unspecifi": 56, "previous": [56, 187, 197], "interpret": [56, 93], "th": [56, 99, 107], "last": [56, 74, 76, 77, 78, 79, 80, 81, 113, 182, 192], "lc": 57, "maximi": 57, "smallest": [57, 187, 197], "sm": 57, "set_base_clf": 58, "enforce_unique_sampl": 58, "use_speed_up": 58, "simplifi": [58, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "retrain": [58, 182, 185, 192, 195], "scenario": 58, "therebi": [58, 97, 202], "pre": [58, 156, 157, 181, 187, 189, 190, 191, 197, 199, 200, 201], "newli": 58, "simpli": [58, 202], "append": [58, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 202], "repeat": [58, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "speed": 58, "up": 58, "idx": [58, 185, 188, 195, 198], "n_sub_sampl": 58, "init": 58, "is_fit": 58, "base_clf": 58, "resp": 58, "use_base_clf": 58, "idx_fit": 58, "idx_pr": 58, "fit_param": 58, "pred_param": 58, "Will": 58, "idx_predict": 58, "n_fit_sampl": 58, "n_predict_sampl": 58, "subset": [58, 99], "later": [58, 61, 62, 63, 64, 65, 67, 72], "engelson": [60, 148, 181], "sean": [60, 148, 181], "ido": [60, 148, 181], "dagan": [60, 148, 181], "manual": [60, 148, 181], "corpora": [60, 148, 181], "annual": [60, 145, 146, 147, 148, 181], "meet": [60, 148, 181], "associ": [60, 148, 181], "linguist": [60, 148, 181], "319": [60, 148, 181], "326": [60, 148, 181], "budget_manag": [61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73, 87, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 191, 199, 201], "density_threshold": [61, 62, 63, 64, 65], "cognition_window_s": [61, 62, 63, 64, 65], "dist_func": [61, 62, 63, 64, 65, 70], "dist_func_dict": [61, 62, 63, 64, 65, 70], "force_full_budget": [61, 62, 63, 64, 65, 169, 170, 189, 191, 199, 201], "cognitivedualquerystrategyran": [61, 169, 180, 181, 189, 191, 199, 201, 203], "cognitivedualquerystrategyranvarun": [61, 170, 180, 181, 189, 191, 199, 201, 203], "cognitivedualquerystrategyvarun": [61, 171, 180, 181, 189, 191, 199, 201, 203], "cognitivedualquerystrategyfixun": [61, 168, 180, 181, 189, 191, 199, 201, 203], "\u017eliobait\u0117": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 172, 174, 175, 176, 179, 181], "streamdensitybased": [61, 62, 63, 64, 65, 176, 180, 181, 189, 191, 199, 201, 203], "around": [61, 62, 63, 64, 65], "author": [61, 62, 63, 64, 65, 202], "thrown": [61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 73], "full": [61, 62, 63, 64, 65, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 185, 186, 187, 188, 190, 192, 195, 196, 197, 198, 200, 202], "doesn": [61, 62, 63, 64, 65], "estimatedbudgetzliobait": [61, 62, 63, 64, 65, 75, 77, 78, 79, 80, 81], "zliobait": [61, 75, 80], "randombudgetmanag": [61, 63], "fixeduncertaintybudgetmanag": [61, 62, 66], "variableuncertaintybudgetmanag": [61, 65, 73], "randomvariableuncertaintybudgetmanag": [61, 64, 68], "liu": [61, 62, 63, 64, 65, 168, 169, 170, 171, 181], "xue": [61, 62, 63, 64, 65, 168, 169, 170, 171, 181], "yang": [61, 62, 63, 64, 65, 158, 168, 169, 170, 171, 181], "li": [61, 62, 63, 64, 65, 168, 169, 170, 171, 181], "cao": [61, 62, 63, 64, 65, 168, 169, 170, 171, 181], "onlin": [61, 62, 63, 64, 65, 168, 169, 170, 171, 181], "drift": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 168, 169, 170, 171, 172, 174, 175, 179, 181], "transact": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 168, 169, 170, 171, 172, 174, 175, 179, 181, 187, 197], "bifet": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 172, 174, 175, 179, 181], "pfahring": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 172, 174, 175, 176, 179, 181], "holm": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 172, 174, 175, 179, 181], "2014": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 172, 174, 175, 176, 179, 181], "With": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 202], "25": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 76, 113, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 187, 194, 197], "27": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 164, 165, 172, 174, 175, 179, 181, 187, 197, 203], "39": [61, 62, 63, 64, 65, 66, 68, 69, 70, 73, 76, 172, 174, 175, 179, 181, 187, 197], "ienco": [61, 62, 63, 64, 65, 70, 176, 181], "zliobait\u0117": [61, 62, 63, 64, 65, 70], "focus": [61, 62, 63, 64, 65, 70, 176, 181], "evolv": [61, 62, 63, 64, 65, 70, 176, 181], "bigmin": [61, 62, 63, 64, 65, 70], "133": [61, 62, 63, 64, 65, 70, 147, 165, 176, 181, 203], "148": [61, 62, 63, 64, 65, 70, 176, 181], "seen": [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73], "cognitivedualquerystrategi": [62, 63, 64, 65], "fixeduncertainti": [62, 77, 172, 180, 181, 189, 191, 199, 201, 203], "randomvariableuncertainti": [64, 174, 180, 181, 203], "variableuncertainti": [65, 69, 80, 179, 180, 181, 189, 191, 199, 201, 203], "uncertaintyzliobait": [66, 68, 69, 73], "fourth": 67, "behind": 67, "exhaust": [67, 72, 75, 76, 77, 78, 79, 80, 81], "soon": 67, "regardless": [67, 72], "posit": [67, 72, 99, 113], "thu": [67, 72, 99, 184, 194], "baselin": [67, 72], "ran": 68, "var": [68, 73], "better": [68, 182, 192, 202], "detect": 68, "splitbudgetmanag": [69, 75], "1000": [70, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 183, 189, 190, 191, 193, 199, 200, 201], "densitybasedbudgetmanag": [70, 75], "spatial": [71, 74], "increment": [71, 74, 76], "quantil": [71, 74], "balancedincrementalquantilefilt": [71, 189, 199], "tempor": 71, "0e": 71, "onto": 71, "2015": [71, 74, 177, 181], "analysi": [71, 74, 177, 181], "xiv": [71, 74, 177, 181], "157": [71, 177, 181], "n_candidate_sampl": 71, "pal": [71, 191, 201], "allow_exceeding_budget": 72, "long": 72, "w_tol": 74, "50": [74, 185, 186, 189, 190, 191, 195, 196, 199, 200, 201, 203], "togeth": 74, "warrant": 74, "ultil": 74, "against": [74, 186, 187, 196, 197], "deriv": 74, "infer": [74, 86], "higher": [74, 75, 76, 77, 78, 79, 80, 81], "stai": 74, "fromont": 74, "bie": 74, "leeuwen": 74, "ed": 74, "ida": 74, "lectur": 74, "9385": 74, "estimatedbudget": 74, "theta": [75, 79, 80, 81], "spent": [75, 76, 78, 79, 80, 81], "start": [75, 79, 80, 81, 183, 193, 202, 205], "wich": [75, 79, 80, 81], "purchas": [75, 79, 80, 81], "recalcul": [75, 79, 80, 81], "decres": [75, 79, 80, 81], "standart": [75, 79], "u_t": [76, 78, 79, 80, 81], "labl": [76, 78, 79, 80, 81], "funktion": [76, 78, 79, 80, 81], "labeling_t": [76, 78, 79, 80, 81], "memori": [76, 77, 78, 79, 80, 81], "num_class": 77, "left": [77, 78, 79, 81], "fixeduncertaintybudget": 77, "recurs": [78, 79, 80, 81], "randomvariableuncertaintybudget": 79, "percent": 80, "splitbudget": 80, "variableuncertaintybudget": 81, "encod": 82, "inverse_transform": 82, "back": 82, "y_dec": 82, "y_enc": 82, "func": 83, "n_positional_paramet": 83, "free": 83, "n_free_paramet": 83, "f_callabl": 84, "only_mandatori": 84, "ignore_var_keyword": 84, "mandatori": 84, "var_keyword": 84, "inspect": 84, "sample_weight_cand": 85, "accept_spars": 85, "accept_large_spars": 85, "copi": [85, 87, 183, 184, 193, 194], "force_all_finit": 85, "ensure_2d": 85, "allow_nd": 85, "multi_output": 85, "allow_nan": 85, "ensure_min_sampl": 85, "ensure_min_featur": 85, "y_numer": 85, "2d": [85, 102, 108], "1d": 85, "By": [85, 99, 185, 187, 195, 197], "empti": [85, 202], "finit": 85, "inf": [85, 157], "attempt": 85, "convert": [85, 191, 201], "failur": 85, "nd": [85, 107], "csc": 85, "csr": 85, "coo": 85, "bsr": 85, "suppli": 85, "caus": 85, "bit": 85, "20": [85, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 181, 182, 184, 188, 192, 194, 198, 202], "preserv": 85, "unless": [85, 182, 186, 192, 196], "convers": 85, "forc": 85, "fortran": 85, "trigger": 85, "pd": 85, "na": 85, "cannot": [85, 182, 185, 192, 195], "infinit": 85, "axi": [85, 105, 106, 111, 112, 113, 114, 115, 184, 186, 187, 194, 196, 197], "reject": 85, "dataset": [85, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202], "disabl": 85, "float64": 85, "x_convert": 85, "y_convert": 85, "bound_must_be_given": 86, "x1_min": 86, "x2_min": 86, "xndim_min": 86, "x1_max": 86, "x2_max": 86, "xndim_max": 86, "default_budget_manager_class": 87, "default_budget_manager_dict": 87, "budget_manager_": 87, "array_lik": 88, "compat": [90, 94, 185, 191, 195, 201, 202], "only_non_neg": 91, "contains_non_zero": 91, "diagonal_is_zero": 91, "cost_matrix_new": 91, "missing_label1": 92, "missing_label2": 92, "valueerror": [92, 95, 96, 185, 195], "violat": [92, 96], "dim": [93, 183, 187, 193, 197], "uniqu": [93, 123, 135, 146, 147, 148, 156, 157, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 188, 191, 192, 193, 198, 201, 202], "n_indic": 93, "n_dim": 93, "check_uniqu": 93, "target_typ": [94, 96, 97], "print": [94, 96, 182, 183, 184, 189, 190, 191, 192, 193, 194, 199, 200, 201], "seed_multipli": 95, "singleton": 95, "product": 95, "min_inclus": 96, "max_inclus": 96, "min_val": 96, "max_val": 96, "impli": 96, "inclus": 96, "exclus": 96, "match": [96, 104, 184, 194], "desir": 96, "obj": 97, "target_v": 97, "indicator_func": 97, "ones_lik": [98, 103], "confusion_matrix": 99, "definit": 99, "c_": 99, "group": 99, "reorder": 99, "sort": [99, 184, 185, 194, 195], "pred": 99, "popul": 99, "conf_matric": 99, "wikipedia": 99, "en": 99, "wiki": 99, "convent": 99, "ax": [99, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 188, 193, 194, 198], "mask": [100, 101], "present": [100, 102, 108], "lbld_indic": 102, "shuffl": [103, 105, 106, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "wrapped_obj_nam": 104, "func_nam": 104, "decor": 104, "signatur": 104, "hide": 104, "heavili": 104, "inspir": 104, "available_if": 104, "metaestim": 104, "argmax_kwarg": 105, "index_arrai": [105, 106], "along": [105, 106], "argmin_kwarg": 106, "argmin": 106, "highest": 107, "fill": 107, "best_indic": 107, "proport": 107, "batch_util": 107, "unlbld_indic": 108, "re": [109, 110, 111, 112, 113, 115, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 195], "grid": 109, "resolut": [109, 110, 111, 112, 113, 115], "xmin": [109, 110, 111, 112, 114, 115], "ymin": [109, 110, 111, 112, 114, 115], "xmax": [109, 110, 111, 112, 114, 115], "ymax": [109, 110, 111, 112, 114, 115], "21": [109, 110, 111, 112, 115, 132, 139, 165, 181, 187, 197, 203], "x_mesh": 109, "y_mesh": 109, "mesh_inst": 109, "q": [110, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 202], "n_annotators_to_plot": [110, 114], "replace_nan": [110, 111, 115, 122, 123, 124, 133, 135, 149, 156, 157], "mesh": [110, 115], "ignore_undefined_query_param": [110, 115], "feature_bound": [110, 111, 112, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 188, 192, 198], "area": [110, 111, 112, 114, 115, 183, 186, 187, 193, 196, 197], "boundari": [110, 111, 112, 113, 114, 115, 125, 126, 127, 128, 129, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 188, 192, 198, 202], "matplotlib": [110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201], "contour_dict": [110, 111, 115], "contour": [110, 111, 112, 115, 202], "plot_annot": 110, "remain": [110, 115], "plt": [111, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201], "gca": 111, "boundary_dict": 112, "75": [112, 184, 194], "cmap": [112, 114, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 186, 192, 196], "coolwarm": [112, 114, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "confidence_dict": 112, "open": 112, "stand": 112, "color": [112, 113, 114, 130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 183, 188, 193, 198], "colormap": [112, 113, 114], "coolwarm_r": [112, 114], "t_x": [113, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "plot_step": [113, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "pred_list": 113, "newest": 113, "unlabeled_color": 114, "grei": [114, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "linewidth": 114, "plot_cand_highlight": 114, "unlabl": 114, "blend": 114, "backend": 114, "width": [114, 183, 185, 193, 195], "higlight": 114, "overview": [116, 184, 194], "capabl": 116, "download": [120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 197], "code": [120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 187, 197, 202], "sphinx_gallery_examples_python": 120, "zip": [120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 184, 187, 189, 191, 194, 197, 199, 201, 202], "jupyt": [120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 195], "notebook": [120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "sphinx_gallery_examples_jupyt": 120, "galleri": [120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 203], "exampl": [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 192, 193, 198, 203], "go": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "anim": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "bottom": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "googl": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "colab": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "fail": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "instal": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "try": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "restart": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "runtim": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "ctrl": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "session": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "uncom": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "cell": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "tutori": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202], "pyplot": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201], "make_blob": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 186, 188, 189, 190, 191, 196, 198, 199, 200, 201, 202], "labeled_indic": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 182, 185, 192, 195], "unlabeled_indic": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 182, 183, 185, 192, 193, 195, 202], "visual": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 187, 188, 192, 197, 198, 202], "plot_util": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 182, 192], "plot_decision_boundari": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 188, 192, 198], "plot_contour_for_sampl": [122, 123, 124, 133, 157], "200": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 194, 202], "cluster_std": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "fill_valu": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 183, 185, 186, 187, 188, 190, 192, 193, 195, 196, 197, 198, 200, 202], "initialis": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "prepar": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "fig": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 188, 193, 194, 198], "subplot": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 188, 193, 194, 198], "constrained_layout": [122, 123, 124, 133], "artist": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "x_label": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "query_idx": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 183, 186, 187, 188, 192, 193, 196, 197, 198, 202], "enumer": [122, 123, 124, 133, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 186, 187, 188, 189, 196, 197, 198, 199], "flatten": [122, 123, 124, 130, 131, 132, 133, 136, 137, 138, 139, 145, 151, 152, 153, 183, 184, 193, 194], "coll_old": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "collect": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 191, 199, 201], "scatter": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 182, 184, 186, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201], "marker": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 188, 198], "zorder": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "300": [122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "set_titl": [122, 123, 124, 133, 183, 184, 188, 193, 194, 198], "artistanim": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "blit": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "loop": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 185, 188, 189, 190, 191, 195, 198, 199, 200, 201], "reflect": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "2020": [122, 181], "script": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "minut": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "795": [122, 165, 203], "batch_active_learning_by_diverse_gradient_embedding_": [122, 165, 203], "ipynb": [122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "gaussianprocessclassifi": [123, 135, 186, 196, 202], "baggingclassifi": [123, 135, 146], "sklearnclassifi": [123, 135, 156, 157, 182, 183, 185, 186, 187, 191, 192, 193, 195, 196, 197, 201, 202], "husz": [123, 135, 181], "\u00e1": [123, 135, 181], "\u00e9": [123, 135, 151, 152, 153, 181], "12": [123, 149, 158, 163, 165, 180, 181, 183, 187, 193, 197, 203], "277": [123, 165, 203], "batch_bayesian_active_learning_by_disagreement_": [123, 165, 203], "8505": [124, 181], "8514": [124, 181], "114": [124, 165, 203], "clustering_uncertainti": [124, 165, 203], "weighted_embeddings_": [124, 165, 203], "contrastiv": [125, 165, 181, 203], "acqur": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "rcparam": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201], "titles": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "transax": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "coll_new": [125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "lo": [125, 181], "\u00ef": [125, 181], "natur": [125, 181], "languag": [125, 181], "6": [125, 126, 128, 134, 143, 144, 146, 148, 150, 154, 155, 156, 157, 159, 160, 161, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201], "483": [125, 165, 203], "contrastive_active_learning_": [125, 165, 203], "coreset": [126, 165, 181, 187, 197, 203], "ozan": [126, 181], "silvio": [126, 181], "523": [126, 165, 191, 201, 203], "core_set": [126, 165, 203], "costembedding": [127, 165, 181, 190, 200, 203], "925": [127, 181], "930": [127, 181], "914": [127, 165, 203], "active_learning_with_cost_embedding_": [127, 165, 203], "discriminativ": [128, 165, 181, 183, 187, 193, 197, 203], "shai": [128, 181], "378": [128, 165, 203], "discriminative_active_learning_": [128, 165, 203], "epistemicuncertaintysampl": [129, 165, 181, 190, 200, 203], "72": [129, 181], "86": [129, 181], "337": [129, 165, 203], "epistemic_uncertainty_sampl": [129, 165, 203], "is_label": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 157, 184, 185, 194, 195], "expectedmodelchangemaxim": [130, 165, 181, 203], "def": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201], "true_funct": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "concaten": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 187, 190, 194, 197, 200], "rv": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "reshap": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202], "nois": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 183, 184, 193, 194], "lambda": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 186, 187, 188, 189, 190, 191, 194, 196, 197, 198, 199, 200, 201], "rand": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153], "x_test": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 183, 184, 186, 187, 193, 194, 196, 197], "linspac": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 188, 194, 198], "num": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 188, 194, 198], "ax_1": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153], "ax_2": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153], "sharex": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153], "utilities_test": [130, 131, 132, 136, 137, 138, 139, 145, 184, 194], "is_lbld": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "utility_lin": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153], "green": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 188, 194, 198], "utility_fil": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153], "fill_between": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 186, 196], "lightblu": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "orang": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153, 184, 194], "prediction_lin": [130, 131, 132, 136, 137, 138, 139, 145, 151, 152, 153], "577": [130, 165, 203], "expected_model_chang": [130, 165, 203], "expectedmodeloutputchang": [131, 165, 181, 203], "gauss_hermit": [131, 139], "n_integration_sampl": [131, 139, 184, 194], "\u00e4": [131, 181], "ding": [131, 181], "bj": [131, 181], "\u00f6": [131, 147, 181], "rn": [131, 181], "carl": [131, 181], "zeiss": [131, 181], "ag": [131, 181], "103": [131, 181], "702": [131, 165, 203], "expected_model_output_chang": [131, 165, 203], "expectedmodelvariancereduct": [132, 165, 181, 203], "661": [132, 165, 203], "expected_model_variance_reduct": [132, 165, 203], "fourd": [133, 134, 165, 181, 203], "tobia": [133, 134, 181], "bernhard": [133, 134, 172, 174, 175, 176, 179, 181, 202], "180": [133, 165, 203], "batch_dens": [133, 165, 203], "distance_sampling_": [133, 134, 165, 203], "batch4d": [133, 165, 181, 203], "083": [134, 165, 203], "greedybald": [135, 165, 181, 203], "299": [135, 165, 203], "bayesian_active_learning_by_disagreement_": [135, 165, 203], "greedysamplingtarget": [136, 137, 165, 181, 184, 194, 203], "474": [136, 137, 138, 181], "241": [136, 165, 203], "greedy_sampling_on_the_target_space_": [136, 165, 203], "266": [137, 165, 203], "improved_greedy_sampling_": [137, 165, 203], "greedysamplingx": [138, 165, 181, 184, 194, 203], "049": [138, 162, 165, 176, 180, 203], "greedy_sampling_on_the_feature_space_": [138, 165, 203], "kldivergencemaxim": [139, 165, 181, 184, 194, 203], "28": [139, 165, 181, 183, 193, 203], "366": [139, 165, 203], "regression_based_kullback_leibler_divergence_maxim": [139, 165, 203], "montecarlo": [140, 141, 165, 181, 203], "nichola": [140, 141, 181], "andrew": [140, 141, 146, 181], "090": [140, 165, 203], "carlo_eer_with_log": [140, 165, 203], "44": [141, 165, 203], "505": [141, 165, 203], "carlo_eer_with_misclassif": [141, 165, 203], "parallelutilityestimationwrapp": [142, 165, 181, 203], "734": [142, 165, 203], "parallel_utility_estimation_wrapp": [142, 165, 203], "188": [143, 165, 203], "probability_coverage_": [143, 165, 203], "dens_est": 144, "den": 144, "european": [144, 156, 157, 181], "volum": [144, 162, 163, 176, 181], "694": [144, 165, 203], "class_probabilistic_active_learning_": [144, 165, 203], "sklearnregressor": [145, 151, 152, 153, 184, 194], "sebastian": [145, 146, 147, 148, 181], "manfr": [145, 146, 147, 148, 181], "haim": [145, 146, 147, 148, 181], "committee_": [145, 146, 147, 148, 165, 203], "_with_empirical_vari": [145, 165, 203], "nigami": [146, 181], "kachit": [146, 181], "kamal": [146, 181], "870": [146, 165, 203], "_with_kullback": [146, 165, 203], "leibler_diverg": [146, 165, 203], "william": [147, 181], "tim": [147, 181], "\u00fc": [147, 181], "rnberger": [147, 181], "jan": [147, 181], "hler": [147, 181], "_with_variation_ratio": [147, 165, 203], "971": [148, 165, 203], "_with_vote_entropi": [148, 165, 203], "quir": [149, 165, 181, 203], "sheng": [149, 181], "rong": [149, 181], "zhi": [149, 181], "hua": [149, 181], "296": [149, 165, 203], "querying_informative_and_representative_examples_": [149, 165, 203], "183": [150, 165, 203], "random_sampl": [150, 165, 203], "regressiontreebased": [151, 152, 153, 165, 181, 203], "sort_mask": [151, 152, 153], "argsort": [151, 152, 153], "x_plot": [151, 152, 153], "utilities_plot": [151, 152, 153], "jo": [151, 152, 153, 181], "\u00e3": [151, 152, 153, 181], "mendon": [151, 152, 153, 181], "\u00e7": [151, 152, 153, 181], "No": [151, 152, 153, 181], "\u00eb": [151, 152, 153, 181], "val": [151, 152, 153, 181, 187, 197], "rie": [151, 152, 153, 181], "689": [151, 165, 203], "regression_tree_based_active_learning_": [151, 152, 153, 165, 203], "_with_diversity_select": [151, 165, 203], "511": [152, 165, 203], "_with_random_select": [152, 165, 203], "078": [153, 165, 203], "_with_representativity_select": [153, 165, 203], "subsamplingwrapp": [154, 165, 181, 203], "uncertaintysampl": [154, 156, 157, 158, 159, 160, 161, 165, 181, 182, 183, 185, 186, 187, 190, 192, 193, 195, 196, 197, 200, 202, 203], "310": [154, 165, 203], "sampling_wrapp": [154, 165, 203], "377": [155, 165, 203], "typical_clustering_": [155, 165, 203], "init_param": [156, 157], "exp": [156, 157], "score_sampl": [156, 157], "smeulder": [156, 157, 181], "paul": [156, 157, 181], "bennett": [156, 157, 181], "116": [156, 157, 160, 165, 181, 203], "127": [156, 157, 181], "hieu": [156, 157, 181], "arnold": [156, 157, 181], "2004": [156, 157, 181], "349": [156, 165, 203], "weighted_uncertainty_sampl": [156, 165, 203], "u_max": 157, "switching_point": 157, "dwu": 157, "utils_u": 157, "err": 157, "nanmean": 157, "31": [157, 165, 181, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "172": [157, 165, 203], "dual_strategy_for_active_learn": [157, 165, 203], "xiaojun": [158, 181], "lei": [158, 181], "shi": [158, 181], "yi": [158, 181], "dong": [158, 181], "shen": [158, 181], "675": [158, 165, 203], "technic": [159, 160, 161, 181], "report": [159, 160, 161, 181], "1648": [159, 160, 161, 181], "065": [159, 165, 203], "uncertainty_sampling_with_entropi": [159, 165, 203], "uncertainty_sampling_with_least": [160, 165, 203], "591": [161, 165, 203], "uncertainty_sampling_with_margin": [161, 165, 203], "valueofinformation": [162, 163, 164, 165, 181, 203], "877": [162, 181], "882": [162, 181], "24": [162, 165, 176, 181, 187, 197, 203], "value_of_information_": [162, 165, 203], "voi": [162, 165, 181, 203], "drago": [163, 181], "029": [163, 165, 203], "value_of_information_on_labeled_sampl": [163, 165, 203], "ajai": [164, 181], "fatih": [164, 181], "2372": [164, 181], "2379": [164, 181], "371": [164, 165, 203], "value_of_information_on_unlabeled_sampl": [164, 165, 203], "16": [165, 181, 183, 193], "398": 165, "43": 165, "sphinx_gallery_exampl": [165, 166, 180], "mem": [165, 166, 180, 203], "mb": [165, 166, 180, 203], "08": [165, 183, 193, 203], "03": [165, 180, 187, 197, 203], "02": [165, 187, 197, 203], "00": [165, 166, 180, 183, 187, 193, 197, 203], "06": [165, 187, 197, 203], "000": 166, "plot_stream_training_data": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "plot_stream_decision_boundari": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "init_s": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "x_init": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201], "y_init": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201], "x_stream": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201], "y_stream": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201], "x_train": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 191, 193, 196, 197, 199, 200, 201, 202], "y_train": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 191, 193, 196, 197, 199, 200, 201, 202], "set_xlim": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "set_ylim": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "predictions_list": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "x_t": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 191, 199, 201, 202], "y_t": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 191, 199, 201, 202], "y_cand": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201, 202], "sampled_indic": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201, 202], "right": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 189, 191, 193, 194, 196, 197, 199, 201], "data_lin": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "title_str": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "4f": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 186, 187, 196, 197], "500": [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 190, 191, 199, 200, 201], "sanmin": [168, 169, 170, 171, 181], "shan": [168, 169, 170, 171, 181], "jia": [168, 169, 170, 171, 181], "chuan": [168, 169, 170, 171, 181], "jie": [168, 169, 170, 171, 181], "186": [168, 169, 170, 171, 181], "17": [168, 170, 171, 173, 177, 179, 180, 181, 203], "203": [168, 180, 203], "cognitive_du": [168, 169, 170, 171, 180, 203], "query_strategy_with_fix": [168, 180, 203], "home": [169, 170], "runner": [169, 170], "_density_uncertainti": [169, 170], "978": [169, 170], "userwarn": [169, 170], "utilis": [169, 170], "18": [169, 172, 174, 175, 176, 178, 180, 181, 183, 193, 203], "query_strategy_with_random_sampl": [169, 180, 203], "258": [170, 180, 203], "query_strategy_with_random": [170, 180, 203], "759": [171, 180, 203], "query_strategy_with_vari": [171, 180, 203], "indr\u0117": [172, 174, 175, 176, 179, 181], "albert": [172, 174, 175, 179, 181], "geoffrei": [172, 174, 175, 179, 181], "410": [172, 180, 203], "periodicsampl": [173, 180, 181, 189, 191, 199, 201, 203], "514": [173, 180, 203], "periodic_sampl": [173, 180, 203], "202": [174, 180, 203], "005": [175, 180, 203], "dino": [176, 181], "3rd": [176, 181], "heterogen": [176, 181], "program": [176, 181], "36": [176, 181], "york": [176, 181], "usa": [176, 181], "aug": [176, 181], "pmlr": [176, 181], "density_based_active_learning_for_data_stream": [176, 180, 203], "streamprobabilist": [177, 180, 181, 189, 191, 199, 201, 203], "publish": [177, 181], "286": [177, 180, 203], "probabilistic_active_learning_in_datastream": [177, 180, 203], "streamrandomsampl": [178, 180, 181, 189, 191, 199, 201, 203], "445": [178, 180, 203], "stream_random_sampl": [178, 180, 203], "634": [179, 180, 203], "33": [180, 181], "765": 180, "checkbox": 181, "tabl": 181, "13": [181, 187, 188, 197, 198], "14": [181, 187, 197], "19": [181, 183, 188, 193, 198], "22": 181, "26": [181, 187, 197], "29": [181, 187, 197], "30": [181, 183, 184, 187, 189, 190, 191, 193, 194, 197, 199, 200, 201], "35": 181, "37": [181, 187, 197], "purpos": [182, 183, 186, 192, 193, 196], "eas": [182, 192], "frame": [182, 192], "friendli": [182, 192], "show": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201], "exemplari": [182, 192], "mlp": [182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201], "make_classif": [182, 192], "figur": [182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201], "facecolor": [182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201], "white": [182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 201], "filterwarn": [182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197], "practic": [182, 186, 187, 192, 196, 197], "howev": [182, 186, 192, 196], "oracl": [182, 186, 192, 196], "n_redund": [182, 192], "jet": [182, 186, 192, 196], "xlabel": [182, 183, 186, 187, 189, 190, 191, 192, 193, 196, 197, 199, 200, 201], "ylabel": [182, 183, 186, 187, 189, 190, 191, 192, 193, 196, 197, 199, 200, 201], "introduc": [182, 192], "shown": [182, 192], "begin": [182, 187, 192, 197], "easi": [182, 192], "cope": [182, 192], "central": [182, 192], "42": [182, 185, 192, 195], "continu": [182, 192], "unlbld_idx": [182, 192], "lbld_idx": [182, 192], "grai": [182, 192], "68": [182, 192], "torch": [183, 187, 193, 197], "torchvis": [183, 187, 193, 197], "torchaudio": [183, 187, 193, 197], "tqdm": [183, 187, 193, 197], "panda": [183, 193], "brief": [183, 193], "pytorch": [183, 193], "deepcopi": [183, 193], "call_func": [183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201], "fetch_openml": [183, 193], "votingclassifi": [183, 193], "model_select": [183, 185, 186, 193, 195, 196], "train_test_split": [183, 193], "standardscal": [183, 185, 193, 195], "neuralnetclassifi": [183, 193], "nn": [183, 193], "fontsiz": [183, 184, 188, 193, 194, 198], "manual_se": [183, 193], "cuda": [183, 187, 193, 197], "devic": [183, 187, 193, 197], "is_avail": [183, 187, 193, 197], "simplic": [183, 187, 189, 191, 193, 197, 199, 201], "mnist": [183, 193], "28px": [183, 193], "handwritten": [183, 185, 193, 195], "recogn": [183, 193], "mnist_784": [183, 193], "return_x_i": [183, 193], "as_fram": [183, 193], "figsiz": [183, 184, 188, 193, 194, 198], "nrow": [183, 193], "ncol": [183, 193], "imshow": [183, 193], "n_channel": [183, 193], "height": [183, 193], "astyp": [183, 193], "float32": [183, 193], "int64": [183, 193], "66": [183, 193], "y_test": [183, 186, 193, 196], "train_siz": [183, 193], "rotat": [183, 193], "scale": [183, 193], "basic": [183, 184, 185, 193, 194, 195], "pad": [183, 193], "vertic": [183, 193], "horizont": [183, 193], "flip": [183, 193], "translat": [183, 193], "crop": [183, 193], "darken": [183, 193], "brighten": [183, 193], "modif": [183, 193], "grayscal": [183, 193], "eras": [183, 193], "look": [183, 184, 185, 193, 194, 195], "tensorflow": [183, 193], "visit": [183, 193], "And": [183, 187, 193, 197], "compos": [183, 187, 193, 197], "randomaffin": [183, 193], "randomperspect": [183, 193], "distortion_scal": [183, 193], "gaussianblur": [183, 193], "kernel_s": [183, 187, 193, 197], "sigma": [183, 193], "x_aug": [183, 193], "from_numpi": [183, 193], "cnn": [183, 193], "ten": [183, 193], "classifiermodul": [183, 193], "__init__": [183, 185, 193, 195], "dropout": [183, 187, 193, 197], "conv1": [183, 193], "conv2d": [183, 187, 193, 197], "conv2": [183, 193], "64": [183, 193], "conv2_drop": [183, 193], "dropout2d": [183, 193], "fc1": [183, 187, 193, 197], "1600": [183, 193], "fc2": [183, 187, 193, 197], "fc1_drop": [183, 193], "no_grad": [183, 187, 193, 197], "relu": [183, 193], "max_pool2d": [183, 193], "softmax": [183, 193], "net": [183, 193], "module__n_class": [183, 193], "max_epoch": [183, 193], "128": [183, 193], "lr": [183, 193], "verbos": [183, 193], "sgd": [183, 193], "optimizer__momentum": [183, 193], "optimizer__weight_decai": [183, 193], "3e": [183, 193], "train_split": [183, 193], "ensemble_init": [183, 193], "four": [183, 184, 193, 194], "setup": [183, 193], "n_sub_set": [183, 193], "qs_dict": [183, 193], "acc_dict": [183, 193], "qs_name": [183, 186, 187, 193, 196, 197], "item": [183, 185, 189, 190, 191, 193, 195, 199, 200, 201], "full_lik": [183, 184, 193, 194], "warm": [183, 193], "argwher": [183, 193], "acc": [183, 193], "ulbd_indic": [183, 193], "choic": [183, 193], "04": [183, 193], "lt": [183, 187, 190, 193, 197, 200], "09": [183, 187, 193, 197], "curv": [183, 186, 187, 193, 196, 197, 202], "aulc": [183, 193], "xtick": [183, 193], "ytick": [183, 193], "loc": [183, 186, 187, 193, 196, 197], "give": [184, 188, 194, 198], "baggingregressor": [184, 194], "dimension": [184, 188, 194, 198], "n_iter": [184, 194], "uniform_rv": [184, 194], "pos_arg": [184, 194], "key_word_arg": [184, 194], "norm_rv": [184, 194], "40": [184, 194], "complex_func": [184, 194], "high_nois": [184, 194], "80": [184, 194], "high_density_diff": [184, 194], "want": [184, 185, 186, 188, 189, 190, 191, 194, 195, 196, 198, 199, 200, 201], "lightgreen": [184, 194], "red": [184, 194], "small": [184, 194], "behavior": [184, 194], "quiet": [184, 194], "spike": [184, 194], "evenli": [184, 194], "strong": [184, 194], "tendenc": [184, 194], "steep": [184, 194], "monoton": [184, 194], "sinc": [184, 189, 190, 191, 194, 199, 200, 201], "slowli": [184, 194], "gain": [184, 194], "happen": [184, 194], "learner": [184, 194], "seem": [184, 194], "qs_": [184, 194], "y_": [184, 194], "old_is_lbld": [184, 194], "ax_t": [184, 194], "twinx": [184, 194], "y_std": [184, 194], "__name__": [184, 194], "fontdict": [184, 194], "ipyannot": [185, 195], "superintend": [185, 195], "nbextens": [185, 195], "semi": [185, 195], "familiar": [185, 195], "math": [185, 195], "cross_val_scor": [185, 195], "load_digit": [185, 195], "neural_network": [185, 195], "mlpclassifi": [185, 195], "ipywidget": [185, 195], "classlabel": [185, 195], "At": [185, 195], "datalabel": [185, 195], "overwrit": [185, 195], "_annotation_iter": [185, 195], "_undo": [185, 195], "labelling_widget": [185, 195], "submissionwidgetmixin": [185, 195], "query_dict": [185, 195], "past": [185, 195], "shape_queri": [185, 195], "shape_clf": [185, 195], "entir": [185, 195], "eval_method": [185, 195], "y_eval": [185, 195], "clf_eval": [185, 195], "attributeerror": [185, 195], "ceil": [185, 195], "model_perform": [185, 195], "top_bar": [185, 195], "hbox": [185, 195], "progressbar": [185, 195], "layout": [185, 195], "justify_cont": [185, 195], "children": [185, 195], "_begin_annot": [185, 195], "bar_styl": [185, 195], "undo": [185, 195], "delet": [185, 195], "_render_hold_messag": [185, 195], "load": [185, 195], "yield": [185, 195], "undon": [185, 195], "pop": [185, 195], "break": [185, 195], "brake": [185, 195], "_render_finish": [185, 195], "_annotation_loop": [185, 195], "send": [185, 195], "ve": [185, 187, 195, 197], "invok": [185, 195], "startswith": [185, 195], "enough": [185, 195], "ok": [185, 195], "cv": [185, 195], "error_scor": [185, 195], "n_split": [185, 186, 195, 196], "3f": [185, 195], "digit": [185, 195], "8x8": [185, 195], "exchang": [185, 195], "pipe": [185, 195], "scaler": [185, 195], "image_s": [185, 195], "data_label": [185, 195], "abov": [185, 195], "produc": [185, 195], "comparison": [186, 187, 196, 197], "realiz": [186, 196], "fold": [186, 196], "focu": [186, 187, 196, 197], "cleanli": [186, 196], "separ": [186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "repetit": [186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "proper": [186, 196], "stratifiedkfold": [186, 196], "kfold": [186, 196], "guarante": [186, 189, 190, 191, 196, 199, 200, 201], "helper": [186, 187, 196, 197], "mind": [186, 196, 202], "master_random_st": [186, 187, 196, 197], "gen_se": [186, 187, 196, 197], "randint": [186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "gen_random_st": [186, 187, 196, 197], "n_centers_per_class": [186, 196], "400": [186, 196], "creation": [186, 187, 196, 197], "factori": [186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "classifier_factory_funct": [186, 196], "query_strategy_factory_funct": [186, 187, 196, 197], "create_classifi": [186, 196], "create_query_strategi": [186, 187, 196, 197], "n_rep": [186, 187, 196, 197], "n_fold": [186, 196], "stratifi": [186, 196], "use_stratifi": [186, 196], "classifier_nam": [186, 196], "query_strategy_nam": [186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "record": [186, 196], "kfold_class": [186, 196], "clf_name": [186, 190, 196, 200], "i_rep": [186, 187, 196, 197], "kf": [186, 196], "i_fold": [186, 196], "train_idx": [186, 196], "test_idx": [186, 196], "y_train_tru": [186, 187, 196, 197], "rel": [186, 196], "bar": [186, 196], "reshaped_result": [186, 187, 196, 197], "errorbar_mean": [186, 187, 196, 197], "errorbar_std": [186, 187, 196, 197], "demonstr": [187, 197], "studi": [187, 197, 202, 205], "involv": [187, 197], "flower": [187, 197], "102": [187, 197], "ll": [187, 197], "aforement": [187, 197], "oquab": [187, 197], "robust": [187, 197], "tmlr": [187, 197], "nilsback": [187, 197], "zisserman": [187, 197], "indian": [187, 197], "graphic": [187, 197], "icvgip": [187, 197], "distil": [187, 197], "art": [187, 197], "excel": [187, 197], "skip": [187, 197], "ahead": [187, 197], "resiz": [187, 197], "256": [187, 197], "centercrop": [187, 197], "224": [187, 197], "totensor": [187, 197], "485": [187, 197], "456": [187, 197], "406": [187, 197], "229": [187, 197], "225": [187, 197], "pretrain": [187, 197], "hub": [187, 197], "set_dir": [187, 197], "cach": [187, 197], "dinov2_vitb14": [187, 197], "facebookresearch": [187, 197], "zipbal": [187, 197], "dl": [187, 197], "fbaipublicfil": [187, 197], "dinov2_vitb14_pretrain": [187, 197], "pth": [187, 197], "checkpoint": [187, 197], "330m": [187, 197], "113mb": [187, 197], "dinovisiontransform": [187, 197], "patch_emb": [187, 197], "patchemb": [187, 197], "proj": [187, 197], "768": [187, 197], "stride": [187, 197], "block": [187, 189, 190, 191, 197, 199, 200, 201], "modulelist": [187, 197], "nestedtensorblock": [187, 197], "norm1": [187, 197], "layernorm": [187, 197], "elementwise_affin": [187, 197], "attn": [187, 197], "memeffattent": [187, 197], "qkv": [187, 197], "in_featur": [187, 197], "out_featur": [187, 197], "2304": [187, 197], "attn_drop": [187, 197], "inplac": [187, 197], "proj_drop": [187, 197], "ls1": [187, 197], "layerscal": [187, 197], "drop_path1": [187, 197], "norm2": [187, 197], "3072": [187, 197], "gelu": [187, 197], "approxim": [187, 197], "ls2": [187, 197], "drop_path2": [187, 197], "head": [187, 197], "firstli": [187, 197], "npy": [187, 197], "load_and_process_dataset": [187, 197], "root_dir": [187, 197], "is_train": [187, 197], "directori": [187, 197], "dataload": [187, 197], "flowers102": [187, 197], "num_work": [187, 197], "embedding_list": [187, 197], "label_list": [187, 197], "desc": [187, 197], "cat": [187, 197], "data_dir": [187, 197], "flowers102_x_train": [187, 197], "flowers102_y_train_tru": [187, 197], "flowers102_x_test": [187, 197], "flowers102_y_test_tru": [187, 197], "flowers102_dinov2b_x_train": [187, 197], "flowers102_dinov2b_y_train": [187, 197], "flowers102_dinov2b_x_test": [187, 197], "flowers102_dinov2b_y_test": [187, 197], "thor": [187, 197], "robot": [187, 197], "ox": [187, 197], "ac": [187, 197], "uk": [187, 197], "102flower": [187, 197], "tgz": [187, 197], "344862509": [187, 197], "68322052": [187, 197], "63it": [187, 197], "imagelabel": [187, 197], "mat": [187, 197], "502": [187, 191, 197, 201], "334318": [187, 197], "93it": [187, 197], "setid": [187, 197], "14989": [187, 197], "7487901": [187, 197], "70it": [187, 197], "255": [187, 197], "97it": [187, 197], "y_test_tru": [187, 197], "dataset_class": [187, 197], "query_batch_s": [187, 190, 197, 200], "39it": [187, 197], "08it": [187, 197], "37it": [187, 197], "47it": [187, 197], "31it": [187, 197], "17it": [187, 197], "21it": [187, 197], "18it": [187, 197], "06it": [187, 197], "22it": [187, 197], "05it": [187, 197], "14it": [187, 197], "38": [187, 197], "insight": [187, 197], "errorbar": [187, 197], "introduct": [188, 198], "plot_annotator_util": [188, 198], "marker_s": [188, 198], "suppos": [188, 198], "omnisci": [188, 198], "tight_layout": [188, 198], "circl": [188, 198], "rng": [188, 198], "default_rng": [188, 198], "y_annot": [188, 198], "y_nois": [188, 198], "binomi": [188, 198], "is_tru": [188, 198], "singleannotwrapp": [188, 198], "achiev": [188, 198], "sa_q": [188, 198], "ma_q": [188, 198], "5th": [188, 198], "14th": [188, 198], "20th": [188, 198], "satur": [188, 198], "showcas": [189, 191, 199, 201], "dequ": [189, 191, 199, 201], "ndimag": [189, 190, 191, 199, 200, 201], "gaussian_filter1d": [189, 190, 191, 199, 200, 201], "experi": [189, 190, 191, 199, 200, 201], "stream_length": [189, 190, 191, 199, 200, 201], "training_s": [189, 190, 191, 199, 200, 201], "init_train_length": [189, 190, 191, 199, 200, 201], "5000": [189, 190, 191, 199, 200, 201], "dedic": [189, 191, 199, 201], "explicitli": [189, 190, 191, 199, 200, 201], "get_randomse": [189, 190, 191, 199, 200, 201], "locat": [189, 190, 191, 199, 200, 201], "denot": [189, 190, 191, 199, 200, 201, 202], "suffix": [189, 190, 191, 199, 200, 201], "_init": [189, 190, 191, 199, 200, 201], "_stream": [189, 190, 191, 199, 200, 201], "prequenti": [189, 190, 191, 199, 200, 201], "y_center": [189, 190, 191, 199, 200, 201], "affect": [189, 190, 191, 199, 200, 201], "managag": [189, 191, 199, 201], "sake": [189, 191, 199, 201], "clf_factori": [189, 190, 191, 199, 200, 201], "dbalstream": [189, 191, 199, 201], "cogdqsran": [189, 191, 199, 201], "cogdqsfixun": [189, 191, 199, 201], "cogdqsvarun": [189, 191, 199, 201], "cogdqsranvarun": [189, 191, 199, 201], "goe": [189, 190, 191, 199, 200, 201], "lastli": [189, 190, 191, 199, 200, 201], "maxlen": [189, 191, 199, 201], "correct_classif": [189, 190, 191, 199, 200, 201, 202], "avg": [189, 190, 191, 199, 200, 201], "7642": [189, 199], "498": [189, 191, 199, 201], "7764": [189, 199], "7416": [189, 199], "522": [189, 199], "7828": [189, 199], "7834": [189, 199], "521": [189, 191, 199, 201], "7966": [189, 199], "environ": [190, 200], "incom": [190, 200], "stream_batch_s": [190, 200], "clf_dict": [190, 200], "index_cand": [190, 200], "y_cand_tru": [190, 200], "x_train_arrai": [190, 200], "acquis": [190, 191, 200, 201], "smooth": [190, 200], "806": [190, 200], "653": [190, 200], "7994": [190, 200], "8154": [190, 200], "796": [190, 200], "0x264b9891450": [190, 200], "gt": [190, 200], "slidingwindowclassifi": [191, 201], "river2sklclassifi": [191, 201], "forest": [191, 201], "arfclassifi": [191, 201], "biqf": [191, 201], "7456": [191, 201], "727": [191, 201], "7746": [191, 201], "7606": [191, 201], "7462": [191, 201], "7614": [191, 201], "often": 202, "wherea": 202, "gather": 202, "difficult": 202, "consum": 202, "expens": 202, "fewer": 202, "easiest": 202, "downgrad": 202, "withing": 202, "encount": 202, "incompat": 202, "issu": 202, "requirements_max": 202, "broad": 202, "section": 202, "skorch": [202, 205], "river": [202, 205], "snippet": 202, "straightforward": 202, "difficulti": 202, "abil": 202, "document": 202, "greenish": 202, "accross": 202, "orient": 202, "incl": 202, "articl": 202, "skactiveml2021": 202, "ibrari": 202, "oolbox": 202, "ctive": 202, "earn": 202, "lgorithm": 202, "marek": 202, "herd": 202, "tuan": 202, "pham": 202, "minh": 202, "benz": 202, "pascal": 202, "mergard": 202, "atal": 202, "roghman": 202, "sandrock": 202, "doi": 202, "20944": 202, "preprints202103": 202, "0194": 202, "v1": 202, "year": 202, "url": 202, "163": 203, "55": 203, "throughout": 204}, "objects": {"": [[116, 0, 0, "-", "skactiveml"]], "skactiveml": [[116, 0, 0, "-", "base"], [116, 0, 0, "-", "classifier"], [116, 0, 0, "-", "exceptions"], [116, 0, 0, "-", "pool"], [116, 0, 0, "-", "stream"], [116, 0, 0, "-", "utils"], [116, 0, 0, "-", "visualization"]], "skactiveml.base": [[4, 1, 1, "", "AnnotatorModelMixin"], [5, 1, 1, "", "BudgetManager"], [6, 1, 1, "", "ClassFrequencyEstimator"], [7, 1, 1, "", "MultiAnnotatorPoolQueryStrategy"], [8, 1, 1, "", "ProbabilisticRegressor"], [9, 1, 1, "", "QueryStrategy"], [10, 1, 1, "", "SingleAnnotatorPoolQueryStrategy"], [11, 1, 1, "", "SingleAnnotatorStreamQueryStrategy"], [12, 1, 1, "", "SkactivemlClassifier"], [13, 1, 1, "", "SkactivemlRegressor"]], "skactiveml.base.AnnotatorModelMixin": [[4, 2, 1, "", "predict_annotator_perf"]], "skactiveml.base.BudgetManager": [[5, 2, 1, "", "get_metadata_routing"], [5, 2, 1, "", "get_params"], [5, 2, 1, "", "query_by_utility"], [5, 2, 1, "", "set_params"], [5, 2, 1, "", "update"]], "skactiveml.base.ClassFrequencyEstimator": [[6, 2, 1, "", "fit"], [6, 2, 1, "", "get_metadata_routing"], [6, 2, 1, "", "get_params"], [6, 2, 1, "", "predict"], [6, 2, 1, "", "predict_freq"], [6, 2, 1, "", "predict_proba"], [6, 2, 1, "", "sample_proba"], [6, 2, 1, "", "score"], [6, 2, 1, "", "set_fit_request"], [6, 2, 1, "", "set_params"], [6, 2, 1, "", "set_score_request"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[7, 2, 1, "", "get_metadata_routing"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "query"], [7, 2, 1, "", "set_params"]], "skactiveml.base.ProbabilisticRegressor": [[8, 2, 1, "", "fit"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_target_distribution"], [8, 2, 1, "", "sample_y"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_predict_request"], [8, 2, 1, "", "set_score_request"]], "skactiveml.base.QueryStrategy": [[9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "query"], [9, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "query"], [10, 2, 1, "", "set_params"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "query"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "update"]], "skactiveml.base.SkactivemlClassifier": [[12, 2, 1, "", "fit"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "skactiveml.base.SkactivemlRegressor": [[13, 2, 1, "", "fit"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"]], "skactiveml.classifier": [[14, 1, 1, "", "MixtureModelClassifier"], [15, 1, 1, "", "ParzenWindowClassifier"], [16, 1, 1, "", "SklearnClassifier"], [17, 1, 1, "", "SlidingWindowClassifier"], [116, 0, 0, "-", "multiannotator"]], "skactiveml.classifier.MixtureModelClassifier": [[14, 2, 1, "", "fit"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_freq"], [14, 2, 1, "", "predict_proba"], [14, 2, 1, "", "sample_proba"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "skactiveml.classifier.ParzenWindowClassifier": [[15, 3, 1, "", "METRICS"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_freq"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "sample_proba"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SklearnClassifier": [[16, 2, 1, "", "fit"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "partial_fit"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_partial_fit_request"], [16, 2, 1, "", "set_score_request"]], "skactiveml.classifier.SlidingWindowClassifier": [[17, 2, 1, "", "fit"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "partial_fit"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_freq"], [17, 2, 1, "", "predict_proba"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_partial_fit_request"], [17, 2, 1, "", "set_score_request"]], "skactiveml.classifier.multiannotator": [[18, 1, 1, "", "AnnotatorEnsembleClassifier"], [19, 1, 1, "", "AnnotatorLogisticRegression"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[18, 2, 1, "", "fit"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 4, 1, "", "named_estimators"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_proba"], [18, 2, 1, "", "score"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_score_request"], [18, 3, 1, "", "steps"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[19, 2, 1, "", "fit"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_annotator_perf"], [19, 2, 1, "", "predict_proba"], [19, 2, 1, "", "score"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "set_score_request"]], "skactiveml.exceptions": [[20, 1, 1, "", "MappingError"]], "skactiveml.exceptions.MappingError": [[20, 3, 1, "", "args"], [20, 2, 1, "", "with_traceback"]], "skactiveml.pool": [[21, 1, 1, "", "Badge"], [22, 1, 1, "", "BatchBALD"], [23, 1, 1, "", "Clue"], [24, 1, 1, "", "ContrastiveAL"], [25, 1, 1, "", "CoreSet"], [26, 1, 1, "", "CostEmbeddingAL"], [27, 1, 1, "", "DiscriminativeAL"], [28, 1, 1, "", "EpistemicUncertaintySampling"], [29, 1, 1, "", "ExpectedModelChangeMaximization"], [30, 1, 1, "", "ExpectedModelOutputChange"], [31, 1, 1, "", "ExpectedModelVarianceReduction"], [32, 1, 1, "", "FourDs"], [33, 1, 1, "", "GreedyBALD"], [34, 1, 1, "", "GreedySamplingTarget"], [35, 1, 1, "", "GreedySamplingX"], [36, 1, 1, "", "KLDivergenceMaximization"], [37, 1, 1, "", "MonteCarloEER"], [38, 1, 1, "", "ParallelUtilityEstimationWrapper"], [39, 1, 1, "", "ProbCover"], [40, 1, 1, "", "ProbabilisticAL"], [41, 1, 1, "", "QueryByCommittee"], [42, 1, 1, "", "Quire"], [43, 1, 1, "", "RandomSampling"], [44, 1, 1, "", "RegressionTreeBasedAL"], [45, 1, 1, "", "SubSamplingWrapper"], [46, 1, 1, "", "TypiClust"], [47, 1, 1, "", "UncertaintySampling"], [48, 1, 1, "", "ValueOfInformationEER"], [49, 5, 1, "", "average_kl_divergence"], [50, 5, 1, "", "batch_bald"], [51, 5, 1, "", "cost_reduction"], [52, 5, 1, "", "expected_average_precision"], [53, 5, 1, "", "k_greedy_center"], [116, 0, 0, "-", "multiannotator"], [57, 5, 1, "", "uncertainty_scores"], [116, 0, 0, "-", "utils"], [59, 5, 1, "", "variation_ratios"], [60, 5, 1, "", "vote_entropy"]], "skactiveml.pool.Badge": [[21, 2, 1, "", "get_metadata_routing"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "query"], [21, 2, 1, "", "set_params"]], "skactiveml.pool.BatchBALD": [[22, 2, 1, "", "get_metadata_routing"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "query"], [22, 2, 1, "", "set_params"]], "skactiveml.pool.Clue": [[23, 2, 1, "", "get_metadata_routing"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "query"], [23, 2, 1, "", "set_params"]], "skactiveml.pool.ContrastiveAL": [[24, 2, 1, "", "get_metadata_routing"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "query"], [24, 2, 1, "", "set_params"]], "skactiveml.pool.CoreSet": [[25, 2, 1, "", "get_metadata_routing"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "query"], [25, 2, 1, "", "set_params"]], "skactiveml.pool.CostEmbeddingAL": [[26, 2, 1, "", "get_metadata_routing"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "query"], [26, 2, 1, "", "set_params"]], "skactiveml.pool.DiscriminativeAL": [[27, 2, 1, "", "get_metadata_routing"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "query"], [27, 2, 1, "", "set_params"]], "skactiveml.pool.EpistemicUncertaintySampling": [[28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "query"], [28, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "query"], [29, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelOutputChange": [[30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "query"], [30, 2, 1, "", "set_params"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "query"], [31, 2, 1, "", "set_params"]], "skactiveml.pool.FourDs": [[32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "query"], [32, 2, 1, "", "set_params"]], "skactiveml.pool.GreedyBALD": [[33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "query"], [33, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingTarget": [[34, 2, 1, "", "get_metadata_routing"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "query"], [34, 2, 1, "", "set_params"]], "skactiveml.pool.GreedySamplingX": [[35, 2, 1, "", "get_metadata_routing"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "query"], [35, 2, 1, "", "set_params"]], "skactiveml.pool.KLDivergenceMaximization": [[36, 2, 1, "", "get_metadata_routing"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "query"], [36, 2, 1, "", "set_params"]], "skactiveml.pool.MonteCarloEER": [[37, 2, 1, "", "get_metadata_routing"], [37, 2, 1, "", "get_params"], [37, 2, 1, "", "query"], [37, 2, 1, "", "set_params"]], "skactiveml.pool.ParallelUtilityEstimationWrapper": [[38, 2, 1, "", "get_metadata_routing"], [38, 2, 1, "", "get_params"], [38, 2, 1, "", "query"], [38, 2, 1, "", "set_params"]], "skactiveml.pool.ProbCover": [[39, 2, 1, "", "get_metadata_routing"], [39, 2, 1, "", "get_params"], [39, 2, 1, "", "query"], [39, 2, 1, "", "set_params"]], "skactiveml.pool.ProbabilisticAL": [[40, 2, 1, "", "get_metadata_routing"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "query"], [40, 2, 1, "", "set_params"]], "skactiveml.pool.QueryByCommittee": [[41, 2, 1, "", "get_metadata_routing"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "query"], [41, 2, 1, "", "set_params"]], "skactiveml.pool.Quire": [[42, 3, 1, "", "METRICS"], [42, 2, 1, "", "get_metadata_routing"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "query"], [42, 2, 1, "", "set_params"]], "skactiveml.pool.RandomSampling": [[43, 2, 1, "", "get_metadata_routing"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "query"], [43, 2, 1, "", "set_params"]], "skactiveml.pool.RegressionTreeBasedAL": [[44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "query"], [44, 2, 1, "", "set_params"]], "skactiveml.pool.SubSamplingWrapper": [[45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "query"], [45, 2, 1, "", "set_params"]], "skactiveml.pool.TypiClust": [[46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "query"], [46, 2, 1, "", "set_params"]], "skactiveml.pool.UncertaintySampling": [[47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "query"], [47, 2, 1, "", "set_params"]], "skactiveml.pool.ValueOfInformationEER": [[48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "query"], [48, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator": [[54, 1, 1, "", "IntervalEstimationAnnotModel"], [55, 1, 1, "", "IntervalEstimationThreshold"], [56, 1, 1, "", "SingleAnnotatorWrapper"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[54, 2, 1, "", "fit"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "predict_annotator_perf"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "query"], [55, 2, 1, "", "set_params"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "query"], [56, 2, 1, "", "set_params"]], "skactiveml.pool.utils": [[58, 1, 1, "", "IndexClassifierWrapper"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[58, 2, 1, "", "fit"], [58, 2, 1, "", "is_fitted"], [58, 2, 1, "", "partial_fit"], [58, 2, 1, "", "precompute"], [58, 2, 1, "", "predict"], [58, 2, 1, "", "predict_freq"], [58, 2, 1, "", "predict_proba"]], "skactiveml.stream": [[61, 1, 1, "", "CognitiveDualQueryStrategy"], [62, 1, 1, "", "CognitiveDualQueryStrategyFixUn"], [63, 1, 1, "", "CognitiveDualQueryStrategyRan"], [64, 1, 1, "", "CognitiveDualQueryStrategyRanVarUn"], [65, 1, 1, "", "CognitiveDualQueryStrategyVarUn"], [66, 1, 1, "", "FixedUncertainty"], [67, 1, 1, "", "PeriodicSampling"], [68, 1, 1, "", "RandomVariableUncertainty"], [69, 1, 1, "", "Split"], [70, 1, 1, "", "StreamDensityBasedAL"], [71, 1, 1, "", "StreamProbabilisticAL"], [72, 1, 1, "", "StreamRandomSampling"], [73, 1, 1, "", "VariableUncertainty"], [116, 0, 0, "-", "budgetmanager"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[61, 2, 1, "", "get_metadata_routing"], [61, 2, 1, "", "get_params"], [61, 2, 1, "", "query"], [61, 2, 1, "", "set_params"], [61, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[62, 2, 1, "", "get_metadata_routing"], [62, 2, 1, "", "get_params"], [62, 2, 1, "", "query"], [62, 2, 1, "", "set_params"], [62, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 2, 1, "", "query"], [63, 2, 1, "", "set_params"], [63, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[64, 2, 1, "", "get_metadata_routing"], [64, 2, 1, "", "get_params"], [64, 2, 1, "", "query"], [64, 2, 1, "", "set_params"], [64, 2, 1, "", "update"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[65, 2, 1, "", "get_metadata_routing"], [65, 2, 1, "", "get_params"], [65, 2, 1, "", "query"], [65, 2, 1, "", "set_params"], [65, 2, 1, "", "update"]], "skactiveml.stream.FixedUncertainty": [[66, 2, 1, "", "get_metadata_routing"], [66, 2, 1, "", "get_params"], [66, 2, 1, "", "query"], [66, 2, 1, "", "set_params"], [66, 2, 1, "", "update"]], "skactiveml.stream.PeriodicSampling": [[67, 2, 1, "", "get_metadata_routing"], [67, 2, 1, "", "get_params"], [67, 2, 1, "", "query"], [67, 2, 1, "", "set_params"], [67, 2, 1, "", "update"]], "skactiveml.stream.RandomVariableUncertainty": [[68, 2, 1, "", "get_metadata_routing"], [68, 2, 1, "", "get_params"], [68, 2, 1, "", "query"], [68, 2, 1, "", "set_params"], [68, 2, 1, "", "update"]], "skactiveml.stream.Split": [[69, 2, 1, "", "get_metadata_routing"], [69, 2, 1, "", "get_params"], [69, 2, 1, "", "query"], [69, 2, 1, "", "set_params"], [69, 2, 1, "", "update"]], "skactiveml.stream.StreamDensityBasedAL": [[70, 2, 1, "", "get_metadata_routing"], [70, 2, 1, "", "get_params"], [70, 2, 1, "", "query"], [70, 2, 1, "", "set_params"], [70, 2, 1, "", "update"]], "skactiveml.stream.StreamProbabilisticAL": [[71, 2, 1, "", "get_metadata_routing"], [71, 2, 1, "", "get_params"], [71, 2, 1, "", "query"], [71, 2, 1, "", "set_params"], [71, 2, 1, "", "update"]], "skactiveml.stream.StreamRandomSampling": [[72, 2, 1, "", "get_metadata_routing"], [72, 2, 1, "", "get_params"], [72, 2, 1, "", "query"], [72, 2, 1, "", "set_params"], [72, 2, 1, "", "update"]], "skactiveml.stream.VariableUncertainty": [[73, 2, 1, "", "get_metadata_routing"], [73, 2, 1, "", "get_params"], [73, 2, 1, "", "query"], [73, 2, 1, "", "set_params"], [73, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager": [[74, 1, 1, "", "BalancedIncrementalQuantileFilter"], [75, 1, 1, "", "DensityBasedSplitBudgetManager"], [76, 1, 1, "", "EstimatedBudgetZliobaite"], [77, 1, 1, "", "FixedUncertaintyBudgetManager"], [78, 1, 1, "", "RandomBudgetManager"], [79, 1, 1, "", "RandomVariableUncertaintyBudgetManager"], [80, 1, 1, "", "SplitBudgetManager"], [81, 1, 1, "", "VariableUncertaintyBudgetManager"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[74, 2, 1, "", "get_metadata_routing"], [74, 2, 1, "", "get_params"], [74, 2, 1, "", "query_by_utility"], [74, 2, 1, "", "set_params"], [74, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[75, 2, 1, "", "get_metadata_routing"], [75, 2, 1, "", "get_params"], [75, 2, 1, "", "query_by_utility"], [75, 2, 1, "", "set_params"], [75, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[76, 2, 1, "", "get_metadata_routing"], [76, 2, 1, "", "get_params"], [76, 2, 1, "", "query_by_utility"], [76, 2, 1, "", "set_params"], [76, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[77, 2, 1, "", "get_metadata_routing"], [77, 2, 1, "", "get_params"], [77, 2, 1, "", "query_by_utility"], [77, 2, 1, "", "set_params"], [77, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[78, 2, 1, "", "get_metadata_routing"], [78, 2, 1, "", "get_params"], [78, 2, 1, "", "query_by_utility"], [78, 2, 1, "", "set_params"], [78, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[79, 2, 1, "", "get_metadata_routing"], [79, 2, 1, "", "get_params"], [79, 2, 1, "", "query_by_utility"], [79, 2, 1, "", "set_params"], [79, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[80, 2, 1, "", "get_metadata_routing"], [80, 2, 1, "", "get_params"], [80, 2, 1, "", "query_by_utility"], [80, 2, 1, "", "set_params"], [80, 2, 1, "", "update"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[81, 2, 1, "", "get_metadata_routing"], [81, 2, 1, "", "get_params"], [81, 2, 1, "", "query_by_utility"], [81, 2, 1, "", "set_params"], [81, 2, 1, "", "update"]], "skactiveml.utils": [[82, 1, 1, "", "ExtLabelEncoder"], [83, 5, 1, "", "_check_callable"], [84, 5, 1, "", "call_func"], [85, 5, 1, "", "check_X_y"], [86, 5, 1, "", "check_bound"], [87, 5, 1, "", "check_budget_manager"], [88, 5, 1, "", "check_class_prior"], [89, 5, 1, "", "check_classes"], [90, 5, 1, "", "check_classifier_params"], [91, 5, 1, "", "check_cost_matrix"], [92, 5, 1, "", "check_equal_missing_label"], [93, 5, 1, "", "check_indices"], [94, 5, 1, "", "check_missing_label"], [95, 5, 1, "", "check_random_state"], [96, 5, 1, "", "check_scalar"], [97, 5, 1, "", "check_type"], [98, 5, 1, "", "compute_vote_vectors"], [99, 5, 1, "", "ext_confusion_matrix"], [100, 5, 1, "", "is_labeled"], [101, 5, 1, "", "is_unlabeled"], [102, 5, 1, "", "labeled_indices"], [103, 5, 1, "", "majority_vote"], [104, 5, 1, "", "match_signature"], [105, 5, 1, "", "rand_argmax"], [106, 5, 1, "", "rand_argmin"], [107, 5, 1, "", "simple_batch"], [108, 5, 1, "", "unlabeled_indices"]], "skactiveml.utils.ExtLabelEncoder": [[82, 2, 1, "", "fit"], [82, 2, 1, "", "fit_transform"], [82, 2, 1, "", "get_metadata_routing"], [82, 2, 1, "", "get_params"], [82, 2, 1, "", "inverse_transform"], [82, 2, 1, "", "set_params"], [82, 2, 1, "", "transform"]], "skactiveml.visualization": [[109, 5, 1, "", "mesh"], [110, 5, 1, "", "plot_annotator_utilities"], [111, 5, 1, "", "plot_contour_for_samples"], [112, 5, 1, "", "plot_decision_boundary"], [113, 5, 1, "", "plot_stream_decision_boundary"], [114, 5, 1, "", "plot_stream_training_data"], [115, 5, 1, "", "plot_utilities"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "guid": 0, "overview": [0, 181, 202], "thank": 0, "you": 0, "contributor": 0, "get": [0, 182, 184, 188, 189, 192, 194, 198, 199], "help": 0, "roadmap": 0, "start": [0, 182, 184, 185, 188, 189, 190, 191, 192, 194, 195, 198, 199, 200, 201], "setup": 0, "develop": 0, "environ": 0, "exampl": [0, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 100, 102, 107, 108, 111, 112, 113, 114, 115, 117, 120, 149, 202, 204], "With": 0, "miniconda": 0, "instal": [0, 202], "depend": 0, "maco": 0, "homebrew": 0, "code": 0, "gener": [0, 182, 184, 186, 188, 189, 190, 191, 192, 194, 196, 198, 199, 200, 201], "convent": 0, "c3": 0, "cycl": [0, 182, 189, 190, 191, 192, 199, 200, 201], "pull": 0, "request": 0, "queri": [0, 145, 146, 147, 148, 149, 168, 169, 170, 171, 181, 182, 186, 187, 189, 190, 191, 192, 196, 197, 199, 200, 201, 202], "strategi": [0, 2, 3, 118, 119, 120, 121, 157, 167, 168, 169, 170, 171, 181, 182, 186, 187, 189, 190, 191, 192, 196, 197, 199, 200, 201, 202], "singl": 0, "annot": [0, 185, 188, 195, 198], "pool": [0, 2, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 116, 118, 120, 121, 181, 182, 183, 184, 186, 188, 190, 192, 193, 194, 196, 198, 200, 202], "base": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 116, 118, 119, 120, 121, 139, 151, 152, 153, 167, 176, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202], "__init__": 0, "method": 0, "advic": 0, "test": 0, "stream": [0, 3, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 116, 119, 120, 167, 176, 178, 181, 189, 190, 191, 199, 200, 201, 202], "updat": 0, "budget_manag": 0, "query_by_util": 0, "work": 0, "multi": [0, 144, 188, 198], "classifi": [0, 14, 15, 16, 17, 18, 19, 116], "init": 0, "fit": 0, "predict_proba": 0, "predict": 0, "score": 0, "regressor": 0, "model": [0, 130, 131, 132, 181, 186, 187, 196, 197], "predict_annotator_perf": 0, "coverag": [0, 143], "document": 0, "guidelin": 0, "write": 0, "build": 0, "issu": 0, "track": 0, "check": 0, "If": 0, "A": [0, 202], "bug": 0, "alreadi": 0, "exist": 0, "report": 0, "an": 0, "al": [2, 3, 118, 119, 120, 121, 151, 152, 153, 167], "skactiveml": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 204], "annotatormodelmixin": 4, "budgetmanag": [5, 74, 75, 76, 77, 78, 79, 80, 81, 116], "classfrequencyestim": 6, "us": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 100, 102, 107, 108, 111, 112, 113, 114, 115, 204], "multiannotatorpoolquerystrategi": 7, "probabilisticregressor": 8, "querystrategi": 9, "singleannotatorpoolquerystrategi": 10, "singleannotatorstreamquerystrategi": 11, "skactivemlclassifi": 12, "skactivemlregressor": 13, "paramet": [13, 53, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "mixturemodelclassifi": 14, "parzenwindowclassifi": 15, "sklearnclassifi": 16, "slidingwindowclassifi": 17, "multiannot": [18, 19, 54, 55, 56, 116], "annotatorensembleclassifi": 18, "annotatorlogisticregress": 19, "except": [20, 116], "mappingerror": 20, "badg": [21, 122], "batchbald": [22, 123], "clue": [23, 124], "contrastiv": 24, "coreset": 25, "costembedding": 26, "discriminativ": 27, "epistemicuncertaintysampl": 28, "expectedmodelchangemaxim": 29, "expectedmodeloutputchang": 30, "expectedmodelvariancereduct": 31, "fourd": 32, "greedybald": 33, "greedysamplingtarget": 34, "greedysamplingx": 35, "kldivergencemaxim": 36, "montecarlo": 37, "parallelutilityestimationwrapp": 38, "probcov": [39, 143], "probabilist": [40, 144, 177], "querybycommitte": 41, "quir": 42, "randomsampl": 43, "regressiontreebased": 44, "subsamplingwrapp": 45, "typiclust": [46, 155], "uncertaintysampl": 47, "valueofinformation": 48, "average_kl_diverg": 49, "batch_bald": 50, "cost_reduct": 51, "expected_average_precis": 52, "k_greedy_cent": 53, "intervalestimationannotmodel": 54, "intervalestimationthreshold": 55, "singleannotatorwrapp": 56, "uncertainty_scor": 57, "util": [58, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 116, 142, 204], "indexclassifierwrapp": 58, "variation_ratio": 59, "vote_entropi": 60, "cognitivedualquerystrategi": 61, "cognitivedualquerystrategyfixun": 62, "cognitivedualquerystrategyran": 63, "cognitivedualquerystrategyranvarun": 64, "cognitivedualquerystrategyvarun": 65, "fixeduncertainti": 66, "periodicsampl": 67, "randomvariableuncertainti": 68, "split": [69, 175], "streamdensitybased": 70, "streamprobabilist": 71, "streamrandomsampl": 72, "variableuncertainti": 73, "balancedincrementalquantilefilt": 74, "densitybasedsplitbudgetmanag": 75, "estimatedbudgetzliobait": 76, "fixeduncertaintybudgetmanag": 77, "randombudgetmanag": 78, "randomvariableuncertaintybudgetmanag": 79, "splitbudgetmanag": 80, "variableuncertaintybudgetmanag": 81, "extlabelencod": 82, "_check_cal": 83, "call_func": 84, "check_x_i": 85, "check_bound": 86, "check_budget_manag": 87, "check_class_prior": 88, "check_class": 89, "check_classifier_param": 90, "check_cost_matrix": 91, "check_equal_missing_label": 92, "check_indic": 93, "check_missing_label": 94, "check_random_st": 95, "check_scalar": 96, "check_typ": 97, "compute_vote_vector": 98, "ext_confusion_matrix": 99, "is_label": 100, "is_unlabel": 101, "labeled_indic": 102, "majority_vot": 103, "match_signatur": 104, "rand_argmax": 105, "rand_argmin": 106, "simple_batch": 107, "unlabeled_indic": 108, "visual": [109, 110, 111, 112, 113, 114, 115, 116, 183, 193], "mesh": 109, "plot_annotator_util": 110, "plot_contour_for_sampl": 111, "plot_decision_boundari": 112, "plot_stream_decision_boundari": 113, "plot_stream_training_data": 114, "plot_util": 115, "api": 116, "refer": [116, 181], "class": [116, 144, 185, 195], "function": 116, "batch": [122, 123, 133, 190, 200], "activ": [122, 123, 125, 127, 128, 135, 144, 151, 152, 153, 157, 176, 177, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202], "learn": [122, 123, 125, 127, 128, 135, 144, 151, 152, 153, 157, 176, 177, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202], "divers": [122, 133, 134, 151], "gradient": 122, "embed": [122, 124, 127], "bayesian": [123, 135], "disagr": [123, 135], "cluster": [124, 155], "uncertainti": [124, 129, 156, 159, 160, 161, 168, 170, 171, 172, 174, 179, 181], "weight": [124, 156], "contrast": 125, "cal": 125, "core": 126, "set": [126, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 196, 198, 199, 200, 201], "cost": 127, "discrimin": 128, "epistem": 129, "sampl": [129, 133, 134, 136, 137, 138, 150, 154, 156, 159, 160, 161, 163, 164, 169, 173, 178, 181, 185, 195], "expect": [130, 131, 132, 158, 181], "chang": [130, 131, 181], "output": 131, "varianc": [132, 145], "reduct": [132, 181], "densiti": [133, 134, 156, 176, 181], "distribut": [133, 134], "distanc": [133, 134], "bald": 135, "greedi": [136, 137, 138], "target": 136, "space": [136, 138], "gsy": 136, "improv": 137, "gsi": 137, "featur": 138, "gsx": 138, "regress": [139, 151, 152, 153, 184, 194], "kullback": [139, 146], "leibler": [139, 146], "diverg": [139, 146], "maxim": 139, "mont": [140, 141], "carlo": [140, 141], "eer": [140, 141], "log": 140, "loss": [140, 141], "misclassif": 141, "parallel": 142, "estim": 142, "wrapper": [142, 154], "probabl": 143, "committe": [145, 146, 147, 148, 181], "qbc": [145, 146, 147, 148], "empir": 145, "variat": 147, "ratio": 147, "vote": 148, "entropi": [148, 159], "inform": [149, 162, 163, 164], "repres": [149, 153], "random": [150, 152, 169, 170, 174, 178, 181, 186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "tree": [151, 152, 153], "rt": [151, 152, 153], "select": [151, 152, 153], "sub": 154, "typic": 155, "dual": [157, 168, 169, 170, 171], "averag": 158, "precis": 158, "least": 160, "confid": 160, "margin": 161, "valu": [162, 163, 164], "label": 163, "unlabel": 164, "comput": [165, 166, 180, 203], "time": [165, 166, 180, 203], "cognit": [168, 169, 170, 171], "fix": [168, 172], "variabl": [170, 171, 174, 179], "period": 173, "data": [176, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201], "datastream": 177, "error": 181, "meta": 181, "other": 181, "probalist": 181, "classif": [182, 183, 186, 187, 188, 192, 193, 196, 197, 198], "deep": [183, 193], "scikit": [183, 193, 202], "activeml": [183, 193, 202], "skorch": [183, 193], "load": [183, 187, 193, 197], "digit": [183, 193], "augment": [183, 193], "convolut": [183, 193], "neural": [183, 193], "network": [183, 193], "ensembl": [183, 193], "result": [183, 186, 187, 193, 196, 197], "The": [185, 195], "widget": [185, 195], "creat": [185, 195], "dataset": [185, 187, 195, 197], "process": [185, 195], "simpl": [186, 196], "evalu": [186, 196], "studi": [186, 196], "seed": [186, 187, 189, 190, 191, 196, 197, 199, 200, 201], "manag": [186, 187, 196, 197], "experi": [186, 187, 196, 197], "loop": [186, 187, 196, 197], "plot": [186, 187, 196, 197], "imag": [187, 197], "via": [187, 197], "self": [187, 197], "supervis": [187, 197], "prepar": [187, 197], "dinov2": [187, 197], "your": [187, 197], "preprocess": [187, 197], "initi": [189, 190, 191, 199, 200, 201], "And": [189, 190, 199, 200], "river": [191, 201], "librari": 202, "toolbox": 202, "algorithm": 202, "user": 202, "cite": 202, "indic": 202, "tabl": 202, "missing_label": 204, "tutori": 205}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "nbsphinx": 4, "copy_sphinx_gallery_notebooks": 1, "sphinx": 57}, "alltitles": {"Contributing Guide": [[0, "contributing-guide"]], "Overview": [[0, "overview"]], "Thank you, contributors!": [[0, "thank-you-contributors"]], "Getting Help": [[0, "getting-help"]], "Roadmap": [[0, "roadmap"]], "Get Started": [[0, "get-started"]], "Setup Development Environment": [[0, "setup-development-environment"]], "Example With miniconda": [[0, "example-with-miniconda"]], "Install Dependencies": [[0, "install-dependencies"]], "Example with MacOS (Homebrew)": [[0, "example-with-macos-homebrew"]], "Contributing Code": [[0, "contributing-code"]], "General Coding Conventions": [[0, "general-coding-conventions"]], "Example for C3 (Code Contribution Cycle) and Pull Requests": [[0, "example-for-c3-code-contribution-cycle-and-pull-requests"]], "Query Strategies": [[0, "query-strategies"]], "Single-annotator Pool-based Query Strategies": [[0, "single-annotator-pool-based-query-strategies"]], "General": [[0, "general"], [0, "general-2"]], "__init__ method": [[0, "init-method"]], "query method": [[0, "query-method"], [0, "query-method-2"], [0, "query-method-3"]], "General advice": [[0, "general-advice"], [0, "general-advice-2"], [0, "general-advice-3"], [0, "general-advice-6"], [0, "general-advice-7"], [0, "general-advice-8"], [0, "general-advice-9"], [0, "general-advice-10"], [0, "general-advice-11"], [0, "general-advice-12"], [0, "general-advice-13"], [0, "general-advice-14"]], "Testing": [[0, "testing"], [0, "testing-2"], [0, "id7"], [0, "testing-3"], [0, "testing-4"], [0, "testing-5"]], "Single-annotator Stream-based Query Strategies": [[0, "single-annotator-stream-based-query-strategies"]], "update method": [[0, "update-method"], [0, "update-2"]], "General advice for the budget_manager": [[0, "general-advice-for-the-budget-manager"]], "query_by_utilities method": [[0, "query-by-utilities-method"]], "General advice for working with a budget_manager:": [[0, "general-advice-for-working-with-a-budget-manager"]], "Multi-Annotator Pool-based Query Strategies": [[0, "multi-annotator-pool-based-query-strategies"]], "Classifiers": [[0, "classifiers"]], "init method": [[0, "init-2"], [0, "init-3"]], "fit method": [[0, "fit-method"], [0, "fit-2"]], "predict_proba method": [[0, "predict-proba-method"]], "predict method": [[0, "predict-method"], [0, "predict-2"]], "score method": [[0, "score-method"], [0, "score-2"]], "Regressors": [[0, "regressors"]], "Annotators Models": [[0, "annotators-models"]], "predict_annotator_perf method": [[0, "predict-annotator-perf-method"]], "Examples": [[0, "examples"], [1, "examples"], [117, "examples"], [120, "examples"], [202, "examples"]], "Testing and code coverage": [[0, "testing-and-code-coverage"]], "Documentation": [[0, "documentation"]], "Guidelines for writing documentation": [[0, "guidelines-for-writing-documentation"]], "Building the documentation": [[0, "building-the-documentation"]], "Issue Tracking": [[0, "issue-tracking"]], "Checking If A Bug Already Exists": [[0, "checking-if-a-bug-already-exists"]], "Reporting an issue": [[0, "reporting-an-issue"]], "Pool Based AL Strategies": [[2, "pool-based-al-strategies"], [118, "pool-based-al-strategies"], [120, "pool-based-al-strategies"], [121, "pool-based-al-strategies"]], "Stream Based AL Strategies": [[3, "stream-based-al-strategies"], [119, "stream-based-al-strategies"], [120, "stream-based-al-strategies"], [167, "stream-based-al-strategies"]], "skactiveml.base.AnnotatorModelMixin": [[4, "skactiveml-base-annotatormodelmixin"]], "skactiveml.base.BudgetManager": [[5, "skactiveml-base-budgetmanager"]], "skactiveml.base.ClassFrequencyEstimator": [[6, "skactiveml-base-classfrequencyestimator"]], "Examples using skactiveml.base.ClassFrequencyEstimator": [[6, "examples-using-skactiveml-base-classfrequencyestimator"]], "skactiveml.base.MultiAnnotatorPoolQueryStrategy": [[7, "skactiveml-base-multiannotatorpoolquerystrategy"]], "skactiveml.base.ProbabilisticRegressor": [[8, "skactiveml-base-probabilisticregressor"]], "Examples using skactiveml.base.ProbabilisticRegressor": [[8, "examples-using-skactiveml-base-probabilisticregressor"]], "skactiveml.base.QueryStrategy": [[9, "skactiveml-base-querystrategy"]], "Examples using skactiveml.base.QueryStrategy": [[9, "examples-using-skactiveml-base-querystrategy"]], "skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, "skactiveml-base-singleannotatorpoolquerystrategy"]], "Examples using skactiveml.base.SingleAnnotatorPoolQueryStrategy": [[10, "examples-using-skactiveml-base-singleannotatorpoolquerystrategy"]], "skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, "skactiveml-base-singleannotatorstreamquerystrategy"]], "Examples using skactiveml.base.SingleAnnotatorStreamQueryStrategy": [[11, "examples-using-skactiveml-base-singleannotatorstreamquerystrategy"]], "skactiveml.base.SkactivemlClassifier": [[12, "skactiveml-base-skactivemlclassifier"]], "Examples using skactiveml.base.SkactivemlClassifier": [[12, "examples-using-skactiveml-base-skactivemlclassifier"]], "skactiveml.base.SkactivemlRegressor": [[13, "skactiveml-base-skactivemlregressor"]], "Parameters": [[13, "parameters"]], "Examples using skactiveml.base.SkactivemlRegressor": [[13, "examples-using-skactiveml-base-skactivemlregressor"]], "skactiveml.classifier.MixtureModelClassifier": [[14, "skactiveml-classifier-mixturemodelclassifier"]], "Examples using skactiveml.classifier.MixtureModelClassifier": [[14, "examples-using-skactiveml-classifier-mixturemodelclassifier"]], "skactiveml.classifier.ParzenWindowClassifier": [[15, "skactiveml-classifier-parzenwindowclassifier"]], "Examples using skactiveml.classifier.ParzenWindowClassifier": [[15, "examples-using-skactiveml-classifier-parzenwindowclassifier"]], "skactiveml.classifier.SklearnClassifier": [[16, "skactiveml-classifier-sklearnclassifier"]], "Examples using skactiveml.classifier.SklearnClassifier": [[16, "examples-using-skactiveml-classifier-sklearnclassifier"]], "skactiveml.classifier.SlidingWindowClassifier": [[17, "skactiveml-classifier-slidingwindowclassifier"]], "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier": [[18, "skactiveml-classifier-multiannotator-annotatorensembleclassifier"]], "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression": [[19, "skactiveml-classifier-multiannotator-annotatorlogisticregression"]], "skactiveml.exceptions.MappingError": [[20, "skactiveml-exceptions-mappingerror"]], "skactiveml.pool.Badge": [[21, "skactiveml-pool-badge"]], "Examples using skactiveml.pool.Badge": [[21, "examples-using-skactiveml-pool-badge"]], "skactiveml.pool.BatchBALD": [[22, "skactiveml-pool-batchbald"]], "Examples using skactiveml.pool.BatchBALD": [[22, "examples-using-skactiveml-pool-batchbald"]], "skactiveml.pool.Clue": [[23, "skactiveml-pool-clue"]], "Examples using skactiveml.pool.Clue": [[23, "examples-using-skactiveml-pool-clue"]], "skactiveml.pool.ContrastiveAL": [[24, "skactiveml-pool-contrastiveal"]], "Examples using skactiveml.pool.ContrastiveAL": [[24, "examples-using-skactiveml-pool-contrastiveal"]], "skactiveml.pool.CoreSet": [[25, "skactiveml-pool-coreset"]], "Examples using skactiveml.pool.CoreSet": [[25, "examples-using-skactiveml-pool-coreset"]], "skactiveml.pool.CostEmbeddingAL": [[26, "skactiveml-pool-costembeddingal"]], "Examples using skactiveml.pool.CostEmbeddingAL": [[26, "examples-using-skactiveml-pool-costembeddingal"]], "skactiveml.pool.DiscriminativeAL": [[27, "skactiveml-pool-discriminativeal"]], "Examples using skactiveml.pool.DiscriminativeAL": [[27, "examples-using-skactiveml-pool-discriminativeal"]], "skactiveml.pool.EpistemicUncertaintySampling": [[28, "skactiveml-pool-epistemicuncertaintysampling"]], "Examples using skactiveml.pool.EpistemicUncertaintySampling": [[28, "examples-using-skactiveml-pool-epistemicuncertaintysampling"]], "skactiveml.pool.ExpectedModelChangeMaximization": [[29, "skactiveml-pool-expectedmodelchangemaximization"]], "Examples using skactiveml.pool.ExpectedModelChangeMaximization": [[29, "examples-using-skactiveml-pool-expectedmodelchangemaximization"]], "skactiveml.pool.ExpectedModelOutputChange": [[30, "skactiveml-pool-expectedmodeloutputchange"]], "Examples using skactiveml.pool.ExpectedModelOutputChange": [[30, "examples-using-skactiveml-pool-expectedmodeloutputchange"]], "skactiveml.pool.ExpectedModelVarianceReduction": [[31, "skactiveml-pool-expectedmodelvariancereduction"]], "Examples using skactiveml.pool.ExpectedModelVarianceReduction": [[31, "examples-using-skactiveml-pool-expectedmodelvariancereduction"]], "skactiveml.pool.FourDs": [[32, "skactiveml-pool-fourds"]], "Examples using skactiveml.pool.FourDs": [[32, "examples-using-skactiveml-pool-fourds"]], "skactiveml.pool.GreedyBALD": [[33, "skactiveml-pool-greedybald"]], "Examples using skactiveml.pool.GreedyBALD": [[33, "examples-using-skactiveml-pool-greedybald"]], "skactiveml.pool.GreedySamplingTarget": [[34, "skactiveml-pool-greedysamplingtarget"]], "Examples using skactiveml.pool.GreedySamplingTarget": [[34, "examples-using-skactiveml-pool-greedysamplingtarget"]], "skactiveml.pool.GreedySamplingX": [[35, "skactiveml-pool-greedysamplingx"]], "Examples using skactiveml.pool.GreedySamplingX": [[35, "examples-using-skactiveml-pool-greedysamplingx"]], "skactiveml.pool.KLDivergenceMaximization": [[36, "skactiveml-pool-kldivergencemaximization"]], "Examples using skactiveml.pool.KLDivergenceMaximization": [[36, "examples-using-skactiveml-pool-kldivergencemaximization"]], "skactiveml.pool.MonteCarloEER": [[37, "skactiveml-pool-montecarloeer"]], "Examples using skactiveml.pool.MonteCarloEER": [[37, "examples-using-skactiveml-pool-montecarloeer"]], "skactiveml.pool.ParallelUtilityEstimationWrapper": [[38, "skactiveml-pool-parallelutilityestimationwrapper"]], "Examples using skactiveml.pool.ParallelUtilityEstimationWrapper": [[38, "examples-using-skactiveml-pool-parallelutilityestimationwrapper"]], "skactiveml.pool.ProbCover": [[39, "skactiveml-pool-probcover"]], "Examples using skactiveml.pool.ProbCover": [[39, "examples-using-skactiveml-pool-probcover"]], "skactiveml.pool.ProbabilisticAL": [[40, "skactiveml-pool-probabilistical"]], "Examples using skactiveml.pool.ProbabilisticAL": [[40, "examples-using-skactiveml-pool-probabilistical"]], "skactiveml.pool.QueryByCommittee": [[41, "skactiveml-pool-querybycommittee"]], "Examples using skactiveml.pool.QueryByCommittee": [[41, "examples-using-skactiveml-pool-querybycommittee"]], "skactiveml.pool.Quire": [[42, "skactiveml-pool-quire"]], "Examples using skactiveml.pool.Quire": [[42, "examples-using-skactiveml-pool-quire"]], "skactiveml.pool.RandomSampling": [[43, "skactiveml-pool-randomsampling"]], "Examples using skactiveml.pool.RandomSampling": [[43, "examples-using-skactiveml-pool-randomsampling"]], "skactiveml.pool.RegressionTreeBasedAL": [[44, "skactiveml-pool-regressiontreebasedal"]], "Examples using skactiveml.pool.RegressionTreeBasedAL": [[44, "examples-using-skactiveml-pool-regressiontreebasedal"]], "skactiveml.pool.SubSamplingWrapper": [[45, "skactiveml-pool-subsamplingwrapper"]], "Examples using skactiveml.pool.SubSamplingWrapper": [[45, "examples-using-skactiveml-pool-subsamplingwrapper"]], "skactiveml.pool.TypiClust": [[46, "skactiveml-pool-typiclust"]], "Examples using skactiveml.pool.TypiClust": [[46, "examples-using-skactiveml-pool-typiclust"]], "skactiveml.pool.UncertaintySampling": [[47, "skactiveml-pool-uncertaintysampling"]], "Examples using skactiveml.pool.UncertaintySampling": [[47, "examples-using-skactiveml-pool-uncertaintysampling"]], "skactiveml.pool.ValueOfInformationEER": [[48, "skactiveml-pool-valueofinformationeer"]], "Examples using skactiveml.pool.ValueOfInformationEER": [[48, "examples-using-skactiveml-pool-valueofinformationeer"]], "skactiveml.pool.average_kl_divergence": [[49, "skactiveml-pool-average-kl-divergence"]], "skactiveml.pool.batch_bald": [[50, "skactiveml-pool-batch-bald"]], "skactiveml.pool.cost_reduction": [[51, "skactiveml-pool-cost-reduction"]], "skactiveml.pool.expected_average_precision": [[52, "skactiveml-pool-expected-average-precision"]], "skactiveml.pool.k_greedy_center": [[53, "skactiveml-pool-k-greedy-center"]], "Parameters:": [[53, "parameters"]], "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel": [[54, "skactiveml-pool-multiannotator-intervalestimationannotmodel"]], "skactiveml.pool.multiannotator.IntervalEstimationThreshold": [[55, "skactiveml-pool-multiannotator-intervalestimationthreshold"]], "skactiveml.pool.multiannotator.SingleAnnotatorWrapper": [[56, "skactiveml-pool-multiannotator-singleannotatorwrapper"]], "skactiveml.pool.uncertainty_scores": [[57, "skactiveml-pool-uncertainty-scores"]], "skactiveml.pool.utils.IndexClassifierWrapper": [[58, "skactiveml-pool-utils-indexclassifierwrapper"]], "skactiveml.pool.variation_ratios": [[59, "skactiveml-pool-variation-ratios"]], "skactiveml.pool.vote_entropy": [[60, "skactiveml-pool-vote-entropy"]], "skactiveml.stream.CognitiveDualQueryStrategy": [[61, "skactiveml-stream-cognitivedualquerystrategy"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategy": [[61, "examples-using-skactiveml-stream-cognitivedualquerystrategy"]], "skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[62, "skactiveml-stream-cognitivedualquerystrategyfixun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyFixUn": [[62, "examples-using-skactiveml-stream-cognitivedualquerystrategyfixun"]], "skactiveml.stream.CognitiveDualQueryStrategyRan": [[63, "skactiveml-stream-cognitivedualquerystrategyran"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyRan": [[63, "examples-using-skactiveml-stream-cognitivedualquerystrategyran"]], "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[64, "skactiveml-stream-cognitivedualquerystrategyranvarun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyRanVarUn": [[64, "examples-using-skactiveml-stream-cognitivedualquerystrategyranvarun"]], "skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[65, "skactiveml-stream-cognitivedualquerystrategyvarun"]], "Examples using skactiveml.stream.CognitiveDualQueryStrategyVarUn": [[65, "examples-using-skactiveml-stream-cognitivedualquerystrategyvarun"]], "skactiveml.stream.FixedUncertainty": [[66, "skactiveml-stream-fixeduncertainty"]], "Examples using skactiveml.stream.FixedUncertainty": [[66, "examples-using-skactiveml-stream-fixeduncertainty"]], "skactiveml.stream.PeriodicSampling": [[67, "skactiveml-stream-periodicsampling"]], "Examples using skactiveml.stream.PeriodicSampling": [[67, "examples-using-skactiveml-stream-periodicsampling"]], "skactiveml.stream.RandomVariableUncertainty": [[68, "skactiveml-stream-randomvariableuncertainty"]], "Examples using skactiveml.stream.RandomVariableUncertainty": [[68, "examples-using-skactiveml-stream-randomvariableuncertainty"]], "skactiveml.stream.Split": [[69, "skactiveml-stream-split"]], "Examples using skactiveml.stream.Split": [[69, "examples-using-skactiveml-stream-split"]], "skactiveml.stream.StreamDensityBasedAL": [[70, "skactiveml-stream-streamdensitybasedal"]], "Examples using skactiveml.stream.StreamDensityBasedAL": [[70, "examples-using-skactiveml-stream-streamdensitybasedal"]], "skactiveml.stream.StreamProbabilisticAL": [[71, "skactiveml-stream-streamprobabilistical"]], "Examples using skactiveml.stream.StreamProbabilisticAL": [[71, "examples-using-skactiveml-stream-streamprobabilistical"]], "skactiveml.stream.StreamRandomSampling": [[72, "skactiveml-stream-streamrandomsampling"]], "Examples using skactiveml.stream.StreamRandomSampling": [[72, "examples-using-skactiveml-stream-streamrandomsampling"]], "skactiveml.stream.VariableUncertainty": [[73, "skactiveml-stream-variableuncertainty"]], "Examples using skactiveml.stream.VariableUncertainty": [[73, "examples-using-skactiveml-stream-variableuncertainty"]], "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter": [[74, "skactiveml-stream-budgetmanager-balancedincrementalquantilefilter"]], "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager": [[75, "skactiveml-stream-budgetmanager-densitybasedsplitbudgetmanager"]], "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite": [[76, "skactiveml-stream-budgetmanager-estimatedbudgetzliobaite"]], "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager": [[77, "skactiveml-stream-budgetmanager-fixeduncertaintybudgetmanager"]], "skactiveml.stream.budgetmanager.RandomBudgetManager": [[78, "skactiveml-stream-budgetmanager-randombudgetmanager"]], "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager": [[79, "skactiveml-stream-budgetmanager-randomvariableuncertaintybudgetmanager"]], "skactiveml.stream.budgetmanager.SplitBudgetManager": [[80, "skactiveml-stream-budgetmanager-splitbudgetmanager"]], "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager": [[81, "skactiveml-stream-budgetmanager-variableuncertaintybudgetmanager"]], "skactiveml.utils.ExtLabelEncoder": [[82, "skactiveml-utils-extlabelencoder"]], "skactiveml.utils._check_callable": [[83, "skactiveml-utils-check-callable"]], "skactiveml.utils.call_func": [[84, "skactiveml-utils-call-func"]], "skactiveml.utils.check_X_y": [[85, "skactiveml-utils-check-x-y"]], "skactiveml.utils.check_bound": [[86, "skactiveml-utils-check-bound"]], "skactiveml.utils.check_budget_manager": [[87, "skactiveml-utils-check-budget-manager"]], "skactiveml.utils.check_class_prior": [[88, "skactiveml-utils-check-class-prior"]], "skactiveml.utils.check_classes": [[89, "skactiveml-utils-check-classes"]], "skactiveml.utils.check_classifier_params": [[90, "skactiveml-utils-check-classifier-params"]], "skactiveml.utils.check_cost_matrix": [[91, "skactiveml-utils-check-cost-matrix"]], "skactiveml.utils.check_equal_missing_label": [[92, "skactiveml-utils-check-equal-missing-label"]], "skactiveml.utils.check_indices": [[93, "skactiveml-utils-check-indices"]], "skactiveml.utils.check_missing_label": [[94, "skactiveml-utils-check-missing-label"]], "skactiveml.utils.check_random_state": [[95, "skactiveml-utils-check-random-state"]], "skactiveml.utils.check_scalar": [[96, "skactiveml-utils-check-scalar"]], "skactiveml.utils.check_type": [[97, "skactiveml-utils-check-type"]], "skactiveml.utils.compute_vote_vectors": [[98, "skactiveml-utils-compute-vote-vectors"]], "skactiveml.utils.ext_confusion_matrix": [[99, "skactiveml-utils-ext-confusion-matrix"]], "skactiveml.utils.is_labeled": [[100, "skactiveml-utils-is-labeled"]], "Examples using skactiveml.utils.is_labeled": [[100, "examples-using-skactiveml-utils-is-labeled"]], "skactiveml.utils.is_unlabeled": [[101, "skactiveml-utils-is-unlabeled"]], "skactiveml.utils.labeled_indices": [[102, "skactiveml-utils-labeled-indices"]], "Examples using skactiveml.utils.labeled_indices": [[102, "examples-using-skactiveml-utils-labeled-indices"]], "skactiveml.utils.majority_vote": [[103, "skactiveml-utils-majority-vote"]], "skactiveml.utils.match_signature": [[104, "skactiveml-utils-match-signature"]], "skactiveml.utils.rand_argmax": [[105, "skactiveml-utils-rand-argmax"]], "skactiveml.utils.rand_argmin": [[106, "skactiveml-utils-rand-argmin"]], "skactiveml.utils.simple_batch": [[107, "skactiveml-utils-simple-batch"]], "Examples using skactiveml.utils.simple_batch": [[107, "examples-using-skactiveml-utils-simple-batch"]], "skactiveml.utils.unlabeled_indices": [[108, "skactiveml-utils-unlabeled-indices"]], "Examples using skactiveml.utils.unlabeled_indices": [[108, "examples-using-skactiveml-utils-unlabeled-indices"]], "skactiveml.visualization.mesh": [[109, "skactiveml-visualization-mesh"]], "skactiveml.visualization.plot_annotator_utilities": [[110, "skactiveml-visualization-plot-annotator-utilities"]], "skactiveml.visualization.plot_contour_for_samples": [[111, "skactiveml-visualization-plot-contour-for-samples"]], "Examples using skactiveml.visualization.plot_contour_for_samples": [[111, "examples-using-skactiveml-visualization-plot-contour-for-samples"]], "skactiveml.visualization.plot_decision_boundary": [[112, "skactiveml-visualization-plot-decision-boundary"]], "Examples using skactiveml.visualization.plot_decision_boundary": [[112, "examples-using-skactiveml-visualization-plot-decision-boundary"]], "skactiveml.visualization.plot_stream_decision_boundary": [[113, "skactiveml-visualization-plot-stream-decision-boundary"]], "Examples using skactiveml.visualization.plot_stream_decision_boundary": [[113, "examples-using-skactiveml-visualization-plot-stream-decision-boundary"]], "skactiveml.visualization.plot_stream_training_data": [[114, "skactiveml-visualization-plot-stream-training-data"]], "Examples using skactiveml.visualization.plot_stream_training_data": [[114, "examples-using-skactiveml-visualization-plot-stream-training-data"]], "skactiveml.visualization.plot_utilities": [[115, "skactiveml-visualization-plot-utilities"]], "Examples using skactiveml.visualization.plot_utilities": [[115, "examples-using-skactiveml-visualization-plot-utilities"]], "API Reference": [[116, "api-reference"]], "skactiveml.base:": [[116, "module-skactiveml.base"]], "Classes": [[116, "classes"], [116, "id2"], [116, "id3"], [116, "id4"], [116, "id5"], [116, "id6"], [116, "id7"], [116, "id8"], [116, "id10"], [116, "id12"]], "skactiveml.pool:": [[116, "module-skactiveml.pool"]], "Functions": [[116, "functions"], [116, "id9"], [116, "id11"]], "skactiveml.pool.multiannotator:": [[116, "module-skactiveml.pool.multiannotator"]], "skactiveml.pool.utils:": [[116, "module-skactiveml.pool.utils"]], "skactiveml.stream:": [[116, "module-skactiveml.stream"]], "skactiveml.stream.budgetmanager:": [[116, "module-skactiveml.stream.budgetmanager"]], "skactiveml.classifier:": [[116, "module-skactiveml.classifier"]], "skactiveml.classifier.multiannotator:": [[116, "module-skactiveml.classifier.multiannotator"]], "skactiveml.visualization:": [[116, "module-skactiveml.visualization"]], "skactiveml.utils:": [[116, "module-skactiveml.utils"]], "skactiveml.exceptions:": [[116, "module-skactiveml.exceptions"]], "Batch Active Learning by Diverse Gradient Embedding (BADGE)": [[122, "batch-active-learning-by-diverse-gradient-embedding-badge"]], "Batch Bayesian Active Learning by Disagreement (BatchBALD)": [[123, "batch-bayesian-active-learning-by-disagreement-batchbald"]], "Clustering Uncertainty-weighted Embeddings (CLUE)": [[124, "clustering-uncertainty-weighted-embeddings-clue"]], "Contrastive Active Learning (CAL)": [[125, "contrastive-active-learning-cal"]], "Core Set": [[126, "core-set"]], "Active Learning with Cost Embedding": [[127, "active-learning-with-cost-embedding"]], "Discriminative Active Learning": [[128, "discriminative-active-learning"]], "Epistemic Uncertainty Sampling": [[129, "epistemic-uncertainty-sampling"]], "Expected Model Change": [[130, "expected-model-change"]], "Expected Model Output Change": [[131, "expected-model-output-change"]], "Expected Model Variance Reduction": [[132, "expected-model-variance-reduction"]], "Batch Density-Diversity-Distribution-Distance Sampling": [[133, "batch-density-diversity-distribution-distance-sampling"]], "Density-Diversity-Distribution-Distance Sampling": [[134, "density-diversity-distribution-distance-sampling"]], "Bayesian Active Learning by Disagreement (BALD)": [[135, "bayesian-active-learning-by-disagreement-bald"]], "Greedy Sampling on the Target Space (GSy)": [[136, "greedy-sampling-on-the-target-space-gsy"]], "Improved Greedy Sampling (GSi)": [[137, "improved-greedy-sampling-gsi"]], "Greedy Sampling on the Feature Space (GSx)": [[138, "greedy-sampling-on-the-feature-space-gsx"]], "Regression based Kullback Leibler Divergence Maximization": [[139, "regression-based-kullback-leibler-divergence-maximization"]], "Monte-Carlo EER with Log-Loss": [[140, "monte-carlo-eer-with-log-loss"]], "Monte-Carlo EER with Misclassification-Loss": [[141, "monte-carlo-eer-with-misclassification-loss"]], "Parallel Utility Estimation Wrapper": [[142, "parallel-utility-estimation-wrapper"]], "Probability Coverage (ProbCover)": [[143, "probability-coverage-probcover"]], "Multi-class Probabilistic Active Learning": [[144, "multi-class-probabilistic-active-learning"]], "Query-by-Committee (QBC) with Empirical Variance": [[145, "query-by-committee-qbc-with-empirical-variance"]], "Query-by-Committee (QBC) with Kullback-Leibler Divergence": [[146, "query-by-committee-qbc-with-kullback-leibler-divergence"]], "Query-by-Committee (QBC) with Variation Ratios": [[147, "query-by-committee-qbc-with-variation-ratios"]], "Query-by-Committee (QBC) with Vote Entropy": [[148, "query-by-committee-qbc-with-vote-entropy"]], "Querying Informative and Representative Examples": [[149, "querying-informative-and-representative-examples"]], "Random Sampling": [[150, "random-sampling"], [181, "random-sampling"], [181, "id54"]], "Regression Tree Based Active Learning (RT-AL) with Diversity Selection": [[151, "regression-tree-based-active-learning-rt-al-with-diversity-selection"]], "Regression Tree Based Active Learning (RT-AL) with Random Selection": [[152, "regression-tree-based-active-learning-rt-al-with-random-selection"]], "Regression Tree Based Active Learning (RT-AL) with Representativity Selection": [[153, "regression-tree-based-active-learning-rt-al-with-representativity-selection"]], "Sub-sampling Wrapper": [[154, "sub-sampling-wrapper"]], "Typical Clustering (TypiClust)": [[155, "typical-clustering-typiclust"]], "Density-weighted Uncertainty Sampling": [[156, "density-weighted-uncertainty-sampling"]], "Dual strategy for Active Learning": [[157, "dual-strategy-for-active-learning"]], "Expected Average Precision": [[158, "expected-average-precision"]], "Uncertainty Sampling with Entropy": [[159, "uncertainty-sampling-with-entropy"]], "Uncertainty Sampling with Least-Confidence": [[160, "uncertainty-sampling-with-least-confidence"]], "Uncertainty Sampling with Margin": [[161, "uncertainty-sampling-with-margin"]], "Value of Information": [[162, "value-of-information"]], "Value of Information on Labeled Samples": [[163, "value-of-information-on-labeled-samples"]], "Value of Information on Unlabeled Samples": [[164, "value-of-information-on-unlabeled-samples"]], "Computation times": [[165, "computation-times"], [166, "computation-times"], [180, "computation-times"], [203, "computation-times"]], "Cognitive Dual-Query Strategy with Fixed-Uncertainty": [[168, "cognitive-dual-query-strategy-with-fixed-uncertainty"]], "Cognitive Dual-Query Strategy with Random Sampling": [[169, "cognitive-dual-query-strategy-with-random-sampling"]], "Cognitive Dual-Query Strategy with Randomized-Variable-Uncertainty": [[170, "cognitive-dual-query-strategy-with-randomized-variable-uncertainty"]], "Cognitive Dual-Query Strategy with Variable-Uncertainty": [[171, "cognitive-dual-query-strategy-with-variable-uncertainty"]], "Fixed-Uncertainty": [[172, "fixed-uncertainty"]], "Periodic Sampling": [[173, "periodic-sampling"]], "Randomized-Variable-Uncertainty": [[174, "randomized-variable-uncertainty"]], "Split": [[175, "split"]], "Density Based Active Learning for Data Streams": [[176, "density-based-active-learning-for-data-streams"]], "Probabilistic Active Learning in Datastreams": [[177, "probabilistic-active-learning-in-datastreams"]], "Stream Random Sampling": [[178, "stream-random-sampling"]], "Variable-Uncertainty": [[179, "variable-uncertainty"]], "Strategy Overview": [[181, "strategy-overview"]], "Pool": [[181, "pool"]], "Expected Error Reduction": [[181, "expected-error-reduction"]], "Meta": [[181, "meta"]], "Model Change": [[181, "model-change"]], "Query-by-Committee": [[181, "query-by-committee"]], "Uncertainty Sampling": [[181, "uncertainty-sampling"], [181, "id55"]], "Others": [[181, "others"]], "Stream": [[181, "stream"]], "Density Sampling": [[181, "density-sampling"]], "Probalistic Sampling": [[181, "probalistic-sampling"]], "References": [[181, "references"]], "Pool-based Active Learning - Getting Started": [[182, "Pool-based-Active-Learning---Getting-Started"], [192, "Pool-based-Active-Learning---Getting-Started"]], "Data Set Generation": [[182, "Data-Set-Generation"], [184, "Data-Set-Generation"], [186, "Data-Set-Generation"], [188, "Data-Set-Generation"], [192, "Data-Set-Generation"], [194, "Data-Set-Generation"], [196, "Data-Set-Generation"], [198, "Data-Set-Generation"]], "Classification": [[182, "Classification"], [192, "Classification"]], "Query Strategy": [[182, "Query-Strategy"], [192, "Query-Strategy"]], "Active Learning Cycle": [[182, "Active-Learning-Cycle"], [192, "Active-Learning-Cycle"]], "Deep Pool-based Active Learning: Scikit-activeml with Skorch": [[183, "Deep-Pool-based-Active-Learning:-Scikit-activeml-with-Skorch"], [193, "Deep-Pool-based-Active-Learning:-Scikit-activeml-with-Skorch"]], "Loading Digit Data Set": [[183, "Loading-Digit-Data-Set"], [193, "Loading-Digit-Data-Set"]], "Data Augmentation": [[183, "Data-Augmentation"], [193, "Data-Augmentation"]], "Convolutional Neural Network Ensemble": [[183, "Convolutional-Neural-Network-Ensemble"], [193, "Convolutional-Neural-Network-Ensemble"]], "Active Classification": [[183, "Active-Classification"], [188, "Active-Classification"], [193, "Active-Classification"], [198, "Active-Classification"]], "Visualize Results": [[183, "Visualize-Results"], [193, "Visualize-Results"]], "Pool-based Active Learning for Regression - Getting Started": [[184, "Pool-based-Active-Learning-for-Regression---Getting-Started"], [194, "Pool-based-Active-Learning-for-Regression---Getting-Started"]], "Active Regression": [[184, "Active-Regression"], [194, "Active-Regression"]], "Sample Annotating": [[185, "Sample-Annotating"], [195, "Sample-Annotating"]], "The Annotation Widget Class": [[185, "The-Annotation-Widget-Class"], [195, "The-Annotation-Widget-Class"]], "Create Dataset": [[185, "Create-Dataset"], [195, "Create-Dataset"]], "Create and Start Annotation Process": [[185, "Create-and-Start-Annotation-Process"], [195, "Create-and-Start-Annotation-Process"]], "Pool-based Active Learning - Simple Evaluation Study": [[186, "Pool-based-Active-Learning---Simple-Evaluation-Study"], [196, "Pool-based-Active-Learning---Simple-Evaluation-Study"]], "Random Seed Management": [[186, "Random-Seed-Management"], [187, "Random-Seed-Management"], [196, "Random-Seed-Management"], [197, "Random-Seed-Management"]], "Classification Models and Query Strategies": [[186, "Classification-Models-and-Query-Strategies"], [187, "Classification-Models-and-Query-Strategies"], [196, "Classification-Models-and-Query-Strategies"], [197, "Classification-Models-and-Query-Strategies"]], "Experiment Parameters": [[186, "Experiment-Parameters"], [187, "Experiment-Parameters"], [196, "Experiment-Parameters"], [197, "Experiment-Parameters"]], "Experiment Loop": [[186, "Experiment-Loop"], [187, "Experiment-Loop"], [196, "Experiment-Loop"], [197, "Experiment-Loop"]], "Result Plotting": [[186, "Result-Plotting"], [196, "Result-Plotting"]], "Active Image Classification via Self-supervised Learning": [[187, "Active-Image-Classification-via-Self-supervised-Learning"], [197, "Active-Image-Classification-via-Self-supervised-Learning"]], "Prepare Data with DINOv2": [[187, "Prepare-Data-with-DINOv2"], [197, "Prepare-Data-with-DINOv2"]], "Load your preprocessed Dataset": [[187, "Load-your-preprocessed-Dataset"], [197, "Load-your-preprocessed-Dataset"]], "Resulting Plotting": [[187, "Resulting-Plotting"], [197, "Resulting-Plotting"]], "Multi-annotator Pool-based Active Learning - Getting Started": [[188, "Multi-annotator-Pool-based-Active-Learning---Getting-Started"], [198, "Multi-annotator-Pool-based-Active-Learning---Getting-Started"]], "Stream-based Active Learning - Getting Started": [[189, "Stream-based-Active-Learning---Getting-Started"], [199, "Stream-based-Active-Learning---Getting-Started"]], "Initialize Stream Parameters": [[189, "Initialize-Stream-Parameters"], [191, "Initialize-Stream-Parameters"], [199, "Initialize-Stream-Parameters"], [201, "Initialize-Stream-Parameters"]], "Random Seed Generation": [[189, "Random-Seed-Generation"], [190, "Random-Seed-Generation"], [191, "Random-Seed-Generation"], [199, "Random-Seed-Generation"], [200, "Random-Seed-Generation"], [201, "Random-Seed-Generation"]], "Generate And Initialize Data Set": [[189, "Generate-And-Initialize-Data-Set"], [190, "Generate-And-Initialize-Data-Set"], [199, "Generate-And-Initialize-Data-Set"], [200, "Generate-And-Initialize-Data-Set"]], "Initialize Query Strategies": [[189, "Initialize-Query-Strategies"], [190, "Initialize-Query-Strategies"], [191, "Initialize-Query-Strategies"], [199, "Initialize-Query-Strategies"], [200, "Initialize-Query-Strategies"], [201, "Initialize-Query-Strategies"]], "Start Active Learning Cycle": [[189, "Start-Active-Learning-Cycle"], [190, "Start-Active-Learning-Cycle"], [191, "Start-Active-Learning-Cycle"], [199, "Start-Active-Learning-Cycle"], [200, "Start-Active-Learning-Cycle"], [201, "Start-Active-Learning-Cycle"]], "Batch Stream Active Learning with Pool-based Query Strategies": [[190, "Batch-Stream-Active-Learning-with-Pool-based-Query-Strategies"], [200, "Batch-Stream-Active-Learning-with-Pool-based-Query-Strategies"]], "Initialize Batch Stream Parameters": [[190, "Initialize-Batch-Stream-Parameters"], [200, "Initialize-Batch-Stream-Parameters"]], "Stream-based Active Learning with River": [[191, "Stream-based-Active-Learning-with-River"], [201, "Stream-based-Active-Learning-with-River"]], "Generate and Initialize Data Set": [[191, "Generate-and-Initialize-Data-Set"], [201, "Generate-and-Initialize-Data-Set"]], "scikit-activeml: A Library and Toolbox for Active Learning Algorithms": [[202, "scikit-activeml-a-library-and-toolbox-for-active-learning-algorithms"]], "User Installation": [[202, "user-installation"]], "Pool-based Active Learning": [[202, "pool-based-active-learning"]], "Stream-based Active Learning": [[202, "stream-based-active-learning"]], "Query Strategy Overview": [[202, "query-strategy-overview"]], "Citing": [[202, "citing"]], "Indices and tables": [[202, "indices-and-tables"]], "skactiveml.utils.MISSING_LABEL": [[204, "skactiveml-utils-missing-label"]], "Examples using skactiveml.utils.MISSING_LABEL": [[204, "examples-using-skactiveml-utils-missing-label"]], "Tutorials": [[205, "tutorials"]]}, "indexentries": {"annotatormodelmixin (class in skactiveml.base)": [[4, "skactiveml.base.AnnotatorModelMixin"]], "predict_annotator_perf() (skactiveml.base.annotatormodelmixin method)": [[4, "skactiveml.base.AnnotatorModelMixin.predict_annotator_perf"]], "budgetmanager (class in skactiveml.base)": [[5, "skactiveml.base.BudgetManager"]], "get_metadata_routing() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.get_metadata_routing"]], "get_params() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.get_params"]], "query_by_utility() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.query_by_utility"]], "set_params() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.set_params"]], "update() (skactiveml.base.budgetmanager method)": [[5, "skactiveml.base.BudgetManager.update"]], "classfrequencyestimator (class in skactiveml.base)": [[6, "skactiveml.base.ClassFrequencyEstimator"]], "fit() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.fit"]], "get_metadata_routing() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.get_metadata_routing"]], "get_params() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.get_params"]], "predict() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict"]], "predict_freq() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict_freq"]], "predict_proba() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.predict_proba"]], "sample_proba() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.sample_proba"]], "score() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.score"]], "set_fit_request() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_fit_request"]], "set_params() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_params"]], "set_score_request() (skactiveml.base.classfrequencyestimator method)": [[6, "skactiveml.base.ClassFrequencyEstimator.set_score_request"]], "multiannotatorpoolquerystrategy (class in skactiveml.base)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy"]], "get_metadata_routing() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.get_params"]], "query() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.query"]], "set_params() (skactiveml.base.multiannotatorpoolquerystrategy method)": [[7, "skactiveml.base.MultiAnnotatorPoolQueryStrategy.set_params"]], "probabilisticregressor (class in skactiveml.base)": [[8, "skactiveml.base.ProbabilisticRegressor"]], "fit() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.fit"]], "get_metadata_routing() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_metadata_routing"]], "get_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.get_params"]], "predict() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict"]], "predict_target_distribution() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.predict_target_distribution"]], "sample_y() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.sample_y"]], "score() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.score"]], "set_fit_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_fit_request"]], "set_params() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_params"]], "set_predict_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_predict_request"]], "set_score_request() (skactiveml.base.probabilisticregressor method)": [[8, "skactiveml.base.ProbabilisticRegressor.set_score_request"]], "querystrategy (class in skactiveml.base)": [[9, "skactiveml.base.QueryStrategy"]], "get_metadata_routing() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.get_params"]], "query() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.query"]], "set_params() (skactiveml.base.querystrategy method)": [[9, "skactiveml.base.QueryStrategy.set_params"]], "singleannotatorpoolquerystrategy (class in skactiveml.base)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy"]], "get_metadata_routing() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.get_params"]], "query() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.query"]], "set_params() (skactiveml.base.singleannotatorpoolquerystrategy method)": [[10, "skactiveml.base.SingleAnnotatorPoolQueryStrategy.set_params"]], "singleannotatorstreamquerystrategy (class in skactiveml.base)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy"]], "get_metadata_routing() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.get_params"]], "query() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.query"]], "set_params() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.set_params"]], "update() (skactiveml.base.singleannotatorstreamquerystrategy method)": [[11, "skactiveml.base.SingleAnnotatorStreamQueryStrategy.update"]], "skactivemlclassifier (class in skactiveml.base)": [[12, "skactiveml.base.SkactivemlClassifier"]], "fit() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.fit"]], "get_metadata_routing() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_metadata_routing"]], "get_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.get_params"]], "predict() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict"]], "predict_proba() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.predict_proba"]], "score() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.score"]], "set_fit_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_fit_request"]], "set_params() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_params"]], "set_score_request() (skactiveml.base.skactivemlclassifier method)": [[12, "skactiveml.base.SkactivemlClassifier.set_score_request"]], "skactivemlregressor (class in skactiveml.base)": [[13, "skactiveml.base.SkactivemlRegressor"]], "fit() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.fit"]], "get_metadata_routing() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_metadata_routing"]], "get_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.get_params"]], "predict() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.predict"]], "score() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.score"]], "set_fit_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_fit_request"]], "set_params() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_params"]], "set_score_request() (skactiveml.base.skactivemlregressor method)": [[13, "skactiveml.base.SkactivemlRegressor.set_score_request"]], "mixturemodelclassifier (class in skactiveml.classifier)": [[14, "skactiveml.classifier.MixtureModelClassifier"]], "fit() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.get_params"]], "predict() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict"]], "predict_freq() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.predict_proba"]], "sample_proba() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.sample_proba"]], "score() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.score"]], "set_fit_request() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_params"]], "set_score_request() (skactiveml.classifier.mixturemodelclassifier method)": [[14, "skactiveml.classifier.MixtureModelClassifier.set_score_request"]], "metrics (skactiveml.classifier.parzenwindowclassifier attribute)": [[15, "skactiveml.classifier.ParzenWindowClassifier.METRICS"]], "parzenwindowclassifier (class in skactiveml.classifier)": [[15, "skactiveml.classifier.ParzenWindowClassifier"]], "fit() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.get_params"]], "predict() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict"]], "predict_freq() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.predict_proba"]], "sample_proba() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.sample_proba"]], "score() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.score"]], "set_fit_request() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_params"]], "set_score_request() (skactiveml.classifier.parzenwindowclassifier method)": [[15, "skactiveml.classifier.ParzenWindowClassifier.set_score_request"]], "sklearnclassifier (class in skactiveml.classifier)": [[16, "skactiveml.classifier.SklearnClassifier"]], "fit() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.get_params"]], "partial_fit() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.partial_fit"]], "predict() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.predict"]], "predict_proba() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.predict_proba"]], "score() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.score"]], "set_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_params"]], "set_partial_fit_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_partial_fit_request"]], "set_score_request() (skactiveml.classifier.sklearnclassifier method)": [[16, "skactiveml.classifier.SklearnClassifier.set_score_request"]], "slidingwindowclassifier (class in skactiveml.classifier)": [[17, "skactiveml.classifier.SlidingWindowClassifier"]], "fit() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.get_params"]], "partial_fit() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.partial_fit"]], "predict() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict"]], "predict_freq() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict_freq"]], "predict_proba() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.predict_proba"]], "score() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.score"]], "set_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_params"]], "set_partial_fit_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_partial_fit_request"]], "set_score_request() (skactiveml.classifier.slidingwindowclassifier method)": [[17, "skactiveml.classifier.SlidingWindowClassifier.set_score_request"]], "annotatorensembleclassifier (class in skactiveml.classifier.multiannotator)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier"]], "fit() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.fit"]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_metadata_routing"]], "get_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.get_params"]], "named_estimators (skactiveml.classifier.multiannotator.annotatorensembleclassifier property)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.named_estimators"]], "predict() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict"]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.predict_proba"]], "score() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.score"]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_fit_request"]], "set_params() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_params"]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorensembleclassifier method)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.set_score_request"]], "steps (skactiveml.classifier.multiannotator.annotatorensembleclassifier attribute)": [[18, "skactiveml.classifier.multiannotator.AnnotatorEnsembleClassifier.steps"]], "annotatorlogisticregression (class in skactiveml.classifier.multiannotator)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression"]], "fit() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.fit"]], "get_metadata_routing() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_metadata_routing"]], "get_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.get_params"]], "predict() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict"]], "predict_annotator_perf() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_annotator_perf"]], "predict_proba() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.predict_proba"]], "score() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.score"]], "set_fit_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_fit_request"]], "set_params() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_params"]], "set_score_request() (skactiveml.classifier.multiannotator.annotatorlogisticregression method)": [[19, "skactiveml.classifier.multiannotator.AnnotatorLogisticRegression.set_score_request"]], "mappingerror (class in skactiveml.exceptions)": [[20, "skactiveml.exceptions.MappingError"]], "args (skactiveml.exceptions.mappingerror attribute)": [[20, "skactiveml.exceptions.MappingError.args"]], "with_traceback() (skactiveml.exceptions.mappingerror method)": [[20, "skactiveml.exceptions.MappingError.with_traceback"]], "badge (class in skactiveml.pool)": [[21, "skactiveml.pool.Badge"]], "get_metadata_routing() (skactiveml.pool.badge method)": [[21, "skactiveml.pool.Badge.get_metadata_routing"]], "get_params() (skactiveml.pool.badge method)": [[21, "skactiveml.pool.Badge.get_params"]], "query() (skactiveml.pool.badge method)": [[21, "skactiveml.pool.Badge.query"]], "set_params() (skactiveml.pool.badge method)": [[21, "skactiveml.pool.Badge.set_params"]], "batchbald (class in skactiveml.pool)": [[22, "skactiveml.pool.BatchBALD"]], "get_metadata_routing() (skactiveml.pool.batchbald method)": [[22, "skactiveml.pool.BatchBALD.get_metadata_routing"]], "get_params() (skactiveml.pool.batchbald method)": [[22, "skactiveml.pool.BatchBALD.get_params"]], "query() (skactiveml.pool.batchbald method)": [[22, "skactiveml.pool.BatchBALD.query"]], "set_params() (skactiveml.pool.batchbald method)": [[22, "skactiveml.pool.BatchBALD.set_params"]], "clue (class in skactiveml.pool)": [[23, "skactiveml.pool.Clue"]], "get_metadata_routing() (skactiveml.pool.clue method)": [[23, "skactiveml.pool.Clue.get_metadata_routing"]], "get_params() (skactiveml.pool.clue method)": [[23, "skactiveml.pool.Clue.get_params"]], "query() (skactiveml.pool.clue method)": [[23, "skactiveml.pool.Clue.query"]], "set_params() (skactiveml.pool.clue method)": [[23, "skactiveml.pool.Clue.set_params"]], "contrastiveal (class in skactiveml.pool)": [[24, "skactiveml.pool.ContrastiveAL"]], "get_metadata_routing() (skactiveml.pool.contrastiveal method)": [[24, "skactiveml.pool.ContrastiveAL.get_metadata_routing"]], "get_params() (skactiveml.pool.contrastiveal method)": [[24, "skactiveml.pool.ContrastiveAL.get_params"]], "query() (skactiveml.pool.contrastiveal method)": [[24, "skactiveml.pool.ContrastiveAL.query"]], "set_params() (skactiveml.pool.contrastiveal method)": [[24, "skactiveml.pool.ContrastiveAL.set_params"]], "coreset (class in skactiveml.pool)": [[25, "skactiveml.pool.CoreSet"]], "get_metadata_routing() (skactiveml.pool.coreset method)": [[25, "skactiveml.pool.CoreSet.get_metadata_routing"]], "get_params() (skactiveml.pool.coreset method)": [[25, "skactiveml.pool.CoreSet.get_params"]], "query() (skactiveml.pool.coreset method)": [[25, "skactiveml.pool.CoreSet.query"]], "set_params() (skactiveml.pool.coreset method)": [[25, "skactiveml.pool.CoreSet.set_params"]], "costembeddingal (class in skactiveml.pool)": [[26, "skactiveml.pool.CostEmbeddingAL"]], "get_metadata_routing() (skactiveml.pool.costembeddingal method)": [[26, "skactiveml.pool.CostEmbeddingAL.get_metadata_routing"]], "get_params() (skactiveml.pool.costembeddingal method)": [[26, "skactiveml.pool.CostEmbeddingAL.get_params"]], "query() (skactiveml.pool.costembeddingal method)": [[26, "skactiveml.pool.CostEmbeddingAL.query"]], "set_params() (skactiveml.pool.costembeddingal method)": [[26, "skactiveml.pool.CostEmbeddingAL.set_params"]], "discriminativeal (class in skactiveml.pool)": [[27, "skactiveml.pool.DiscriminativeAL"]], "get_metadata_routing() (skactiveml.pool.discriminativeal method)": [[27, "skactiveml.pool.DiscriminativeAL.get_metadata_routing"]], "get_params() (skactiveml.pool.discriminativeal method)": [[27, "skactiveml.pool.DiscriminativeAL.get_params"]], "query() (skactiveml.pool.discriminativeal method)": [[27, "skactiveml.pool.DiscriminativeAL.query"]], "set_params() (skactiveml.pool.discriminativeal method)": [[27, "skactiveml.pool.DiscriminativeAL.set_params"]], "epistemicuncertaintysampling (class in skactiveml.pool)": [[28, "skactiveml.pool.EpistemicUncertaintySampling"]], "get_metadata_routing() (skactiveml.pool.epistemicuncertaintysampling method)": [[28, "skactiveml.pool.EpistemicUncertaintySampling.get_metadata_routing"]], "get_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[28, "skactiveml.pool.EpistemicUncertaintySampling.get_params"]], "query() (skactiveml.pool.epistemicuncertaintysampling method)": [[28, "skactiveml.pool.EpistemicUncertaintySampling.query"]], "set_params() (skactiveml.pool.epistemicuncertaintysampling method)": [[28, "skactiveml.pool.EpistemicUncertaintySampling.set_params"]], "expectedmodelchangemaximization (class in skactiveml.pool)": [[29, "skactiveml.pool.ExpectedModelChangeMaximization"]], "get_metadata_routing() (skactiveml.pool.expectedmodelchangemaximization method)": [[29, "skactiveml.pool.ExpectedModelChangeMaximization.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[29, "skactiveml.pool.ExpectedModelChangeMaximization.get_params"]], "query() (skactiveml.pool.expectedmodelchangemaximization method)": [[29, "skactiveml.pool.ExpectedModelChangeMaximization.query"]], "set_params() (skactiveml.pool.expectedmodelchangemaximization method)": [[29, "skactiveml.pool.ExpectedModelChangeMaximization.set_params"]], "expectedmodeloutputchange (class in skactiveml.pool)": [[30, "skactiveml.pool.ExpectedModelOutputChange"]], "get_metadata_routing() (skactiveml.pool.expectedmodeloutputchange method)": [[30, "skactiveml.pool.ExpectedModelOutputChange.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodeloutputchange method)": [[30, "skactiveml.pool.ExpectedModelOutputChange.get_params"]], "query() (skactiveml.pool.expectedmodeloutputchange method)": [[30, "skactiveml.pool.ExpectedModelOutputChange.query"]], "set_params() (skactiveml.pool.expectedmodeloutputchange method)": [[30, "skactiveml.pool.ExpectedModelOutputChange.set_params"]], "expectedmodelvariancereduction (class in skactiveml.pool)": [[31, "skactiveml.pool.ExpectedModelVarianceReduction"]], "get_metadata_routing() (skactiveml.pool.expectedmodelvariancereduction method)": [[31, "skactiveml.pool.ExpectedModelVarianceReduction.get_metadata_routing"]], "get_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[31, "skactiveml.pool.ExpectedModelVarianceReduction.get_params"]], "query() (skactiveml.pool.expectedmodelvariancereduction method)": [[31, "skactiveml.pool.ExpectedModelVarianceReduction.query"]], "set_params() (skactiveml.pool.expectedmodelvariancereduction method)": [[31, "skactiveml.pool.ExpectedModelVarianceReduction.set_params"]], "fourds (class in skactiveml.pool)": [[32, "skactiveml.pool.FourDs"]], "get_metadata_routing() (skactiveml.pool.fourds method)": [[32, "skactiveml.pool.FourDs.get_metadata_routing"]], "get_params() (skactiveml.pool.fourds method)": [[32, "skactiveml.pool.FourDs.get_params"]], "query() (skactiveml.pool.fourds method)": [[32, "skactiveml.pool.FourDs.query"]], "set_params() (skactiveml.pool.fourds method)": [[32, "skactiveml.pool.FourDs.set_params"]], "greedybald (class in skactiveml.pool)": [[33, "skactiveml.pool.GreedyBALD"]], "get_metadata_routing() (skactiveml.pool.greedybald method)": [[33, "skactiveml.pool.GreedyBALD.get_metadata_routing"]], "get_params() (skactiveml.pool.greedybald method)": [[33, "skactiveml.pool.GreedyBALD.get_params"]], "query() (skactiveml.pool.greedybald method)": [[33, "skactiveml.pool.GreedyBALD.query"]], "set_params() (skactiveml.pool.greedybald method)": [[33, "skactiveml.pool.GreedyBALD.set_params"]], "greedysamplingtarget (class in skactiveml.pool)": [[34, "skactiveml.pool.GreedySamplingTarget"]], "get_metadata_routing() (skactiveml.pool.greedysamplingtarget method)": [[34, "skactiveml.pool.GreedySamplingTarget.get_metadata_routing"]], "get_params() (skactiveml.pool.greedysamplingtarget method)": [[34, "skactiveml.pool.GreedySamplingTarget.get_params"]], "query() (skactiveml.pool.greedysamplingtarget method)": [[34, "skactiveml.pool.GreedySamplingTarget.query"]], "set_params() (skactiveml.pool.greedysamplingtarget method)": [[34, "skactiveml.pool.GreedySamplingTarget.set_params"]], "greedysamplingx (class in skactiveml.pool)": [[35, "skactiveml.pool.GreedySamplingX"]], "get_metadata_routing() (skactiveml.pool.greedysamplingx method)": [[35, "skactiveml.pool.GreedySamplingX.get_metadata_routing"]], "get_params() (skactiveml.pool.greedysamplingx method)": [[35, "skactiveml.pool.GreedySamplingX.get_params"]], "query() (skactiveml.pool.greedysamplingx method)": [[35, "skactiveml.pool.GreedySamplingX.query"]], "set_params() (skactiveml.pool.greedysamplingx method)": [[35, "skactiveml.pool.GreedySamplingX.set_params"]], "kldivergencemaximization (class in skactiveml.pool)": [[36, "skactiveml.pool.KLDivergenceMaximization"]], "get_metadata_routing() (skactiveml.pool.kldivergencemaximization method)": [[36, "skactiveml.pool.KLDivergenceMaximization.get_metadata_routing"]], "get_params() (skactiveml.pool.kldivergencemaximization method)": [[36, "skactiveml.pool.KLDivergenceMaximization.get_params"]], "query() (skactiveml.pool.kldivergencemaximization method)": [[36, "skactiveml.pool.KLDivergenceMaximization.query"]], "set_params() (skactiveml.pool.kldivergencemaximization method)": [[36, "skactiveml.pool.KLDivergenceMaximization.set_params"]], "montecarloeer (class in skactiveml.pool)": [[37, "skactiveml.pool.MonteCarloEER"]], "get_metadata_routing() (skactiveml.pool.montecarloeer method)": [[37, "skactiveml.pool.MonteCarloEER.get_metadata_routing"]], "get_params() (skactiveml.pool.montecarloeer method)": [[37, "skactiveml.pool.MonteCarloEER.get_params"]], "query() (skactiveml.pool.montecarloeer method)": [[37, "skactiveml.pool.MonteCarloEER.query"]], "set_params() (skactiveml.pool.montecarloeer method)": [[37, "skactiveml.pool.MonteCarloEER.set_params"]], "parallelutilityestimationwrapper (class in skactiveml.pool)": [[38, "skactiveml.pool.ParallelUtilityEstimationWrapper"]], "get_metadata_routing() (skactiveml.pool.parallelutilityestimationwrapper method)": [[38, "skactiveml.pool.ParallelUtilityEstimationWrapper.get_metadata_routing"]], "get_params() (skactiveml.pool.parallelutilityestimationwrapper method)": [[38, "skactiveml.pool.ParallelUtilityEstimationWrapper.get_params"]], "query() (skactiveml.pool.parallelutilityestimationwrapper method)": [[38, "skactiveml.pool.ParallelUtilityEstimationWrapper.query"]], "set_params() (skactiveml.pool.parallelutilityestimationwrapper method)": [[38, "skactiveml.pool.ParallelUtilityEstimationWrapper.set_params"]], "probcover (class in skactiveml.pool)": [[39, "skactiveml.pool.ProbCover"]], "get_metadata_routing() (skactiveml.pool.probcover method)": [[39, "skactiveml.pool.ProbCover.get_metadata_routing"]], "get_params() (skactiveml.pool.probcover method)": [[39, "skactiveml.pool.ProbCover.get_params"]], "query() (skactiveml.pool.probcover method)": [[39, "skactiveml.pool.ProbCover.query"]], "set_params() (skactiveml.pool.probcover method)": [[39, "skactiveml.pool.ProbCover.set_params"]], "probabilistical (class in skactiveml.pool)": [[40, "skactiveml.pool.ProbabilisticAL"]], "get_metadata_routing() (skactiveml.pool.probabilistical method)": [[40, "skactiveml.pool.ProbabilisticAL.get_metadata_routing"]], "get_params() (skactiveml.pool.probabilistical method)": [[40, "skactiveml.pool.ProbabilisticAL.get_params"]], "query() (skactiveml.pool.probabilistical method)": [[40, "skactiveml.pool.ProbabilisticAL.query"]], "set_params() (skactiveml.pool.probabilistical method)": [[40, "skactiveml.pool.ProbabilisticAL.set_params"]], "querybycommittee (class in skactiveml.pool)": [[41, "skactiveml.pool.QueryByCommittee"]], "get_metadata_routing() (skactiveml.pool.querybycommittee method)": [[41, "skactiveml.pool.QueryByCommittee.get_metadata_routing"]], "get_params() (skactiveml.pool.querybycommittee method)": [[41, "skactiveml.pool.QueryByCommittee.get_params"]], "query() (skactiveml.pool.querybycommittee method)": [[41, "skactiveml.pool.QueryByCommittee.query"]], "set_params() (skactiveml.pool.querybycommittee method)": [[41, "skactiveml.pool.QueryByCommittee.set_params"]], "metrics (skactiveml.pool.quire attribute)": [[42, "skactiveml.pool.Quire.METRICS"]], "quire (class in skactiveml.pool)": [[42, "skactiveml.pool.Quire"]], "get_metadata_routing() (skactiveml.pool.quire method)": [[42, "skactiveml.pool.Quire.get_metadata_routing"]], "get_params() (skactiveml.pool.quire method)": [[42, "skactiveml.pool.Quire.get_params"]], "query() (skactiveml.pool.quire method)": [[42, "skactiveml.pool.Quire.query"]], "set_params() (skactiveml.pool.quire method)": [[42, "skactiveml.pool.Quire.set_params"]], "randomsampling (class in skactiveml.pool)": [[43, "skactiveml.pool.RandomSampling"]], "get_metadata_routing() (skactiveml.pool.randomsampling method)": [[43, "skactiveml.pool.RandomSampling.get_metadata_routing"]], "get_params() (skactiveml.pool.randomsampling method)": [[43, "skactiveml.pool.RandomSampling.get_params"]], "query() (skactiveml.pool.randomsampling method)": [[43, "skactiveml.pool.RandomSampling.query"]], "set_params() (skactiveml.pool.randomsampling method)": [[43, "skactiveml.pool.RandomSampling.set_params"]], "regressiontreebasedal (class in skactiveml.pool)": [[44, "skactiveml.pool.RegressionTreeBasedAL"]], "get_metadata_routing() (skactiveml.pool.regressiontreebasedal method)": [[44, "skactiveml.pool.RegressionTreeBasedAL.get_metadata_routing"]], "get_params() (skactiveml.pool.regressiontreebasedal method)": [[44, "skactiveml.pool.RegressionTreeBasedAL.get_params"]], "query() (skactiveml.pool.regressiontreebasedal method)": [[44, "skactiveml.pool.RegressionTreeBasedAL.query"]], "set_params() (skactiveml.pool.regressiontreebasedal method)": [[44, "skactiveml.pool.RegressionTreeBasedAL.set_params"]], "subsamplingwrapper (class in skactiveml.pool)": [[45, "skactiveml.pool.SubSamplingWrapper"]], "get_metadata_routing() (skactiveml.pool.subsamplingwrapper method)": [[45, "skactiveml.pool.SubSamplingWrapper.get_metadata_routing"]], "get_params() (skactiveml.pool.subsamplingwrapper method)": [[45, "skactiveml.pool.SubSamplingWrapper.get_params"]], "query() (skactiveml.pool.subsamplingwrapper method)": [[45, "skactiveml.pool.SubSamplingWrapper.query"]], "set_params() (skactiveml.pool.subsamplingwrapper method)": [[45, "skactiveml.pool.SubSamplingWrapper.set_params"]], "typiclust (class in skactiveml.pool)": [[46, "skactiveml.pool.TypiClust"]], "get_metadata_routing() (skactiveml.pool.typiclust method)": [[46, "skactiveml.pool.TypiClust.get_metadata_routing"]], "get_params() (skactiveml.pool.typiclust method)": [[46, "skactiveml.pool.TypiClust.get_params"]], "query() (skactiveml.pool.typiclust method)": [[46, "skactiveml.pool.TypiClust.query"]], "set_params() (skactiveml.pool.typiclust method)": [[46, "skactiveml.pool.TypiClust.set_params"]], "uncertaintysampling (class in skactiveml.pool)": [[47, "skactiveml.pool.UncertaintySampling"]], "get_metadata_routing() (skactiveml.pool.uncertaintysampling method)": [[47, "skactiveml.pool.UncertaintySampling.get_metadata_routing"]], "get_params() (skactiveml.pool.uncertaintysampling method)": [[47, "skactiveml.pool.UncertaintySampling.get_params"]], "query() (skactiveml.pool.uncertaintysampling method)": [[47, "skactiveml.pool.UncertaintySampling.query"]], "set_params() (skactiveml.pool.uncertaintysampling method)": [[47, "skactiveml.pool.UncertaintySampling.set_params"]], "valueofinformationeer (class in skactiveml.pool)": [[48, "skactiveml.pool.ValueOfInformationEER"]], "get_metadata_routing() (skactiveml.pool.valueofinformationeer method)": [[48, "skactiveml.pool.ValueOfInformationEER.get_metadata_routing"]], "get_params() (skactiveml.pool.valueofinformationeer method)": [[48, "skactiveml.pool.ValueOfInformationEER.get_params"]], "query() (skactiveml.pool.valueofinformationeer method)": [[48, "skactiveml.pool.ValueOfInformationEER.query"]], "set_params() (skactiveml.pool.valueofinformationeer method)": [[48, "skactiveml.pool.ValueOfInformationEER.set_params"]], "average_kl_divergence() (in module skactiveml.pool)": [[49, "skactiveml.pool.average_kl_divergence"]], "batch_bald() (in module skactiveml.pool)": [[50, "skactiveml.pool.batch_bald"]], "cost_reduction() (in module skactiveml.pool)": [[51, "skactiveml.pool.cost_reduction"]], "expected_average_precision() (in module skactiveml.pool)": [[52, "skactiveml.pool.expected_average_precision"]], "k_greedy_center() (in module skactiveml.pool)": [[53, "skactiveml.pool.k_greedy_center"]], "intervalestimationannotmodel (class in skactiveml.pool.multiannotator)": [[54, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel"]], "fit() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[54, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.fit"]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[54, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[54, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.get_params"]], "predict_annotator_perf() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[54, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.predict_annotator_perf"]], "set_fit_request() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[54, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_fit_request"]], "set_params() (skactiveml.pool.multiannotator.intervalestimationannotmodel method)": [[54, "skactiveml.pool.multiannotator.IntervalEstimationAnnotModel.set_params"]], "intervalestimationthreshold (class in skactiveml.pool.multiannotator)": [[55, "skactiveml.pool.multiannotator.IntervalEstimationThreshold"]], "get_metadata_routing() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[55, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[55, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.get_params"]], "query() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[55, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.query"]], "set_params() (skactiveml.pool.multiannotator.intervalestimationthreshold method)": [[55, "skactiveml.pool.multiannotator.IntervalEstimationThreshold.set_params"]], "singleannotatorwrapper (class in skactiveml.pool.multiannotator)": [[56, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper"]], "get_metadata_routing() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[56, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_metadata_routing"]], "get_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[56, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.get_params"]], "query() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[56, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.query"]], "set_params() (skactiveml.pool.multiannotator.singleannotatorwrapper method)": [[56, "skactiveml.pool.multiannotator.SingleAnnotatorWrapper.set_params"]], "uncertainty_scores() (in module skactiveml.pool)": [[57, "skactiveml.pool.uncertainty_scores"]], "indexclassifierwrapper (class in skactiveml.pool.utils)": [[58, "skactiveml.pool.utils.IndexClassifierWrapper"]], "fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[58, "skactiveml.pool.utils.IndexClassifierWrapper.fit"]], "is_fitted() (skactiveml.pool.utils.indexclassifierwrapper method)": [[58, "skactiveml.pool.utils.IndexClassifierWrapper.is_fitted"]], "partial_fit() (skactiveml.pool.utils.indexclassifierwrapper method)": [[58, "skactiveml.pool.utils.IndexClassifierWrapper.partial_fit"]], "precompute() (skactiveml.pool.utils.indexclassifierwrapper method)": [[58, "skactiveml.pool.utils.IndexClassifierWrapper.precompute"]], "predict() (skactiveml.pool.utils.indexclassifierwrapper method)": [[58, "skactiveml.pool.utils.IndexClassifierWrapper.predict"]], "predict_freq() (skactiveml.pool.utils.indexclassifierwrapper method)": [[58, "skactiveml.pool.utils.IndexClassifierWrapper.predict_freq"]], "predict_proba() (skactiveml.pool.utils.indexclassifierwrapper method)": [[58, "skactiveml.pool.utils.IndexClassifierWrapper.predict_proba"]], "variation_ratios() (in module skactiveml.pool)": [[59, "skactiveml.pool.variation_ratios"]], "vote_entropy() (in module skactiveml.pool)": [[60, "skactiveml.pool.vote_entropy"]], "cognitivedualquerystrategy (class in skactiveml.stream)": [[61, "skactiveml.stream.CognitiveDualQueryStrategy"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategy method)": [[61, "skactiveml.stream.CognitiveDualQueryStrategy.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[61, "skactiveml.stream.CognitiveDualQueryStrategy.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategy method)": [[61, "skactiveml.stream.CognitiveDualQueryStrategy.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategy method)": [[61, "skactiveml.stream.CognitiveDualQueryStrategy.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategy method)": [[61, "skactiveml.stream.CognitiveDualQueryStrategy.update"]], "cognitivedualquerystrategyfixun (class in skactiveml.stream)": [[62, "skactiveml.stream.CognitiveDualQueryStrategyFixUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[62, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[62, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[62, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[62, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyfixun method)": [[62, "skactiveml.stream.CognitiveDualQueryStrategyFixUn.update"]], "cognitivedualquerystrategyran (class in skactiveml.stream)": [[63, "skactiveml.stream.CognitiveDualQueryStrategyRan"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyran method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategyRan.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyran method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategyRan.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyran method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategyRan.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyran method)": [[63, "skactiveml.stream.CognitiveDualQueryStrategyRan.update"]], "cognitivedualquerystrategyranvarun (class in skactiveml.stream)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyranvarun method)": [[64, "skactiveml.stream.CognitiveDualQueryStrategyRanVarUn.update"]], "cognitivedualquerystrategyvarun (class in skactiveml.stream)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyVarUn"]], "get_metadata_routing() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_metadata_routing"]], "get_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.get_params"]], "query() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.query"]], "set_params() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.set_params"]], "update() (skactiveml.stream.cognitivedualquerystrategyvarun method)": [[65, "skactiveml.stream.CognitiveDualQueryStrategyVarUn.update"]], "fixeduncertainty (class in skactiveml.stream)": [[66, "skactiveml.stream.FixedUncertainty"]], "get_metadata_routing() (skactiveml.stream.fixeduncertainty method)": [[66, "skactiveml.stream.FixedUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.fixeduncertainty method)": [[66, "skactiveml.stream.FixedUncertainty.get_params"]], "query() (skactiveml.stream.fixeduncertainty method)": [[66, "skactiveml.stream.FixedUncertainty.query"]], "set_params() (skactiveml.stream.fixeduncertainty method)": [[66, "skactiveml.stream.FixedUncertainty.set_params"]], "update() (skactiveml.stream.fixeduncertainty method)": [[66, "skactiveml.stream.FixedUncertainty.update"]], "periodicsampling (class in skactiveml.stream)": [[67, "skactiveml.stream.PeriodicSampling"]], "get_metadata_routing() (skactiveml.stream.periodicsampling method)": [[67, "skactiveml.stream.PeriodicSampling.get_metadata_routing"]], "get_params() (skactiveml.stream.periodicsampling method)": [[67, "skactiveml.stream.PeriodicSampling.get_params"]], "query() (skactiveml.stream.periodicsampling method)": [[67, "skactiveml.stream.PeriodicSampling.query"]], "set_params() (skactiveml.stream.periodicsampling method)": [[67, "skactiveml.stream.PeriodicSampling.set_params"]], "update() (skactiveml.stream.periodicsampling method)": [[67, "skactiveml.stream.PeriodicSampling.update"]], "randomvariableuncertainty (class in skactiveml.stream)": [[68, "skactiveml.stream.RandomVariableUncertainty"]], "get_metadata_routing() (skactiveml.stream.randomvariableuncertainty method)": [[68, "skactiveml.stream.RandomVariableUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.randomvariableuncertainty method)": [[68, "skactiveml.stream.RandomVariableUncertainty.get_params"]], "query() (skactiveml.stream.randomvariableuncertainty method)": [[68, "skactiveml.stream.RandomVariableUncertainty.query"]], "set_params() (skactiveml.stream.randomvariableuncertainty method)": [[68, "skactiveml.stream.RandomVariableUncertainty.set_params"]], "update() (skactiveml.stream.randomvariableuncertainty method)": [[68, "skactiveml.stream.RandomVariableUncertainty.update"]], "split (class in skactiveml.stream)": [[69, "skactiveml.stream.Split"]], "get_metadata_routing() (skactiveml.stream.split method)": [[69, "skactiveml.stream.Split.get_metadata_routing"]], "get_params() (skactiveml.stream.split method)": [[69, "skactiveml.stream.Split.get_params"]], "query() (skactiveml.stream.split method)": [[69, "skactiveml.stream.Split.query"]], "set_params() (skactiveml.stream.split method)": [[69, "skactiveml.stream.Split.set_params"]], "update() (skactiveml.stream.split method)": [[69, "skactiveml.stream.Split.update"]], "streamdensitybasedal (class in skactiveml.stream)": [[70, "skactiveml.stream.StreamDensityBasedAL"]], "get_metadata_routing() (skactiveml.stream.streamdensitybasedal method)": [[70, "skactiveml.stream.StreamDensityBasedAL.get_metadata_routing"]], "get_params() (skactiveml.stream.streamdensitybasedal method)": [[70, "skactiveml.stream.StreamDensityBasedAL.get_params"]], "query() (skactiveml.stream.streamdensitybasedal method)": [[70, "skactiveml.stream.StreamDensityBasedAL.query"]], "set_params() (skactiveml.stream.streamdensitybasedal method)": [[70, "skactiveml.stream.StreamDensityBasedAL.set_params"]], "update() (skactiveml.stream.streamdensitybasedal method)": [[70, "skactiveml.stream.StreamDensityBasedAL.update"]], "streamprobabilistical (class in skactiveml.stream)": [[71, "skactiveml.stream.StreamProbabilisticAL"]], "get_metadata_routing() (skactiveml.stream.streamprobabilistical method)": [[71, "skactiveml.stream.StreamProbabilisticAL.get_metadata_routing"]], "get_params() (skactiveml.stream.streamprobabilistical method)": [[71, "skactiveml.stream.StreamProbabilisticAL.get_params"]], "query() (skactiveml.stream.streamprobabilistical method)": [[71, "skactiveml.stream.StreamProbabilisticAL.query"]], "set_params() (skactiveml.stream.streamprobabilistical method)": [[71, "skactiveml.stream.StreamProbabilisticAL.set_params"]], "update() (skactiveml.stream.streamprobabilistical method)": [[71, "skactiveml.stream.StreamProbabilisticAL.update"]], "streamrandomsampling (class in skactiveml.stream)": [[72, "skactiveml.stream.StreamRandomSampling"]], "get_metadata_routing() (skactiveml.stream.streamrandomsampling method)": [[72, "skactiveml.stream.StreamRandomSampling.get_metadata_routing"]], "get_params() (skactiveml.stream.streamrandomsampling method)": [[72, "skactiveml.stream.StreamRandomSampling.get_params"]], "query() (skactiveml.stream.streamrandomsampling method)": [[72, "skactiveml.stream.StreamRandomSampling.query"]], "set_params() (skactiveml.stream.streamrandomsampling method)": [[72, "skactiveml.stream.StreamRandomSampling.set_params"]], "update() (skactiveml.stream.streamrandomsampling method)": [[72, "skactiveml.stream.StreamRandomSampling.update"]], "variableuncertainty (class in skactiveml.stream)": [[73, "skactiveml.stream.VariableUncertainty"]], "get_metadata_routing() (skactiveml.stream.variableuncertainty method)": [[73, "skactiveml.stream.VariableUncertainty.get_metadata_routing"]], "get_params() (skactiveml.stream.variableuncertainty method)": [[73, "skactiveml.stream.VariableUncertainty.get_params"]], "query() (skactiveml.stream.variableuncertainty method)": [[73, "skactiveml.stream.VariableUncertainty.query"]], "set_params() (skactiveml.stream.variableuncertainty method)": [[73, "skactiveml.stream.VariableUncertainty.set_params"]], "update() (skactiveml.stream.variableuncertainty method)": [[73, "skactiveml.stream.VariableUncertainty.update"]], "balancedincrementalquantilefilter (class in skactiveml.stream.budgetmanager)": [[74, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[74, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[74, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[74, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[74, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.set_params"]], "update() (skactiveml.stream.budgetmanager.balancedincrementalquantilefilter method)": [[74, "skactiveml.stream.budgetmanager.BalancedIncrementalQuantileFilter.update"]], "densitybasedsplitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[75, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[75, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[75, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[75, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[75, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.densitybasedsplitbudgetmanager method)": [[75, "skactiveml.stream.budgetmanager.DensityBasedSplitBudgetManager.update"]], "estimatedbudgetzliobaite (class in skactiveml.stream.budgetmanager)": [[76, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[76, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[76, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[76, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[76, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.set_params"]], "update() (skactiveml.stream.budgetmanager.estimatedbudgetzliobaite method)": [[76, "skactiveml.stream.budgetmanager.EstimatedBudgetZliobaite.update"]], "fixeduncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[77, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.fixeduncertaintybudgetmanager method)": [[77, "skactiveml.stream.budgetmanager.FixedUncertaintyBudgetManager.update"]], "randombudgetmanager (class in skactiveml.stream.budgetmanager)": [[78, "skactiveml.stream.budgetmanager.RandomBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[78, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[78, "skactiveml.stream.budgetmanager.RandomBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[78, "skactiveml.stream.budgetmanager.RandomBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[78, "skactiveml.stream.budgetmanager.RandomBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.randombudgetmanager method)": [[78, "skactiveml.stream.budgetmanager.RandomBudgetManager.update"]], "randomvariableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[79, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.randomvariableuncertaintybudgetmanager method)": [[79, "skactiveml.stream.budgetmanager.RandomVariableUncertaintyBudgetManager.update"]], "splitbudgetmanager (class in skactiveml.stream.budgetmanager)": [[80, "skactiveml.stream.budgetmanager.SplitBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.SplitBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.SplitBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.SplitBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.splitbudgetmanager method)": [[80, "skactiveml.stream.budgetmanager.SplitBudgetManager.update"]], "variableuncertaintybudgetmanager (class in skactiveml.stream.budgetmanager)": [[81, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager"]], "get_metadata_routing() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_metadata_routing"]], "get_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.get_params"]], "query_by_utility() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.query_by_utility"]], "set_params() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.set_params"]], "update() (skactiveml.stream.budgetmanager.variableuncertaintybudgetmanager method)": [[81, "skactiveml.stream.budgetmanager.VariableUncertaintyBudgetManager.update"]], "extlabelencoder (class in skactiveml.utils)": [[82, "skactiveml.utils.ExtLabelEncoder"]], "fit() (skactiveml.utils.extlabelencoder method)": [[82, "skactiveml.utils.ExtLabelEncoder.fit"]], "fit_transform() (skactiveml.utils.extlabelencoder method)": [[82, "skactiveml.utils.ExtLabelEncoder.fit_transform"]], "get_metadata_routing() (skactiveml.utils.extlabelencoder method)": [[82, "skactiveml.utils.ExtLabelEncoder.get_metadata_routing"]], "get_params() (skactiveml.utils.extlabelencoder method)": [[82, "skactiveml.utils.ExtLabelEncoder.get_params"]], "inverse_transform() (skactiveml.utils.extlabelencoder method)": [[82, "skactiveml.utils.ExtLabelEncoder.inverse_transform"]], "set_params() (skactiveml.utils.extlabelencoder method)": [[82, "skactiveml.utils.ExtLabelEncoder.set_params"]], "transform() (skactiveml.utils.extlabelencoder method)": [[82, "skactiveml.utils.ExtLabelEncoder.transform"]], "_check_callable() (in module skactiveml.utils)": [[83, "skactiveml.utils._check_callable"]], "call_func() (in module skactiveml.utils)": [[84, "skactiveml.utils.call_func"]], "check_x_y() (in module skactiveml.utils)": [[85, "skactiveml.utils.check_X_y"]], "check_bound() (in module skactiveml.utils)": [[86, "skactiveml.utils.check_bound"]], "check_budget_manager() (in module skactiveml.utils)": [[87, "skactiveml.utils.check_budget_manager"]], "check_class_prior() (in module skactiveml.utils)": [[88, "skactiveml.utils.check_class_prior"]], "check_classes() (in module skactiveml.utils)": [[89, "skactiveml.utils.check_classes"]], "check_classifier_params() (in module skactiveml.utils)": [[90, "skactiveml.utils.check_classifier_params"]], "check_cost_matrix() (in module skactiveml.utils)": [[91, "skactiveml.utils.check_cost_matrix"]], "check_equal_missing_label() (in module skactiveml.utils)": [[92, "skactiveml.utils.check_equal_missing_label"]], "check_indices() (in module skactiveml.utils)": [[93, "skactiveml.utils.check_indices"]], "check_missing_label() (in module skactiveml.utils)": [[94, "skactiveml.utils.check_missing_label"]], "check_random_state() (in module skactiveml.utils)": [[95, "skactiveml.utils.check_random_state"]], "check_scalar() (in module skactiveml.utils)": [[96, "skactiveml.utils.check_scalar"]], "check_type() (in module skactiveml.utils)": [[97, "skactiveml.utils.check_type"]], "compute_vote_vectors() (in module skactiveml.utils)": [[98, "skactiveml.utils.compute_vote_vectors"]], "ext_confusion_matrix() (in module skactiveml.utils)": [[99, "skactiveml.utils.ext_confusion_matrix"]], "is_labeled() (in module skactiveml.utils)": [[100, "skactiveml.utils.is_labeled"]], "is_unlabeled() (in module skactiveml.utils)": [[101, "skactiveml.utils.is_unlabeled"]], "labeled_indices() (in module skactiveml.utils)": [[102, "skactiveml.utils.labeled_indices"]], "majority_vote() (in module skactiveml.utils)": [[103, "skactiveml.utils.majority_vote"]], "match_signature() (in module skactiveml.utils)": [[104, "skactiveml.utils.match_signature"]], "rand_argmax() (in module skactiveml.utils)": [[105, "skactiveml.utils.rand_argmax"]], "rand_argmin() (in module skactiveml.utils)": [[106, "skactiveml.utils.rand_argmin"]], "simple_batch() (in module skactiveml.utils)": [[107, "skactiveml.utils.simple_batch"]], "unlabeled_indices() (in module skactiveml.utils)": [[108, "skactiveml.utils.unlabeled_indices"]], "mesh() (in module skactiveml.visualization)": [[109, "skactiveml.visualization.mesh"]], "plot_annotator_utilities() (in module skactiveml.visualization)": [[110, "skactiveml.visualization.plot_annotator_utilities"]], "plot_contour_for_samples() (in module skactiveml.visualization)": [[111, "skactiveml.visualization.plot_contour_for_samples"]], "plot_decision_boundary() (in module skactiveml.visualization)": [[112, "skactiveml.visualization.plot_decision_boundary"]], "plot_stream_decision_boundary() (in module skactiveml.visualization)": [[113, "skactiveml.visualization.plot_stream_decision_boundary"]], "plot_stream_training_data() (in module skactiveml.visualization)": [[114, "skactiveml.visualization.plot_stream_training_data"]], "plot_utilities() (in module skactiveml.visualization)": [[115, "skactiveml.visualization.plot_utilities"]], "module": [[116, "module-skactiveml"], [116, "module-skactiveml.base"], [116, "module-skactiveml.classifier"], [116, "module-skactiveml.classifier.multiannotator"], [116, "module-skactiveml.exceptions"], [116, "module-skactiveml.pool"], [116, "module-skactiveml.pool.multiannotator"], [116, "module-skactiveml.pool.utils"], [116, "module-skactiveml.stream"], [116, "module-skactiveml.stream.budgetmanager"], [116, "module-skactiveml.utils"], [116, "module-skactiveml.visualization"]], "skactiveml": [[116, "module-skactiveml"]], "skactiveml.base": [[116, "module-skactiveml.base"]], "skactiveml.classifier": [[116, "module-skactiveml.classifier"]], "skactiveml.classifier.multiannotator": [[116, "module-skactiveml.classifier.multiannotator"]], "skactiveml.exceptions": [[116, "module-skactiveml.exceptions"]], "skactiveml.pool": [[116, "module-skactiveml.pool"]], "skactiveml.pool.multiannotator": [[116, "module-skactiveml.pool.multiannotator"]], "skactiveml.pool.utils": [[116, "module-skactiveml.pool.utils"]], "skactiveml.stream": [[116, "module-skactiveml.stream"]], "skactiveml.stream.budgetmanager": [[116, "module-skactiveml.stream.budgetmanager"]], "skactiveml.utils": [[116, "module-skactiveml.utils"]], "skactiveml.visualization": [[116, "module-skactiveml.visualization"]]}})